//
// ActivitiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ActivitiesAPI: APIBase {
    /**
     Add a user to an occurrence
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter test: (query) if true, indicates that the user should NOT be added. This can be used to test for eligibility (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as max player count should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter userId: (body) The id of the user, or null for &#39;caller&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addUser(activityOccurrenceId activityOccurrenceId: Int64, test: Bool? = nil, bypassRestrictions: Bool? = nil, userId: IntWrapper? = nil, completion: ((data: ActivityOccurrenceResource?, error: ErrorType?) -> Void)) {
        addUserWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, test: test, bypassRestrictions: bypassRestrictions, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a user to an occurrence
     - POST /activity-occurrences/{activityOccurrenceId}/users
     - If called with no body, defaults to the user making the call.
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter test: (query) if true, indicates that the user should NOT be added. This can be used to test for eligibility (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as max player count should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter userId: (body) The id of the user, or null for &#39;caller&#39; (optional)

     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    public class func addUserWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, test: Bool? = nil, bypassRestrictions: Bool? = nil, userId: IntWrapper? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activityOccurrenceId}/users"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = userId?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create an activity
     
     - parameter activityResource: (body) The activity resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createActivity(activityResource activityResource: ActivityResource? = nil, completion: ((data: ActivityResource?, error: ErrorType?) -> Void)) {
        createActivityWithRequestBuilder(activityResource: activityResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an activity
     - POST /activities
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     
     - parameter activityResource: (body) The activity resource object (optional)

     - returns: RequestBuilder<ActivityResource> 
     */
    public class func createActivityWithRequestBuilder(activityResource activityResource: ActivityResource? = nil) -> RequestBuilder<ActivityResource> {
        let path = "/activities"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a new activity occurrence. Ex: start a game
     
     - parameter test: (query) if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     - parameter activityOccurrenceResource: (body) The activity occurrence object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createActivityOccurrence(test test: Bool? = nil, activityOccurrenceResource: CreateActivityOccurrenceRequest? = nil, completion: ((data: ActivityOccurrenceResource?, error: ErrorType?) -> Void)) {
        createActivityOccurrenceWithRequestBuilder(test: test, activityOccurrenceResource: activityOccurrenceResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new activity occurrence. Ex: start a game
     - POST /activity-occurrences
     - Has to enforce extra rules if not used as an admin. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     
     - parameter test: (query) if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     - parameter activityOccurrenceResource: (body) The activity occurrence object (optional)

     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    public class func createActivityOccurrenceWithRequestBuilder(test test: Bool? = nil, activityOccurrenceResource: CreateActivityOccurrenceRequest? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        let path = "/activity-occurrences"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a activity template
     
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createActivityTemplate(activityTemplateResource activityTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        createActivityTemplateWithRequestBuilder(activityTemplateResource: activityTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a activity template
     - POST /activities/templates
     - Activity Templates define a type of activity and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter activityTemplateResource: (body) The activity template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func createActivityTemplateWithRequestBuilder(activityTemplateResource activityTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/activities/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an activity
     
     - parameter id: (path) The id of the activity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteActivity(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteActivityWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an activity
     - DELETE /activities/{id}
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The id of the activity 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteActivityWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/activities/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a activity template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteActivityTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteActivityTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a activity template
     - DELETE /activities/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteActivityTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/activities/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List activity definitions
     
     - parameter filterTemplate: (query) Filter for activities that are templates, or specifically not if false (optional)
     - parameter filterName: (query) Filter for activities that have a name starting with specified string (optional)
     - parameter filterId: (query) Filter for activities with an id in the given comma separated list of ids (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getActivities(filterTemplate filterTemplate: Bool? = nil, filterName: String? = nil, filterId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceBareActivityResource?, error: ErrorType?) -> Void)) {
        getActivitiesWithRequestBuilder(filterTemplate: filterTemplate, filterName: filterName, filterId: filterId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List activity definitions
     - GET /activities
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 5,
  "content" : [ {
    "template" : false,
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "name" : "name",
    "launch" : "launch",
    "created_date" : 0,
    "id" : 6,
    "long_description" : "long_description",
    "updated_date" : 1,
    "type" : "type"
  }, {
    "template" : false,
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "name" : "name",
    "launch" : "launch",
    "created_date" : 0,
    "id" : 6,
    "long_description" : "long_description",
    "updated_date" : 1,
    "type" : "type"
  } ],
  "first" : true
}}]
     
     - parameter filterTemplate: (query) Filter for activities that are templates, or specifically not if false (optional)
     - parameter filterName: (query) Filter for activities that have a name starting with specified string (optional)
     - parameter filterId: (query) Filter for activities with an id in the given comma separated list of ids (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceBareActivityResource> 
     */
    public class func getActivitiesWithRequestBuilder(filterTemplate filterTemplate: Bool? = nil, filterName: String? = nil, filterId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceBareActivityResource> {
        let path = "/activities"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_template": filterTemplate,
            "filter_name": filterName,
            "filter_id": filterId,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceBareActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single activity
     
     - parameter id: (path) The id of the activity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getActivity(id id: Int64, completion: ((data: ActivityResource?, error: ErrorType?) -> Void)) {
        getActivityWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single activity
     - GET /activities/{id}
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     
     - parameter id: (path) The id of the activity 

     - returns: RequestBuilder<ActivityResource> 
     */
    public class func getActivityWithRequestBuilder(id id: Int64) -> RequestBuilder<ActivityResource> {
        var path = "/activities/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Load a single activity occurrence details
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getActivityOccurrenceDetails(activityOccurrenceId activityOccurrenceId: Int64, completion: ((data: ActivityOccurrenceResource?, error: ErrorType?) -> Void)) {
        getActivityOccurrenceDetailsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Load a single activity occurrence details
     - GET /activity-occurrences/{activityOccurrenceId}
     - <b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 

     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    public class func getActivityOccurrenceDetailsWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activityOccurrenceId}"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single activity template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getActivityTemplate(id id: String, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        getActivityTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single activity template
     - GET /activities/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func getActivityTemplateWithRequestBuilder(id id: String) -> RequestBuilder<TemplateResource> {
        var path = "/activities/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search activity templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getActivityTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceTemplateResource?, error: ErrorType?) -> Void)) {
        getActivityTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search activity templates
     - GET /activities/templates
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  }, {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    public class func getActivityTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/activities/templates"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List activity occurrences
     
     - parameter filterActivity: (query) Filter for occurrences of the given activity ID (optional)
     - parameter filterStatus: (query) Filter for occurrences in the given status (optional)
     - parameter filterEvent: (query) Filter for occurrences played during the given event (optional)
     - parameter filterChallenge: (query) Filter for occurrences played within the given challenge (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listActivityOccurrences(filterActivity filterActivity: String? = nil, filterStatus: String? = nil, filterEvent: Int32? = nil, filterChallenge: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceActivityOccurrenceResource?, error: ErrorType?) -> Void)) {
        listActivityOccurrencesWithRequestBuilder(filterActivity: filterActivity, filterStatus: filterStatus, filterEvent: filterEvent, filterChallenge: filterChallenge, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List activity occurrences
     - GET /activity-occurrences
     - <b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 4,
  "content" : [ {
    "settings" : [ {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    }, {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    } ],
    "challenge_activity_id" : 1,
    "simulated" : false,
    "core_settings" : {
      "non_host_status_control" : false,
      "host_status_control" : false,
      "boot_in_play" : false,
      "leave_in_play" : false,
      "join_in_play" : false,
      "max_players" : 5,
      "results_trust" : "none",
      "custom_launch_address" : "custom_launch_address",
      "min_players" : 5
    },
    "bans" : [ 6, 6 ],
    "entitlement" : {
      "item_id" : 5,
      "price" : 5.63737665663332876420099637471139430999755859375,
      "name" : "name",
      "sku" : "sku",
      "currency_code" : "currency_code"
    },
    "users" : [ {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    }, {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    } ],
    "event_id" : 7,
    "activity_id" : 0,
    "host" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "created_date" : 2,
    "id" : 3,
    "updated_date" : 4,
    "reward_status" : "pending",
    "start_date" : 2,
    "status" : "SETUP"
  }, {
    "settings" : [ {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    }, {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    } ],
    "challenge_activity_id" : 1,
    "simulated" : false,
    "core_settings" : {
      "non_host_status_control" : false,
      "host_status_control" : false,
      "boot_in_play" : false,
      "leave_in_play" : false,
      "join_in_play" : false,
      "max_players" : 5,
      "results_trust" : "none",
      "custom_launch_address" : "custom_launch_address",
      "min_players" : 5
    },
    "bans" : [ 6, 6 ],
    "entitlement" : {
      "item_id" : 5,
      "price" : 5.63737665663332876420099637471139430999755859375,
      "name" : "name",
      "sku" : "sku",
      "currency_code" : "currency_code"
    },
    "users" : [ {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    }, {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    } ],
    "event_id" : 7,
    "activity_id" : 0,
    "host" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "created_date" : 2,
    "id" : 3,
    "updated_date" : 4,
    "reward_status" : "pending",
    "start_date" : 2,
    "status" : "SETUP"
  } ],
  "first" : true
}}]
     
     - parameter filterActivity: (query) Filter for occurrences of the given activity ID (optional)
     - parameter filterStatus: (query) Filter for occurrences in the given status (optional)
     - parameter filterEvent: (query) Filter for occurrences played during the given event (optional)
     - parameter filterChallenge: (query) Filter for occurrences played within the given challenge (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceActivityOccurrenceResource> 
     */
    public class func listActivityOccurrencesWithRequestBuilder(filterActivity filterActivity: String? = nil, filterStatus: String? = nil, filterEvent: Int32? = nil, filterChallenge: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceActivityOccurrenceResource> {
        let path = "/activity-occurrences"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_activity": filterActivity,
            "filter_status": filterStatus,
            "filter_event": filterEvent?.encodeToJSON(),
            "filter_challenge": filterChallenge?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove a user from an occurrence
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user, or &#39;me&#39; 
     - parameter ban: (query) if true, indicates that the user should not be allowed to re-join. Can only be set by host or admin (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as current status should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeUser(activityOccurrenceId activityOccurrenceId: Int64, userId: String, ban: Bool? = nil, bypassRestrictions: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        removeUserWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, userId: userId, ban: ban, bypassRestrictions: bypassRestrictions).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove a user from an occurrence
     - DELETE /activity-occurrences/{activityOccurrenceId}/users/{userId}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user, or &#39;me&#39; 
     - parameter ban: (query) if true, indicates that the user should not be allowed to re-join. Can only be set by host or admin (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as current status should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    public class func removeUserWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, userId: String, ban: Bool? = nil, bypassRestrictions: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/activity-occurrences/{activityOccurrenceId}/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ban": ban,
            "bypass_restrictions": bypassRestrictions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Sets the status of an activity occurrence to FINISHED and logs metrics
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceResults: (body) The activity occurrence object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setActivityOccurrenceResults(activityOccurrenceId activityOccurrenceId: Int64, activityOccurrenceResults: ActivityOccurrenceResultsResource? = nil, completion: ((data: ActivityOccurrenceResults?, error: ErrorType?) -> Void)) {
        setActivityOccurrenceResultsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, activityOccurrenceResults: activityOccurrenceResults).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Sets the status of an activity occurrence to FINISHED and logs metrics
     - POST /activity-occurrences/{activityOccurrenceId}/results
     - In addition to user permissions requirements there is security based on the core_settings.results_trust setting. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "users" : [ {
    "score" : 6,
    "ties" : 1,
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "rank" : 0,
    "updated_date" : 5,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "tags" : [ "tags", "tags" ]
  }, {
    "score" : 6,
    "ties" : 1,
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "rank" : 0,
    "updated_date" : 5,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "tags" : [ "tags", "tags" ]
  } ]
}}]
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceResults: (body) The activity occurrence object (optional)

     - returns: RequestBuilder<ActivityOccurrenceResults> 
     */
    public class func setActivityOccurrenceResultsWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, activityOccurrenceResults: ActivityOccurrenceResultsResource? = nil) -> RequestBuilder<ActivityOccurrenceResults> {
        var path = "/activity-occurrences/{activityOccurrenceId}/results"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceResults?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityOccurrenceResults>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Sets the settings of an activity occurrence
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter settings: (body) The new settings (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setActivityOccurrenceSettings(activityOccurrenceId activityOccurrenceId: Int64, settings: ActivityOccurrenceSettingsResource? = nil, completion: ((data: ActivityOccurrenceResource?, error: ErrorType?) -> Void)) {
        setActivityOccurrenceSettingsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, settings: settings).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Sets the settings of an activity occurrence
     - PUT /activity-occurrences/{activityOccurrenceId}/settings
     - <b>Permissions Needed:</b> ACTIVITIES_USER and host or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter settings: (body) The new settings (optional)

     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    public class func setActivityOccurrenceSettingsWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, settings: ActivityOccurrenceSettingsResource? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activityOccurrenceId}/settings"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = settings?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set a user's status within an occurrence
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user 
     - parameter status: (body) The new status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setUserStatus(activityOccurrenceId activityOccurrenceId: Int64, userId: String, status: ActivityUserStatusWrapper? = nil, completion: ((data: ActivityUserResource?, error: ErrorType?) -> Void)) {
        setUserStatusWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, userId: userId, status: status).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set a user's status within an occurrence
     - PUT /activity-occurrences/{activityOccurrenceId}/users/{userId}/status
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "joined_date" : 1,
  "metric" : {
    "user_id" : 6,
    "value" : 7,
    "activity_occurence_id" : 1,
    "tags" : [ "tags", "tags" ]
  },
  "host" : false,
  "left_date" : 1,
  "id" : 7,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "status" : "present"
}}]
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user 
     - parameter status: (body) The new status (optional)

     - returns: RequestBuilder<ActivityUserResource> 
     */
    public class func setUserStatusWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, userId: String, status: ActivityUserStatusWrapper? = nil) -> RequestBuilder<ActivityUserResource> {
        var path = "/activity-occurrences/{activityOccurrenceId}/users/{userId}/status"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = status?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityUserResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an activity
     
     - parameter id: (path) The id of the activity 
     - parameter activityResource: (body) The activity resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateActivity(id id: Int64, activityResource: ActivityResource? = nil, completion: ((data: ActivityResource?, error: ErrorType?) -> Void)) {
        updateActivityWithRequestBuilder(id: id, activityResource: activityResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an activity
     - PUT /activities/{id}
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     
     - parameter id: (path) The id of the activity 
     - parameter activityResource: (body) The activity resource object (optional)

     - returns: RequestBuilder<ActivityResource> 
     */
    public class func updateActivityWithRequestBuilder(id id: Int64, activityResource: ActivityResource? = nil) -> RequestBuilder<ActivityResource> {
        var path = "/activities/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the status of an activity occurrence
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceStatus: (body) The activity occurrence status object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateActivityOccurrenceStatus(activityOccurrenceId activityOccurrenceId: Int64, activityOccurrenceStatus: ActivityOccurrenceStatusWrapper? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateActivityOccurrenceStatusWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, activityOccurrenceStatus: activityOccurrenceStatus).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the status of an activity occurrence
     - PUT /activity-occurrences/{activityOccurrenceId}/status
     - If setting to 'FINISHED' reward will be run based on current metrics that have been recorded already. Alternatively, see results endpoint to finish and record all metrics at once. Can be called by non-host participants if non_host_status_control is true. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER and host or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceStatus: (body) The activity occurrence status object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateActivityOccurrenceStatusWithRequestBuilder(activityOccurrenceId activityOccurrenceId: Int64, activityOccurrenceStatus: ActivityOccurrenceStatusWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/activity-occurrences/{activityOccurrenceId}/status"
        path = path.stringByReplacingOccurrencesOfString("{activity_occurrence_id}", withString: "\(activityOccurrenceId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceStatus?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an activity template
     
     - parameter id: (path) The id of the template 
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateActivityTemplate(id id: String, activityTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        updateActivityTemplateWithRequestBuilder(id: id, activityTemplateResource: activityTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an activity template
     - PUT /activities/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter activityTemplateResource: (body) The activity template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func updateActivityTemplateWithRequestBuilder(id id: String, activityTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/activities/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
