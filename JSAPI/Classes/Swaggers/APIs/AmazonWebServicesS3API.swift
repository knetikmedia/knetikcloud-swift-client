//
// AmazonWebServicesS3API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AmazonWebServicesS3API: APIBase {
    /**
     Get a signed S3 URL
     
     - parameter filename: (query) The file name (optional)
     - parameter contentType: (query) The content type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSignedS3URL(filename filename: String? = nil, contentType: String? = nil, completion: ((data: AmazonS3Activity?, error: ErrorType?) -> Void)) {
        getSignedS3URLWithRequestBuilder(filename: filename, contentType: contentType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a signed S3 URL
     - GET /amazon/s3/signedposturl
     - Requires the file name and file content type (i.e., 'video/mpeg')
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "filename" : "aeiou",
  "object_key" : "aeiou",
  "user_id" : 7,
  "action" : "aeiou",
  "created_date" : 3,
  "id" : 9,
  "url" : "aeiou"
}}]
     
     - parameter filename: (query) The file name (optional)
     - parameter contentType: (query) The content type (optional)

     - returns: RequestBuilder<AmazonS3Activity> 
     */
    public class func getSignedS3URLWithRequestBuilder(filename filename: String? = nil, contentType: String? = nil) -> RequestBuilder<AmazonS3Activity> {
        let path = "/amazon/s3/signedposturl"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filename": filename,
            "content_type": contentType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AmazonS3Activity>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
