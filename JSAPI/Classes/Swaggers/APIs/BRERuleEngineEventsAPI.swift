//
// BRERuleEngineEventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BRERuleEngineEventsAPI: APIBase {
    /**
     Fire a new event, based on an existing trigger
     
     - parameter breEvent: (body) The BRE event object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendBREEvent(breEvent breEvent: BreEvent? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        sendBREEventWithRequestBuilder(breEvent: breEvent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Fire a new event, based on an existing trigger
     - POST /bre/events
     - Parameters within the event must match names and types from the trigger. Actual rule execution is asynchornous.  Returns request id, which will be used as the event id
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=""}]
     
     - parameter breEvent: (body) The BRE event object (optional)

     - returns: RequestBuilder<String> 
     */
    public class func sendBREEventWithRequestBuilder(breEvent breEvent: BreEvent? = nil) -> RequestBuilder<String> {
        let path = "/bre/events"
        let URLString = JSAPIAPI.basePath + path
        let parameters = breEvent?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
