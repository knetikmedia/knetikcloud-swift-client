//
// BRERuleEngineExpressionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BRERuleEngineExpressionsAPI: APIBase {
    /**
     Lookup a specific expression
     
     - parameter type: (path) Specifiy the type of expression as returned by the listing endpoint 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBREExpression(type type: String, completion: ((data: ExpressionResource?, error: ErrorType?) -> Void)) {
        getBREExpressionWithRequestBuilder(type: type).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Lookup a specific expression
     - GET /bre/expressions/{type}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "definition" : "definition",
  "type" : "type"
}}]
     
     - parameter type: (path) Specifiy the type of expression as returned by the listing endpoint 

     - returns: RequestBuilder<ExpressionResource> 
     */
    public class func getBREExpressionWithRequestBuilder(type type: String) -> RequestBuilder<ExpressionResource> {
        var path = "/bre/expressions/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ExpressionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter filterTypeGroup
     */
    public enum FilterTypeGroup_getBREExpressions: String { 
        case Operation = "operation"
        case Lookup = "lookup"
        case Predicate = "predicate"
    }

    /**
     Get a list of supported expressions to use in conditions or actions.
     
     - parameter filterTypeGroup: (query) Filter for expressions by type group (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBREExpressions(filterTypeGroup filterTypeGroup: FilterTypeGroup_getBREExpressions? = nil, completion: ((data: [ExpressionResource]?, error: ErrorType?) -> Void)) {
        getBREExpressionsWithRequestBuilder(filterTypeGroup: filterTypeGroup).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of supported expressions to use in conditions or actions.
     - GET /bre/expressions
     - Each resource contains a type and a definition that are read-only, all the other fields must be provided when using the expression in a rule.
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=[ {
  "definition" : "definition",
  "type" : "type"
}, {
  "definition" : "definition",
  "type" : "type"
} ]}]
     
     - parameter filterTypeGroup: (query) Filter for expressions by type group (optional)

     - returns: RequestBuilder<[ExpressionResource]> 
     */
    public class func getBREExpressionsWithRequestBuilder(filterTypeGroup filterTypeGroup: FilterTypeGroup_getBREExpressions? = nil) -> RequestBuilder<[ExpressionResource]> {
        let path = "/bre/expressions"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_type_group": filterTypeGroup?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ExpressionResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns the textual representation of an expression
     
     - parameter expression: (body) The expression resource to be converted (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExpressionAsText(expression expression: ExpressionResource? = nil, completion: ((data: StringWrapper?, error: ErrorType?) -> Void)) {
        getExpressionAsTextWithRequestBuilder(expression: expression).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns the textual representation of an expression
     - POST /bre/expressions
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "value" : "value"
}}]
     
     - parameter expression: (body) The expression resource to be converted (optional)

     - returns: RequestBuilder<StringWrapper> 
     */
    public class func getExpressionAsTextWithRequestBuilder(expression expression: ExpressionResource? = nil) -> RequestBuilder<StringWrapper> {
        let path = "/bre/expressions"
        let URLString = JSAPIAPI.basePath + path
        let parameters = expression?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StringWrapper>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
