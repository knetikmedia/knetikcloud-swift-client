//
// BRERuleEngineVariablesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BRERuleEngineVariablesAPI: APIBase {
    /**
     Get a list of variable types available
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBREVariableTypes(completion: ((data: [VariableTypeResource]?, error: ErrorType?) -> Void)) {
        getBREVariableTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of variable types available
     - GET /bre/variable-types
     - Types include integer, string, user and invoice. These are used to qualify trigger parameters and action variables with strong typing.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "enumerable" : false,
  "name" : "aeiou",
  "base" : "NUMBER"
} ]}]

     - returns: RequestBuilder<[VariableTypeResource]> 
     */
    public class func getBREVariableTypesWithRequestBuilder() -> RequestBuilder<[VariableTypeResource]> {
        let path = "/bre/variable-types"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[VariableTypeResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List valid values for a type
     
     - parameter name: (path) The name of the type 
     - parameter filterName: (query) Filter results by those with names starting with this string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBREVariableValues(name name: String, filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceSimpleReferenceResourceobject?, error: ErrorType?) -> Void)) {
        getBREVariableValuesWithRequestBuilder(name: name, filterName: filterName, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List valid values for a type
     - GET /bre/variable-types/{name}/values
     - Used to lookup users to fill in a user constant for example. Only types marked as enumerable are suppoorted here.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "name" : "aeiou",
    "id" : "{}"
  } ],
  "first" : true
}}]
     
     - parameter name: (path) The name of the type 
     - parameter filterName: (query) Filter results by those with names starting with this string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceSimpleReferenceResourceobject> 
     */
    public class func getBREVariableValuesWithRequestBuilder(name name: String, filterName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceSimpleReferenceResourceobject> {
        var path = "/bre/variable-types/{name}/values"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_name": filterName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceSimpleReferenceResourceobject>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
