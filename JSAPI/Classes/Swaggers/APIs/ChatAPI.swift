//
// ChatAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ChatAPI: APIBase {
    /**
     Acknowledge number of messages in a thread
     
     - parameter id: (path) The thread id 
     - parameter readCount: (body) The amount of messages read (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func acknowledgeChatMessage(id id: String, readCount: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        acknowledgeChatMessageWithRequestBuilder(id: id, readCount: readCount).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Acknowledge number of messages in a thread
     - PUT /chat/threads/{id}/acknowledge
     - <b>Permissions Needed:</b> owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The thread id 
     - parameter readCount: (body) The amount of messages read (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func acknowledgeChatMessageWithRequestBuilder(id id: String, readCount: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/chat/threads/{id}/acknowledge"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = readCount?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a user to a chat message blacklist
     
     - parameter blacklistedUserId: (path) The user id to blacklist 
     - parameter id: (path) The user id or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addChatMessageBlacklist(blacklistedUserId blacklistedUserId: Int32, id: String, completion: ((error: ErrorType?) -> Void)) {
        addChatMessageBlacklistWithRequestBuilder(blacklistedUserId: blacklistedUserId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a user to a chat message blacklist
     - POST /chat/users/{id}/blacklist/{blacklistedUserId}
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter blacklistedUserId: (path) The user id to blacklist 
     - parameter id: (path) The user id or &#39;me&#39; 

     - returns: RequestBuilder<Void> 
     */
    public class func addChatMessageBlacklistWithRequestBuilder(blacklistedUserId blacklistedUserId: Int32, id: String) -> RequestBuilder<Void> {
        var path = "/chat/users/{id}/blacklist/{blacklistedUserId}"
        path = path.stringByReplacingOccurrencesOfString("{blacklisted_user_id}", withString: "\(blacklistedUserId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a message
     
     - parameter id: (path) The message id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteChatMessage(id id: String, completion: ((error: ErrorType?) -> Void)) {
        deleteChatMessageWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a message
     - DELETE /chat/messages/{id}
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The message id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteChatMessageWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/chat/messages/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Edit your message
     
     - parameter id: (path) The message id 
     - parameter chatMessageResource: (body) The chat message resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func editChatMessage(id id: String, chatMessageResource: ChatMessageResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        editChatMessageWithRequestBuilder(id: id, chatMessageResource: chatMessageResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Edit your message
     - PUT /chat/messages/{id}
     - <b>Permissions Needed:</b> owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The message id 
     - parameter chatMessageResource: (body) The chat message resource (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func editChatMessageWithRequestBuilder(id id: String, chatMessageResource: ChatMessageResource? = nil) -> RequestBuilder<Void> {
        var path = "/chat/messages/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = chatMessageResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a message
     
     - parameter id: (path) The message id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getChatMessage(id id: String, completion: ((data: ChatMessageResource?, error: ErrorType?) -> Void)) {
        getChatMessageWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a message
     - GET /chat/messages/{id}
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "recipient_type" : "user",
  "thread_id" : "thread_id",
  "edited" : false,
  "message_type" : "message_type",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 1,
  "content" : "{}",
  "sender_id" : 6,
  "recipient_id" : "recipient_id"
}}]
     
     - parameter id: (path) The message id 

     - returns: RequestBuilder<ChatMessageResource> 
     */
    public class func getChatMessageWithRequestBuilder(id id: String) -> RequestBuilder<ChatMessageResource> {
        var path = "/chat/messages/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ChatMessageResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of blocked users for chat messaging
     
     - parameter id: (path) The user id or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getChatMessageBlacklist(id id: String, completion: ((data: [ChatBlacklistResource]?, error: ErrorType?) -> Void)) {
        getChatMessageBlacklistWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of blocked users for chat messaging
     - GET /chat/users/{id}/blacklist
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=[ {
  "user_id" : 6,
  "blacklisted_user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 0,
  "id" : "id"
}, {
  "user_id" : 6,
  "blacklisted_user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 0,
  "id" : "id"
} ]}]
     
     - parameter id: (path) The user id or &#39;me&#39; 

     - returns: RequestBuilder<[ChatBlacklistResource]> 
     */
    public class func getChatMessageBlacklistWithRequestBuilder(id id: String) -> RequestBuilder<[ChatBlacklistResource]> {
        var path = "/chat/users/{id}/blacklist"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ChatBlacklistResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List your threads
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getChatThreads(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceChatUserThreadResource?, error: ErrorType?) -> Void)) {
        getChatThreadsWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List your threads
     - GET /chat/threads
     - <b>Permissions Needed:</b> owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 3,
  "last" : true,
  "size" : 4,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 1,
  "number_of_elements" : 2,
  "content" : [ {
    "thread_id" : "thread_id",
    "user_id" : 9,
    "created_date" : 0,
    "thread" : {
      "recipient_type" : "user",
      "active_users" : 1,
      "subject" : "subject",
      "count" : 5,
      "created_date" : 5,
      "id" : "id",
      "updated_date" : 2,
      "recipient_id" : "recipient_id"
    },
    "updated_date" : 7,
    "read_count" : 6
  }, {
    "thread_id" : "thread_id",
    "user_id" : 9,
    "created_date" : 0,
    "thread" : {
      "recipient_type" : "user",
      "active_users" : 1,
      "subject" : "subject",
      "count" : 5,
      "created_date" : 5,
      "id" : "id",
      "updated_date" : 2,
      "recipient_id" : "recipient_id"
    },
    "updated_date" : 7,
    "read_count" : 6
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)

     - returns: RequestBuilder<PageResourceChatUserThreadResource> 
     */
    public class func getChatThreadsWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceChatUserThreadResource> {
        let path = "/chat/threads"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceChatUserThreadResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List messages with a user
     
     - parameter id: (path) The user id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDirectMessages(id id: Int32, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceChatMessageResource?, error: ErrorType?) -> Void)) {
        getDirectMessagesWithRequestBuilder(id: id, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List messages with a user
     - GET /chat/users/{id}/messages
     - <b>Permissions Needed:</b> owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  }, {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  } ],
  "first" : true
}}]
     
     - parameter id: (path) The user id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)

     - returns: RequestBuilder<PageResourceChatMessageResource> 
     */
    public class func getDirectMessagesWithRequestBuilder(id id: Int32, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceChatMessageResource> {
        var path = "/chat/users/{id}/messages"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceChatMessageResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List messages in a thread
     
     - parameter id: (path) The thread id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getThreadMessages(id id: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceChatMessageResource?, error: ErrorType?) -> Void)) {
        getThreadMessagesWithRequestBuilder(id: id, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List messages in a thread
     - GET /chat/threads/{id}/messages
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  }, {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  } ],
  "first" : true
}}]
     
     - parameter id: (path) The thread id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)

     - returns: RequestBuilder<PageResourceChatMessageResource> 
     */
    public class func getThreadMessagesWithRequestBuilder(id id: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceChatMessageResource> {
        var path = "/chat/threads/{id}/messages"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceChatMessageResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List messages in a topic
     
     - parameter id: (path) The topic id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTopicMessages(id id: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceChatMessageResource?, error: ErrorType?) -> Void)) {
        getTopicMessagesWithRequestBuilder(id: id, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List messages in a topic
     - GET /chat/topics/{id}/messages
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  }, {
    "recipient_type" : "user",
    "thread_id" : "thread_id",
    "edited" : false,
    "message_type" : "message_type",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 1,
    "content" : "{}",
    "sender_id" : 6,
    "recipient_id" : "recipient_id"
  } ],
  "first" : true
}}]
     
     - parameter id: (path) The topic id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)

     - returns: RequestBuilder<PageResourceChatMessageResource> 
     */
    public class func getTopicMessagesWithRequestBuilder(id id: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceChatMessageResource> {
        var path = "/chat/topics/{id}/messages"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceChatMessageResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove a user from a blacklist
     
     - parameter blacklistedUserId: (path) The user id to blacklist 
     - parameter id: (path) The user id or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeChatBlacklist(blacklistedUserId blacklistedUserId: Int32, id: String, completion: ((error: ErrorType?) -> Void)) {
        removeChatBlacklistWithRequestBuilder(blacklistedUserId: blacklistedUserId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove a user from a blacklist
     - DELETE /chat/users/{id}/blacklist/{blacklistedUserId}
     - <b>Permissions Needed:</b> CHAT_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter blacklistedUserId: (path) The user id to blacklist 
     - parameter id: (path) The user id or &#39;me&#39; 

     - returns: RequestBuilder<Void> 
     */
    public class func removeChatBlacklistWithRequestBuilder(blacklistedUserId blacklistedUserId: Int32, id: String) -> RequestBuilder<Void> {
        var path = "/chat/users/{id}/blacklist/{blacklistedUserId}"
        path = path.stringByReplacingOccurrencesOfString("{blacklisted_user_id}", withString: "\(blacklistedUserId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send a message
     
     - parameter chatMessageResource: (body) The chat message resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendChatMessage(chatMessageResource chatMessageResource: ChatMessageResource? = nil, completion: ((data: ChatMessageResource?, error: ErrorType?) -> Void)) {
        sendChatMessageWithRequestBuilder(chatMessageResource: chatMessageResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Send a message
     - POST /chat/messages
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "recipient_type" : "user",
  "thread_id" : "thread_id",
  "edited" : false,
  "message_type" : "message_type",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 1,
  "content" : "{}",
  "sender_id" : 6,
  "recipient_id" : "recipient_id"
}}]
     
     - parameter chatMessageResource: (body) The chat message resource (optional)

     - returns: RequestBuilder<ChatMessageResource> 
     */
    public class func sendChatMessageWithRequestBuilder(chatMessageResource chatMessageResource: ChatMessageResource? = nil) -> RequestBuilder<ChatMessageResource> {
        let path = "/chat/messages"
        let URLString = JSAPIAPI.basePath + path
        let parameters = chatMessageResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ChatMessageResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
