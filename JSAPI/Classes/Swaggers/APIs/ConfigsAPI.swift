//
// ConfigsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConfigsAPI: APIBase {
    /**
     Create a new config
     
     - parameter config: (body) The config object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createConfig(config config: Config? = nil, completion: ((data: Config?, error: ErrorType?) -> Void)) {
        createConfigWithRequestBuilder(config: config).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new config
     - POST /configs
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "public_read" : false,
  "name" : "aeiou",
  "value" : "aeiou"
}}]
     
     - parameter config: (body) The config object (optional)

     - returns: RequestBuilder<Config> 
     */
    public class func createConfigWithRequestBuilder(config config: Config? = nil) -> RequestBuilder<Config> {
        let path = "/configs"
        let URLString = JSAPIAPI.basePath + path
        let parameters = config?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Config>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing config
     
     - parameter name: (path) The config name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConfig(name name: String, completion: ((error: ErrorType?) -> Void)) {
        deleteConfigWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing config
     - DELETE /configs/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The config name 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteConfigWithRequestBuilder(name name: String) -> RequestBuilder<Void> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single config
     
     - parameter name: (path) The config name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConfig(name name: String, completion: ((data: Config?, error: ErrorType?) -> Void)) {
        getConfigWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single config
     - GET /configs/{name}
     - Only configs that are public readable will be shown without admin access
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "public_read" : false,
  "name" : "aeiou",
  "value" : "aeiou"
}}]
     
     - parameter name: (path) The config name 

     - returns: RequestBuilder<Config> 
     */
    public class func getConfigWithRequestBuilder(name name: String) -> RequestBuilder<Config> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Config>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search configs
     
     - parameter filterSearch: (query) Filter for configs whose name contains the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConfigs(filterSearch filterSearch: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceConfig?, error: ErrorType?) -> Void)) {
        getConfigsWithRequestBuilder(filterSearch: filterSearch, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search configs
     - GET /configs
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 3,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 2,
  "content" : [ {
    "public_read" : false,
    "name" : "aeiou",
    "value" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter filterSearch: (query) Filter for configs whose name contains the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageResourceConfig> 
     */
    public class func getConfigsWithRequestBuilder(filterSearch filterSearch: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceConfig> {
        let path = "/configs"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_search": filterSearch,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceConfig>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an existing config
     
     - parameter name: (path) The config name 
     - parameter config: (body) The config object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateConfig(name name: String, config: Config? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateConfigWithRequestBuilder(name: name, config: config).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an existing config
     - PUT /configs/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The config name 
     - parameter config: (body) The config object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateConfigWithRequestBuilder(name name: String, config: Config? = nil) -> RequestBuilder<Void> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = config?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
