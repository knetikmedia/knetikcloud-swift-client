//
// DevicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DevicesAPI: APIBase {
    /**
     Create a device
     
     - parameter device: (body) device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createDevice(device device: DeviceResource, completion: ((data: DeviceResource?, error: ErrorType?) -> Void)) {
        createDeviceWithRequestBuilder(device: device).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a device
     - POST /devices
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "aeiou"
  },
  "os" : "aeiou",
  "description" : "aeiou",
  "device_type" : "aeiou",
  "authorization" : "aeiou",
  "condition" : "New",
  "serial" : "aeiou",
  "mac_address" : "aeiou",
  "name" : "aeiou",
  "location" : "aeiou",
  "model" : "aeiou",
  "created_date" : 2,
  "id" : 0,
  "updated_date" : 6,
  "make" : "aeiou",
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 1,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "status" : "Active"
}}]
     
     - parameter device: (body) device 

     - returns: RequestBuilder<DeviceResource> 
     */
    public class func createDeviceWithRequestBuilder(device device: DeviceResource) -> RequestBuilder<DeviceResource> {
        let path = "/devices"
        let URLString = JSAPIAPI.basePath + path
        let parameters = device.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a device
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteDevice(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteDeviceWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a device
     - DELETE /devices/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteDeviceWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/devices/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single device
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDevice(id id: Int32, completion: ((data: DeviceResource?, error: ErrorType?) -> Void)) {
        getDeviceWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single device
     - GET /devices/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "aeiou"
  },
  "os" : "aeiou",
  "description" : "aeiou",
  "device_type" : "aeiou",
  "authorization" : "aeiou",
  "condition" : "New",
  "serial" : "aeiou",
  "mac_address" : "aeiou",
  "name" : "aeiou",
  "location" : "aeiou",
  "model" : "aeiou",
  "created_date" : 9,
  "id" : 2,
  "updated_date" : 6,
  "make" : "aeiou",
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 5,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "status" : "Active"
}}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<DeviceResource> 
     */
    public class func getDeviceWithRequestBuilder(id id: Int32) -> RequestBuilder<DeviceResource> {
        var path = "/devices/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search devices
     
     - parameter filterMake: (query) Filter for devices with specified make (optional)
     - parameter filterModel: (query) Filter for devices with specified model (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDevices(filterMake filterMake: String? = nil, filterModel: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceDeviceResource?, error: ErrorType?) -> Void)) {
        getDevicesWithRequestBuilder(filterMake: filterMake, filterModel: filterModel, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search devices
     - GET /devices
     - Get a list of devices with optional filtering
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 7,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 9,
  "content" : [ {
    "data" : {
      "key" : "aeiou"
    },
    "os" : "aeiou",
    "description" : "aeiou",
    "device_type" : "aeiou",
    "authorization" : "aeiou",
    "condition" : "New",
    "serial" : "aeiou",
    "mac_address" : "aeiou",
    "name" : "aeiou",
    "location" : "aeiou",
    "model" : "aeiou",
    "created_date" : 2,
    "id" : 9,
    "updated_date" : 0,
    "make" : "aeiou",
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 0,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "status" : "Active"
  } ],
  "first" : true
}}]
     
     - parameter filterMake: (query) Filter for devices with specified make (optional)
     - parameter filterModel: (query) Filter for devices with specified model (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceDeviceResource> 
     */
    public class func getDevicesWithRequestBuilder(filterMake filterMake: String? = nil, filterModel: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceDeviceResource> {
        let path = "/devices"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_make": filterMake,
            "filter_model": filterModel,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceDeviceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a device
     
     - parameter device: (body) device 
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateDevice(device device: DeviceResource, id: Int32, completion: ((data: DeviceResource?, error: ErrorType?) -> Void)) {
        updateDeviceWithRequestBuilder(device: device, id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a device
     - PUT /devices/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "aeiou"
  },
  "os" : "aeiou",
  "description" : "aeiou",
  "device_type" : "aeiou",
  "authorization" : "aeiou",
  "condition" : "New",
  "serial" : "aeiou",
  "mac_address" : "aeiou",
  "name" : "aeiou",
  "location" : "aeiou",
  "model" : "aeiou",
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 8,
  "make" : "aeiou",
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 9,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "status" : "Active"
}}]
     
     - parameter device: (body) device 
     - parameter id: (path) id 

     - returns: RequestBuilder<DeviceResource> 
     */
    public class func updateDeviceWithRequestBuilder(device device: DeviceResource, id: Int32) -> RequestBuilder<DeviceResource> {
        var path = "/devices/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = device.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
