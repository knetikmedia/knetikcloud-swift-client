//
// DispositionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DispositionsAPI: APIBase {
    /**
     Add a new disposition
     
     - parameter disposition: (body) The new disposition record (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addDisposition(disposition disposition: DispositionResource? = nil, completion: ((data: DispositionResource?, error: ErrorType?) -> Void)) {
        addDispositionWithRequestBuilder(disposition: disposition).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new disposition
     - POST /dispositions
     - examples: [{contentType=application/json, example={
  "context" : "context",
  "name" : "name",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 1,
    "display_name" : "display_name",
    "username" : "username"
  }
}}]
     
     - parameter disposition: (body) The new disposition record (optional)

     - returns: RequestBuilder<DispositionResource> 
     */
    public class func addDispositionWithRequestBuilder(disposition disposition: DispositionResource? = nil) -> RequestBuilder<DispositionResource> {
        let path = "/dispositions"
        let URLString = JSAPIAPI.basePath + path
        let parameters = disposition?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispositionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a disposition
     
     - parameter id: (path) The id of the disposition record 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteDisposition(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteDispositionWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a disposition
     - DELETE /dispositions/{id}
     
     - parameter id: (path) The id of the disposition record 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteDispositionWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/dispositions/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a disposition
     
     - parameter id: (path) The id of the disposition record 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDisposition(id id: Int64, completion: ((data: DispositionResource?, error: ErrorType?) -> Void)) {
        getDispositionWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a disposition
     - GET /dispositions/{id}
     - examples: [{contentType=application/json, example={
  "context" : "context",
  "name" : "name",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 1,
    "display_name" : "display_name",
    "username" : "username"
  }
}}]
     
     - parameter id: (path) The id of the disposition record 

     - returns: RequestBuilder<DispositionResource> 
     */
    public class func getDispositionWithRequestBuilder(id id: Int64) -> RequestBuilder<DispositionResource> {
        var path = "/dispositions/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispositionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a list of disposition counts
     
     - parameter filterContext: (query) Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)
     - parameter filterOwner: (query) Filter for dispositions from a specific user by id or &#39;me&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispositionCounts(filterContext filterContext: String? = nil, filterOwner: String? = nil, completion: ((data: [DispositionCount]?, error: ErrorType?) -> Void)) {
        getDispositionCountsWithRequestBuilder(filterContext: filterContext, filterOwner: filterOwner).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a list of disposition counts
     - GET /dispositions/count
     - examples: [{contentType=application/json, example=[ {
  "count" : 0,
  "name" : "name"
}, {
  "count" : 0,
  "name" : "name"
} ]}]
     
     - parameter filterContext: (query) Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)
     - parameter filterOwner: (query) Filter for dispositions from a specific user by id or &#39;me&#39; (optional)

     - returns: RequestBuilder<[DispositionCount]> 
     */
    public class func getDispositionCountsWithRequestBuilder(filterContext filterContext: String? = nil, filterOwner: String? = nil) -> RequestBuilder<[DispositionCount]> {
        let path = "/dispositions/count"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_context": filterContext,
            "filter_owner": filterOwner
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DispositionCount]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a page of dispositions
     
     - parameter filterContext: (query) Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)
     - parameter filterOwner: (query) Filter for dispositions from a specific user by id or &#39;me&#39; (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispositions(filterContext filterContext: String? = nil, filterOwner: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceDispositionResource?, error: ErrorType?) -> Void)) {
        getDispositionsWithRequestBuilder(filterContext: filterContext, filterOwner: filterOwner, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of dispositions
     - GET /dispositions
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "context" : "context",
    "name" : "name",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 1,
      "display_name" : "display_name",
      "username" : "username"
    }
  }, {
    "context" : "context",
    "name" : "name",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 1,
      "display_name" : "display_name",
      "username" : "username"
    }
  } ],
  "first" : true
}}]
     
     - parameter filterContext: (query) Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)
     - parameter filterOwner: (query) Filter for dispositions from a specific user by id or &#39;me&#39; (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceDispositionResource> 
     */
    public class func getDispositionsWithRequestBuilder(filterContext filterContext: String? = nil, filterOwner: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceDispositionResource> {
        let path = "/dispositions"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_context": filterContext,
            "filter_owner": filterOwner,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceDispositionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
