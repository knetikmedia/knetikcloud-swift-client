//
// GamificationLevelingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GamificationLevelingAPI: APIBase {
    /**
     Create a level schema
     
     - parameter level: (body) The level schema definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createLevel(level level: LevelingResource? = nil, completion: ((data: LevelingResource?, error: ErrorType?) -> Void)) {
        createLevelWithRequestBuilder(level: level).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a level schema
     - POST /leveling
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tiers" : [ {
    "name" : "aeiou",
    "additional_properties" : {
      "key" : ""
    },
    "required_progress" : 5,
    "trigger_event_name" : "aeiou"
  } ],
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 2,
  "updated_date" : 9
}}]
     
     - parameter level: (body) The level schema definition (optional)

     - returns: RequestBuilder<LevelingResource> 
     */
    public class func createLevelWithRequestBuilder(level level: LevelingResource? = nil) -> RequestBuilder<LevelingResource> {
        let path = "/leveling"
        let URLString = JSAPIAPI.basePath + path
        let parameters = level?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a level
     
     - parameter name: (path) The level schema name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLevel(name name: String, completion: ((error: ErrorType?) -> Void)) {
        deleteLevelWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a level
     - DELETE /leveling/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The level schema name 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLevelWithRequestBuilder(name name: String) -> RequestBuilder<Void> {
        var path = "/leveling/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Retrieve a level
     
     - parameter name: (path) The level schema name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLevel(name name: String, completion: ((data: LevelingResource?, error: ErrorType?) -> Void)) {
        getLevelWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieve a level
     - GET /leveling/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tiers" : [ {
    "name" : "aeiou",
    "additional_properties" : {
      "key" : ""
    },
    "required_progress" : 9,
    "trigger_event_name" : "aeiou"
  } ],
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 3,
  "updated_date" : 8
}}]
     
     - parameter name: (path) The level schema name 

     - returns: RequestBuilder<LevelingResource> 
     */
    public class func getLevelWithRequestBuilder(name name: String) -> RequestBuilder<LevelingResource> {
        var path = "/leveling/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the list of triggers that can be used to trigger a leveling progress update
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLevelTriggers(completion: ((data: [BreTriggerResource]?, error: ErrorType?) -> Void)) {
        getLevelTriggersWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of triggers that can be used to trigger a leveling progress update
     - GET /leveling/triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "trigger_name" : "aeiou",
  "system_trigger" : false,
  "event_name" : "aeiou",
  "category" : "achievement",
  "parameters" : [ {
    "name" : "aeiou",
    "type" : "aeiou"
  } ],
  "trigger_description" : "aeiou"
} ]}]

     - returns: RequestBuilder<[BreTriggerResource]> 
     */
    public class func getLevelTriggersWithRequestBuilder() -> RequestBuilder<[BreTriggerResource]> {
        let path = "/leveling/triggers"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BreTriggerResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search levels
     
     - parameter filterName: (query) Filter for level schemas whose name contains a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLevels(filterName filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceLevelingResource?, error: ErrorType?) -> Void)) {
        getLevelsWithRequestBuilder(filterName: filterName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search levels
     - GET /leveling
     - Get a list of levels schemas with optional filtering
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 9,
  "last" : true,
  "size" : 4,
  "total_elements" : 8,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 0,
  "number_of_elements" : 8,
  "content" : [ {
    "tiers" : [ {
      "name" : "aeiou",
      "additional_properties" : {
        "key" : ""
      },
      "required_progress" : 8,
      "trigger_event_name" : "aeiou"
    } ],
    "name" : "aeiou",
    "description" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 3,
    "updated_date" : 8
  } ],
  "first" : true
}}]
     
     - parameter filterName: (query) Filter for level schemas whose name contains a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceLevelingResource> 
     */
    public class func getLevelsWithRequestBuilder(filterName filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceLevelingResource> {
        let path = "/leveling"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_name": filterName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceLevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a user's progress for a given level schema
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserLevel(userId userId: Int32, name: String, completion: ((data: UserLevelingResource?, error: ErrorType?) -> Void)) {
        getUserLevelWithRequestBuilder(userId: userId, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user's progress for a given level schema
     - GET /users/{userId}/leveling/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "last_tier_name" : "aeiou",
  "level_name" : "aeiou",
  "next_tier_name" : "aeiou",
  "tier_names" : [ "aeiou" ],
  "user_id" : 3,
  "progress" : 4,
  "last_tier_progress" : 5,
  "next_tier_progress" : 1
}}]
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 

     - returns: RequestBuilder<UserLevelingResource> 
     */
    public class func getUserLevelWithRequestBuilder(userId userId: Int32, name: String) -> RequestBuilder<UserLevelingResource> {
        var path = "/users/{userId}/leveling/{name}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserLevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a user's progress for all level schemas
     
     - parameter userId: (path) The id of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserLevels(userId userId: Int32, completion: ((data: PageResourceUserLevelingResource?, error: ErrorType?) -> Void)) {
        getUserLevelsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user's progress for all level schemas
     - GET /users/{userId}/leveling
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 0,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 2,
  "content" : [ {
    "last_tier_name" : "aeiou",
    "level_name" : "aeiou",
    "next_tier_name" : "aeiou",
    "tier_names" : [ "aeiou" ],
    "user_id" : 0,
    "progress" : 9,
    "last_tier_progress" : 6,
    "next_tier_progress" : 6
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The id of the user 

     - returns: RequestBuilder<PageResourceUserLevelingResource> 
     */
    public class func getUserLevelsWithRequestBuilder(userId userId: Int32) -> RequestBuilder<PageResourceUserLevelingResource> {
        var path = "/users/{userId}/leveling"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceUserLevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update or create a leveling progress record for a user
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 
     - parameter progress: (body) The amount of progress to add (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func incrementProgress(userId userId: Int32, name: String, progress: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        incrementProgressWithRequestBuilder(userId: userId, name: name, progress: progress).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update or create a leveling progress record for a user
     - POST /users/{userId}/leveling/{name}/progress
     - If no progress record yet exists for the user, it will be created. Otherwise the provided value will be added to it. May be negative. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 
     - parameter progress: (body) The amount of progress to add (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func incrementProgressWithRequestBuilder(userId userId: Int32, name: String, progress: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/leveling/{name}/progress"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = progress?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set leveling progress for a user
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 
     - parameter progress: (body) The new progress amount (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setProgress(userId userId: Int32, name: String, progress: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        setProgressWithRequestBuilder(userId: userId, name: name, progress: progress).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set leveling progress for a user
     - PUT /users/{userId}/leveling/{name}/progress
     - If no progress record yet exists for the user, it will be created. Otherwise it will be updated to the provided value. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter name: (path) The level schema name 
     - parameter progress: (body) The new progress amount (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func setProgressWithRequestBuilder(userId userId: Int32, name: String, progress: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/leveling/{name}/progress"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = progress?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a level
     
     - parameter name: (path) The level schema name 
     - parameter newLevel: (body) The level schema definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateLevel(name name: String, newLevel: LevelingResource? = nil, completion: ((data: LevelingResource?, error: ErrorType?) -> Void)) {
        updateLevelWithRequestBuilder(name: name, newLevel: newLevel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a level
     - PUT /leveling/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tiers" : [ {
    "name" : "aeiou",
    "additional_properties" : {
      "key" : ""
    },
    "required_progress" : 2,
    "trigger_event_name" : "aeiou"
  } ],
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 3,
  "updated_date" : 8
}}]
     
     - parameter name: (path) The level schema name 
     - parameter newLevel: (body) The level schema definition (optional)

     - returns: RequestBuilder<LevelingResource> 
     */
    public class func updateLevelWithRequestBuilder(name name: String, newLevel: LevelingResource? = nil) -> RequestBuilder<LevelingResource> {
        var path = "/leveling/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = newLevel?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LevelingResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
