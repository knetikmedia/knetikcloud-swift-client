//
// MediaVideosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MediaVideosAPI: APIBase {
    /**
     Adds a user to a video's whitelist
     
     - parameter id: (path) The video id 
     - parameter userId: (body) The user id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addUserToVideoWhitelist(id id: Int64, userId: IntWrapper? = nil, completion: ((error: ErrorType?) -> Void)) {
        addUserToVideoWhitelistWithRequestBuilder(id: id, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Adds a user to a video's whitelist
     - POST /media/videos/{id}/whitelist
     - Whitelisted users can view video regardless of privacy setting. <br><br><b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The video id 
     - parameter userId: (body) The user id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addUserToVideoWhitelistWithRequestBuilder(id id: Int64, userId: IntWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}/whitelist"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = userId?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds a new video in the system
     
     - parameter videoResource: (body) The video object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideo(videoResource videoResource: VideoResource? = nil, completion: ((data: VideoResource?, error: ErrorType?) -> Void)) {
        addVideoWithRequestBuilder(videoResource: videoResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds a new video in the system
     - POST /media/videos
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "authored" : 0,
  "template" : "template",
  "short_description" : "short_description",
  "extension" : "extension",
  "privacy" : "private",
  "uploader" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "banned" : false,
  "embed" : "embed",
  "id" : 5,
  "views" : 3,
  "height" : 1,
  "thumbnail" : "thumbnail",
  "comments" : [ {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  }, {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  } ],
  "author" : {
    "name" : "name",
    "id" : 6
  },
  "length" : 5,
  "active" : false,
  "long_description" : "long_description",
  "published" : false,
  "priority" : 2,
  "tags" : [ "tags", "tags" ],
  "size" : 7,
  "mime_type" : "mime_type",
  "name" : "name",
  "width" : 2,
  "location" : "location",
  "contributors" : [ {
    "role" : "role",
    "artist" : {
      "name" : "name",
      "id" : 6
    },
    "media" : {
      "name" : "name",
      "id" : 6
    }
  }, {
    "role" : "role",
    "artist" : {
      "name" : "name",
      "id" : 6
    },
    "media" : {
      "name" : "name",
      "id" : 6
    }
  } ],
  "created_date" : 6,
  "updated_date" : 9,
  "category" : {
    "name" : "name",
    "id" : "id"
  }
}}]
     
     - parameter videoResource: (body) The video object (optional)

     - returns: RequestBuilder<VideoResource> 
     */
    public class func addVideoWithRequestBuilder(videoResource videoResource: VideoResource? = nil) -> RequestBuilder<VideoResource> {
        let path = "/media/videos"
        let URLString = JSAPIAPI.basePath + path
        let parameters = videoResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new video comment
     
     - parameter videoId: (path) The video id  
     - parameter commentResource: (body) The comment object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideoComment(videoId videoId: Int32, commentResource: CommentResource? = nil, completion: ((data: CommentResource?, error: ErrorType?) -> Void)) {
        addVideoCommentWithRequestBuilder(videoId: videoId, commentResource: commentResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new video comment
     - POST /media/videos/{videoId}/comments
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "context" : "context",
  "context_id" : 0,
  "created_date" : 6,
  "id" : 1,
  "updated_date" : 5,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "content" : "content"
}}]
     
     - parameter videoId: (path) The video id  
     - parameter commentResource: (body) The comment object (optional)

     - returns: RequestBuilder<CommentResource> 
     */
    public class func addVideoCommentWithRequestBuilder(videoId videoId: Int32, commentResource: CommentResource? = nil) -> RequestBuilder<CommentResource> {
        var path = "/media/videos/{videoId}/comments"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = commentResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds a contributor to a video
     
     - parameter videoId: (path) The video id 
     - parameter contributionResource: (body) The contribution object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideoContributor(videoId videoId: Int64, contributionResource: ContributionResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        addVideoContributorWithRequestBuilder(videoId: videoId, contributionResource: contributionResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Adds a contributor to a video
     - POST /media/videos/{videoId}/contributors
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter contributionResource: (body) The contribution object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addVideoContributorWithRequestBuilder(videoId videoId: Int64, contributionResource: ContributionResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/contributors"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = contributionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new flag
     
     - parameter videoId: (path) The video id 
     - parameter reason: (body) The flag reason (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideoFlag(videoId videoId: Int64, reason: StringWrapper? = nil, completion: ((data: FlagResource?, error: ErrorType?) -> Void)) {
        addVideoFlagWithRequestBuilder(videoId: videoId, reason: reason).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new flag
     - POST /media/videos/{videoId}/moderation
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "reason" : "reason",
  "context" : "context",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "updated_date" : 1,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  }
}}]
     
     - parameter videoId: (path) The video id 
     - parameter reason: (body) The flag reason (optional)

     - returns: RequestBuilder<FlagResource> 
     */
    public class func addVideoFlagWithRequestBuilder(videoId videoId: Int64, reason: StringWrapper? = nil) -> RequestBuilder<FlagResource> {
        var path = "/media/videos/{videoId}/moderation"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = reason?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlagResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds one or more existing videos as related to this one
     
     - parameter videoId: (path) The video id 
     - parameter videoRelationshipResource: (body) The video relationship object  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideoRelationships(videoId videoId: Int64, videoRelationshipResource: VideoRelationshipResource? = nil, completion: ((data: VideoRelationshipResource?, error: ErrorType?) -> Void)) {
        addVideoRelationshipsWithRequestBuilder(videoId: videoId, videoRelationshipResource: videoRelationshipResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds one or more existing videos as related to this one
     - POST /media/videos/{videoId}/related
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "relationship_details" : "relationship_details",
  "from" : {
    "name" : "name",
    "id" : 6
  },
  "id" : 0,
  "to" : {
    "name" : "name",
    "id" : 6
  }
}}]
     
     - parameter videoId: (path) The video id 
     - parameter videoRelationshipResource: (body) The video relationship object  (optional)

     - returns: RequestBuilder<VideoRelationshipResource> 
     */
    public class func addVideoRelationshipsWithRequestBuilder(videoId videoId: Int64, videoRelationshipResource: VideoRelationshipResource? = nil) -> RequestBuilder<VideoRelationshipResource> {
        var path = "/media/videos/{videoId}/related"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = videoRelationshipResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a video disposition
     
     - parameter videoId: (path) The video id 
     - parameter dispositionResource: (body) The disposition object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createVideoDisposition(videoId videoId: Int32, dispositionResource: DispositionResource? = nil, completion: ((data: DispositionResource?, error: ErrorType?) -> Void)) {
        createVideoDispositionWithRequestBuilder(videoId: videoId, dispositionResource: dispositionResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a video disposition
     - POST /media/videos/{videoId}/dispositions
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "context" : "context",
  "name" : "name",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  }
}}]
     
     - parameter videoId: (path) The video id 
     - parameter dispositionResource: (body) The disposition object (optional)

     - returns: RequestBuilder<DispositionResource> 
     */
    public class func createVideoDispositionWithRequestBuilder(videoId videoId: Int32, dispositionResource: DispositionResource? = nil) -> RequestBuilder<DispositionResource> {
        var path = "/media/videos/{videoId}/dispositions"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = dispositionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispositionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a video template
     
     - parameter videoTemplateResource: (body) The video template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createVideoTemplate(videoTemplateResource videoTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        createVideoTemplateWithRequestBuilder(videoTemplateResource: videoTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a video template
     - POST /media/videos/templates
     - Video Templates define a type of video and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter videoTemplateResource: (body) The video template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func createVideoTemplateWithRequestBuilder(videoTemplateResource videoTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/media/videos/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters = videoTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deletes a video from the system if no resources are attached to it
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideo(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Deletes a video from the system if no resources are attached to it
     - DELETE /media/videos/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video comment
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoComment(videoId videoId: Int64, id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoCommentWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video comment
     - DELETE /media/videos/{videoId}/comments/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoCommentWithRequestBuilder(videoId videoId: Int64, id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/comments/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video disposition
     
     - parameter dispositionId: (path) The disposition id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoDisposition(dispositionId dispositionId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoDispositionWithRequestBuilder(dispositionId: dispositionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video disposition
     - DELETE /media/videos/{videoId}/dispositions/{dispositionId}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter dispositionId: (path) The disposition id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoDispositionWithRequestBuilder(dispositionId dispositionId: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/dispositions/{dispositionId}"
        path = path.stringByReplacingOccurrencesOfString("{disposition_id}", withString: "\(dispositionId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a flag
     
     - parameter videoId: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoFlag(videoId videoId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoFlagWithRequestBuilder(videoId: videoId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a flag
     - DELETE /media/videos/{videoId}/moderation
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoFlagWithRequestBuilder(videoId videoId: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/moderation"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video's relationship
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The relationship id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoRelationship(videoId videoId: Int64, id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoRelationshipWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video's relationship
     - DELETE /media/videos/{videoId}/related/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The relationship id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoRelationshipWithRequestBuilder(videoId videoId: Int64, id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/related/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video template
     - DELETE /media/videos/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get user videos
     
     - parameter userId: (path) The user id 
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserVideos(userId userId: Int32, excludeFlagged: Bool? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceVideoResource?, error: ErrorType?) -> Void)) {
        getUserVideosWithRequestBuilder(userId: userId, excludeFlagged: excludeFlagged, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user videos
     - GET /users/{userId}/videos
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 1,
  "total_elements" : 1,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 1,
  "number_of_elements" : 7,
  "content" : [ {
    "authored" : 0,
    "template" : "template",
    "short_description" : "short_description",
    "extension" : "extension",
    "privacy" : "private",
    "uploader" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "additional_properties" : {
      "key" : {
        "type" : "type"
      }
    },
    "banned" : false,
    "embed" : "embed",
    "id" : 5,
    "views" : 3,
    "height" : 1,
    "thumbnail" : "thumbnail",
    "comments" : [ {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    }, {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    } ],
    "author" : {
      "name" : "name",
      "id" : 6
    },
    "length" : 5,
    "active" : false,
    "long_description" : "long_description",
    "published" : false,
    "priority" : 2,
    "tags" : [ "tags", "tags" ],
    "size" : 7,
    "mime_type" : "mime_type",
    "name" : "name",
    "width" : 2,
    "location" : "location",
    "contributors" : [ {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    }, {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    } ],
    "created_date" : 6,
    "updated_date" : 9,
    "category" : {
      "name" : "name",
      "id" : "id"
    }
  }, {
    "authored" : 0,
    "template" : "template",
    "short_description" : "short_description",
    "extension" : "extension",
    "privacy" : "private",
    "uploader" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "additional_properties" : {
      "key" : {
        "type" : "type"
      }
    },
    "banned" : false,
    "embed" : "embed",
    "id" : 5,
    "views" : 3,
    "height" : 1,
    "thumbnail" : "thumbnail",
    "comments" : [ {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    }, {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    } ],
    "author" : {
      "name" : "name",
      "id" : 6
    },
    "length" : 5,
    "active" : false,
    "long_description" : "long_description",
    "published" : false,
    "priority" : 2,
    "tags" : [ "tags", "tags" ],
    "size" : 7,
    "mime_type" : "mime_type",
    "name" : "name",
    "width" : 2,
    "location" : "location",
    "contributors" : [ {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    }, {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    } ],
    "created_date" : 6,
    "updated_date" : 9,
    "category" : {
      "name" : "name",
      "id" : "id"
    }
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The user id 
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceVideoResource> 
     */
    public class func getUserVideosWithRequestBuilder(userId userId: Int32, excludeFlagged: Bool? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceVideoResource> {
        var path = "/users/{userId}/videos"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "exclude_flagged": excludeFlagged,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceVideoResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Loads a specific video details
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideo(id id: Int64, completion: ((data: VideoResource?, error: ErrorType?) -> Void)) {
        getVideoWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Loads a specific video details
     - GET /media/videos/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "authored" : 0,
  "template" : "template",
  "short_description" : "short_description",
  "extension" : "extension",
  "privacy" : "private",
  "uploader" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "banned" : false,
  "embed" : "embed",
  "id" : 5,
  "views" : 3,
  "height" : 1,
  "thumbnail" : "thumbnail",
  "comments" : [ {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  }, {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  } ],
  "author" : {
    "name" : "name",
    "id" : 6
  },
  "length" : 5,
  "active" : false,
  "long_description" : "long_description",
  "published" : false,
  "priority" : 2,
  "tags" : [ "tags", "tags" ],
  "size" : 7,
  "mime_type" : "mime_type",
  "name" : "name",
  "width" : 2,
  "location" : "location",
  "contributors" : [ {
    "role" : "role",
    "artist" : {
      "name" : "name",
      "id" : 6
    },
    "media" : {
      "name" : "name",
      "id" : 6
    }
  }, {
    "role" : "role",
    "artist" : {
      "name" : "name",
      "id" : 6
    },
    "media" : {
      "name" : "name",
      "id" : 6
    }
  } ],
  "created_date" : 6,
  "updated_date" : 9,
  "category" : {
    "name" : "name",
    "id" : "id"
  }
}}]
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<VideoResource> 
     */
    public class func getVideoWithRequestBuilder(id id: Int64) -> RequestBuilder<VideoResource> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a page of comments for a video
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoComments(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceCommentResource?, error: ErrorType?) -> Void)) {
        getVideoCommentsWithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of comments for a video
     - GET /media/videos/{videoId}/comments
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 7,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 2,
  "content" : [ {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  }, {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceCommentResource> 
     */
    public class func getVideoCommentsWithRequestBuilder(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceCommentResource> {
        var path = "/media/videos/{videoId}/comments"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceCommentResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a page of dispositions for a video
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoDispositions(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceDispositionResource?, error: ErrorType?) -> Void)) {
        getVideoDispositionsWithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of dispositions for a video
     - GET /media/videos/{videoId}/dispositions
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "context" : "context",
    "name" : "name",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    }
  }, {
    "context" : "context",
    "name" : "name",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    }
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceDispositionResource> 
     */
    public class func getVideoDispositionsWithRequestBuilder(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceDispositionResource> {
        var path = "/media/videos/{videoId}/dispositions"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceDispositionResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a page of video relationships
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoRelationships(videoId videoId: Int64, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceVideoRelationshipResource?, error: ErrorType?) -> Void)) {
        getVideoRelationshipsWithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of video relationships
     - GET /media/videos/{videoId}/related
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 5,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 1,
  "content" : [ {
    "relationship_details" : "relationship_details",
    "from" : {
      "name" : "name",
      "id" : 6
    },
    "id" : 0,
    "to" : {
      "name" : "name",
      "id" : 6
    }
  }, {
    "relationship_details" : "relationship_details",
    "from" : {
      "name" : "name",
      "id" : 6
    },
    "id" : 0,
    "to" : {
      "name" : "name",
      "id" : 6
    }
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceVideoRelationshipResource> 
     */
    public class func getVideoRelationshipsWithRequestBuilder(videoId videoId: Int64, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceVideoRelationshipResource> {
        var path = "/media/videos/{videoId}/related"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceVideoRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single video template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoTemplate(id id: String, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        getVideoTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single video template
     - GET /media/videos/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func getVideoTemplateWithRequestBuilder(id id: String) -> RequestBuilder<TemplateResource> {
        var path = "/media/videos/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search video templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceTemplateResource?, error: ErrorType?) -> Void)) {
        getVideoTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search video templates
     - GET /media/videos/templates
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  }, {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    public class func getVideoTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/media/videos/templates"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search videos using the documented filters
     
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter filterVideosByUploader: (query) Filter for videos by uploader id (optional)
     - parameter filterCategory: (query) Filter for videos from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for videos with specified tags (separated by comma) (optional)
     - parameter filterVideosByName: (query) Filter for videos which name *STARTS* with the given string (optional)
     - parameter filterVideosByContributor: (query) Filter for videos with contribution from the artist specified by ID (optional)
     - parameter filterVideosByAuthor: (query) Filter for videos with an artist as author specified by ID (optional)
     - parameter filterHasAuthor: (query) Filter for videos that have an author set if true, or that have no author if false (optional)
     - parameter filterHasUploader: (query) Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     - parameter filterRelatedTo: (query) Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     - parameter filterFriends: (query) Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     - parameter filterDisposition: (query) Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideos(excludeFlagged excludeFlagged: Bool? = nil, filterVideosByUploader: Int32? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterVideosByName: String? = nil, filterVideosByContributor: Int32? = nil, filterVideosByAuthor: Int32? = nil, filterHasAuthor: Bool? = nil, filterHasUploader: Bool? = nil, filterRelatedTo: String? = nil, filterFriends: Bool? = nil, filterDisposition: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceVideoResource?, error: ErrorType?) -> Void)) {
        getVideosWithRequestBuilder(excludeFlagged: excludeFlagged, filterVideosByUploader: filterVideosByUploader, filterCategory: filterCategory, filterTagset: filterTagset, filterVideosByName: filterVideosByName, filterVideosByContributor: filterVideosByContributor, filterVideosByAuthor: filterVideosByAuthor, filterHasAuthor: filterHasAuthor, filterHasUploader: filterHasUploader, filterRelatedTo: filterRelatedTo, filterFriends: filterFriends, filterDisposition: filterDisposition, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search videos using the documented filters
     - GET /media/videos
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 1,
  "total_elements" : 1,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 1,
  "number_of_elements" : 7,
  "content" : [ {
    "authored" : 0,
    "template" : "template",
    "short_description" : "short_description",
    "extension" : "extension",
    "privacy" : "private",
    "uploader" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "additional_properties" : {
      "key" : {
        "type" : "type"
      }
    },
    "banned" : false,
    "embed" : "embed",
    "id" : 5,
    "views" : 3,
    "height" : 1,
    "thumbnail" : "thumbnail",
    "comments" : [ {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    }, {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    } ],
    "author" : {
      "name" : "name",
      "id" : 6
    },
    "length" : 5,
    "active" : false,
    "long_description" : "long_description",
    "published" : false,
    "priority" : 2,
    "tags" : [ "tags", "tags" ],
    "size" : 7,
    "mime_type" : "mime_type",
    "name" : "name",
    "width" : 2,
    "location" : "location",
    "contributors" : [ {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    }, {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    } ],
    "created_date" : 6,
    "updated_date" : 9,
    "category" : {
      "name" : "name",
      "id" : "id"
    }
  }, {
    "authored" : 0,
    "template" : "template",
    "short_description" : "short_description",
    "extension" : "extension",
    "privacy" : "private",
    "uploader" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "additional_properties" : {
      "key" : {
        "type" : "type"
      }
    },
    "banned" : false,
    "embed" : "embed",
    "id" : 5,
    "views" : 3,
    "height" : 1,
    "thumbnail" : "thumbnail",
    "comments" : [ {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    }, {
      "summary" : "summary",
      "context" : "context",
      "context_id" : 0,
      "created_date" : 6,
      "id" : 1,
      "updated_date" : 5,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "content" : "content"
    } ],
    "author" : {
      "name" : "name",
      "id" : 6
    },
    "length" : 5,
    "active" : false,
    "long_description" : "long_description",
    "published" : false,
    "priority" : 2,
    "tags" : [ "tags", "tags" ],
    "size" : 7,
    "mime_type" : "mime_type",
    "name" : "name",
    "width" : 2,
    "location" : "location",
    "contributors" : [ {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    }, {
      "role" : "role",
      "artist" : {
        "name" : "name",
        "id" : 6
      },
      "media" : {
        "name" : "name",
        "id" : 6
      }
    } ],
    "created_date" : 6,
    "updated_date" : 9,
    "category" : {
      "name" : "name",
      "id" : "id"
    }
  } ],
  "first" : true
}}]
     
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter filterVideosByUploader: (query) Filter for videos by uploader id (optional)
     - parameter filterCategory: (query) Filter for videos from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for videos with specified tags (separated by comma) (optional)
     - parameter filterVideosByName: (query) Filter for videos which name *STARTS* with the given string (optional)
     - parameter filterVideosByContributor: (query) Filter for videos with contribution from the artist specified by ID (optional)
     - parameter filterVideosByAuthor: (query) Filter for videos with an artist as author specified by ID (optional)
     - parameter filterHasAuthor: (query) Filter for videos that have an author set if true, or that have no author if false (optional)
     - parameter filterHasUploader: (query) Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     - parameter filterRelatedTo: (query) Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     - parameter filterFriends: (query) Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     - parameter filterDisposition: (query) Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)

     - returns: RequestBuilder<PageResourceVideoResource> 
     */
    public class func getVideosWithRequestBuilder(excludeFlagged excludeFlagged: Bool? = nil, filterVideosByUploader: Int32? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterVideosByName: String? = nil, filterVideosByContributor: Int32? = nil, filterVideosByAuthor: Int32? = nil, filterHasAuthor: Bool? = nil, filterHasUploader: Bool? = nil, filterRelatedTo: String? = nil, filterFriends: Bool? = nil, filterDisposition: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceVideoResource> {
        let path = "/media/videos"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "exclude_flagged": excludeFlagged,
            "filter_videos_by_uploader": filterVideosByUploader?.encodeToJSON(),
            "filter_category": filterCategory,
            "filter_tagset": filterTagset,
            "filter_videos_by_name": filterVideosByName,
            "filter_videos_by_contributor": filterVideosByContributor?.encodeToJSON(),
            "filter_videos_by_author": filterVideosByAuthor?.encodeToJSON(),
            "filter_has_author": filterHasAuthor,
            "filter_has_uploader": filterHasUploader,
            "filter_related_to": filterRelatedTo,
            "filter_friends": filterFriends,
            "filter_disposition": filterDisposition,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceVideoResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Removes a user from a video's whitelist
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeUserFromVideoWhitelist(videoId videoId: Int64, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeUserFromVideoWhitelistWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a user from a video's whitelist
     - DELETE /media/videos/{videoId}/whitelist/{id}
     - Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting. <br><br><b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The user id 

     - returns: RequestBuilder<Void> 
     */
    public class func removeUserFromVideoWhitelistWithRequestBuilder(videoId videoId: Int64, id: Int32) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/whitelist/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a contributor from a video
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The contributor id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeVideoContributor(videoId videoId: Int64, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeVideoContributorWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a contributor from a video
     - DELETE /media/videos/{videoId}/contributors/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The contributor id 

     - returns: RequestBuilder<Void> 
     */
    public class func removeVideoContributorWithRequestBuilder(videoId videoId: Int64, id: Int32) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/contributors/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Modifies a video's details
     
     - parameter id: (path) The video id 
     - parameter videoResource: (body) The video object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVideo(id id: Int64, videoResource: VideoResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateVideoWithRequestBuilder(id: id, videoResource: videoResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Modifies a video's details
     - PUT /media/videos/{id}
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The video id 
     - parameter videoResource: (body) The video object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateVideoWithRequestBuilder(id id: Int64, videoResource: VideoResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = videoResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a video comment
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVideoComment(videoId videoId: Int64, id: Int64, content: StringWrapper? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateVideoCommentWithRequestBuilder(videoId: videoId, id: id, content: content).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a video comment
     - PUT /media/videos/{videoId}/comments/{id}/content
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateVideoCommentWithRequestBuilder(videoId videoId: Int64, id: Int64, content: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/comments/{id}/content"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = content?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a video's relationship details
     
     - parameter videoId: (path) The video id 
     - parameter relationshipId: (path) The relationship id 
     - parameter details: (body) The video relationship details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVideoRelationship(videoId videoId: Int64, relationshipId: Int64, details: StringWrapper? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateVideoRelationshipWithRequestBuilder(videoId: videoId, relationshipId: relationshipId, details: details).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a video's relationship details
     - PUT /media/videos/{videoId}/related/{id}/relationship_details
     - <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter videoId: (path) The video id 
     - parameter relationshipId: (path) The relationship id 
     - parameter details: (body) The video relationship details (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateVideoRelationshipWithRequestBuilder(videoId videoId: Int64, relationshipId: Int64, details: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/related/{id}/relationship_details"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{relationship_id}", withString: "\(relationshipId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = details?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a video template
     
     - parameter id: (path) The id of the template 
     - parameter videoTemplateResource: (body) The video template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVideoTemplate(id id: String, videoTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        updateVideoTemplateWithRequestBuilder(id: id, videoTemplateResource: videoTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a video template
     - PUT /media/videos/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter videoTemplateResource: (body) The video template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func updateVideoTemplateWithRequestBuilder(id id: String, videoTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/media/videos/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = videoTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Increment a video's view count
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func viewVideo(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        viewVideoWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Increment a video's view count
     - POST /media/videos/{id}/views
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func viewVideoWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}/views"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
