//
// PaymentsPayPalClassicAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PaymentsPayPalClassicAPI: APIBase {
    /**
     Create a PayPal Classic billing agreement for the user
     
     - parameter request: (body) The request to create a PayPal billing agreement (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createPayPalBillingAgreementUrl(request request: CreateBillingAgreementRequest? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        createPayPalBillingAgreementUrlWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a PayPal Classic billing agreement for the user
     - POST /payment/provider/paypal/classic/agreements/start
     - Returns the token that should be used to forward the user to PayPal so they can accept the agreement.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter request: (body) The request to create a PayPal billing agreement (optional)

     - returns: RequestBuilder<String> 
     */
    public class func createPayPalBillingAgreementUrlWithRequestBuilder(request request: CreateBillingAgreementRequest? = nil) -> RequestBuilder<String> {
        let path = "/payment/provider/paypal/classic/agreements/start"
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a payment token for PayPal express checkout
     
     - parameter request: (body) The request to create a PayPal payment token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createPayPalExpressCheckout(request request: CreatePayPalPaymentRequest? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        createPayPalExpressCheckoutWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a payment token for PayPal express checkout
     - POST /payment/provider/paypal/classic/checkout/start
     - Returns the token that should be used to forward the user to PayPal so they can complete the checkout.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter request: (body) The request to create a PayPal payment token (optional)

     - returns: RequestBuilder<String> 
     */
    public class func createPayPalExpressCheckoutWithRequestBuilder(request request: CreatePayPalPaymentRequest? = nil) -> RequestBuilder<String> {
        let path = "/payment/provider/paypal/classic/checkout/start"
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Finalizes a billing agreement after the user has accepted through PayPal
     
     - parameter request: (body) The request to finalize a PayPal billing agreement (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func finalizePayPalBillingAgreement(request request: FinalizeBillingAgreementRequest? = nil, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        finalizePayPalBillingAgreementWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Finalizes a billing agreement after the user has accepted through PayPal
     - POST /payment/provider/paypal/classic/agreements/finish
     - Returns the ID of the new payment method created for the user for the billing agreement.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=6}]
     
     - parameter request: (body) The request to finalize a PayPal billing agreement (optional)

     - returns: RequestBuilder<Int32> 
     */
    public class func finalizePayPalBillingAgreementWithRequestBuilder(request request: FinalizeBillingAgreementRequest? = nil) -> RequestBuilder<Int32> {
        let path = "/payment/provider/paypal/classic/agreements/finish"
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Finalizes a payment after the user has completed checkout with PayPal
     
     - parameter request: (body) The request to finalize the payment (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func finalizePayPalCheckout(request request: FinalizePayPalPaymentRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        finalizePayPalCheckoutWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Finalizes a payment after the user has completed checkout with PayPal
     - POST /payment/provider/paypal/classic/checkout/finish
     - The invoice will be marked paid/failed by asynchronous IPN callback.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter request: (body) The request to finalize the payment (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func finalizePayPalCheckoutWithRequestBuilder(request request: FinalizePayPalPaymentRequest? = nil) -> RequestBuilder<Void> {
        let path = "/payment/provider/paypal/classic/checkout/finish"
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
