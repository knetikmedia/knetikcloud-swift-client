//
// ReportingOrdersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ReportingOrdersAPI: APIBase {
    /**
     * enum for parameter granularity
     */
    public enum Granularity_getInvoiceReports: String { 
        case Millisecond = "millisecond"
        case Second = "second"
        case Minute = "minute"
        case Hour = "hour"
        case Day = "day"
        case Week = "week"
        case Month = "month"
        case Year = "year"
    }

    /**
     Retrieve invoice counts aggregated by time ranges
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter granularity: (query) The time duration to aggregate by (optional, default to day)
     - parameter filterPaymentStatus: (query) A payment status to filter results by, can be a comma separated list (optional)
     - parameter filterFulfillmentStatus: (query) An invoice fulfillment status to filter results by, can be a comma separated list (optional)
     - parameter startDate: (query) The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInvoiceReports(currencyCode currencyCode: String, granularity: Granularity_getInvoiceReports? = nil, filterPaymentStatus: String? = nil, filterFulfillmentStatus: String? = nil, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceAggregateInvoiceReportResource?, error: ErrorType?) -> Void)) {
        getInvoiceReportsWithRequestBuilder(currencyCode: currencyCode, granularity: granularity, filterPaymentStatus: filterPaymentStatus, filterFulfillmentStatus: filterFulfillmentStatus, startDate: startDate, endDate: endDate, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieve invoice counts aggregated by time ranges
     - GET /reporting/orders/count/{currencyCode}
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 5,
  "content" : [ {
    "date" : "date",
    "revenue" : 6.027456183070403,
    "user_count" : 1,
    "count" : 0
  }, {
    "date" : "date",
    "revenue" : 6.027456183070403,
    "user_count" : 1,
    "count" : 0
  } ],
  "first" : true
}}]
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter granularity: (query) The time duration to aggregate by (optional, default to day)
     - parameter filterPaymentStatus: (query) A payment status to filter results by, can be a comma separated list (optional)
     - parameter filterFulfillmentStatus: (query) An invoice fulfillment status to filter results by, can be a comma separated list (optional)
     - parameter startDate: (query) The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)

     - returns: RequestBuilder<PageResourceAggregateInvoiceReportResource> 
     */
    public class func getInvoiceReportsWithRequestBuilder(currencyCode currencyCode: String, granularity: Granularity_getInvoiceReports? = nil, filterPaymentStatus: String? = nil, filterFulfillmentStatus: String? = nil, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceAggregateInvoiceReportResource> {
        var path = "/reporting/orders/count/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "granularity": granularity?.rawValue,
            "filter_payment_status": filterPaymentStatus,
            "filter_fulfillment_status": filterFulfillmentStatus,
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceAggregateInvoiceReportResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
