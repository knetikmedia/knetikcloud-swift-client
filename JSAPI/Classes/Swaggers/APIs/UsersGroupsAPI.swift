//
// UsersGroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UsersGroupsAPI: APIBase {
    /**
     Adds a new member to the group
     
     - parameter uniqueName: (path) The group unique name 
     - parameter username: (body) The username of a user to add to the group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addMemberToGroup(uniqueName uniqueName: String, username: GroupMemberResource, completion: ((data: GroupMemberResource?, error: ErrorType?) -> Void)) {
        addMemberToGroupWithRequestBuilder(uniqueName: uniqueName, username: username).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds a new member to the group
     - POST /users/groups/{uniqueName}/members
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "avatar_url" : "aeiou",
  "id" : 2,
  "display_name" : "aeiou",
  "status" : "moderator",
  "username" : "aeiou"
}}]
     
     - parameter uniqueName: (path) The group unique name 
     - parameter username: (body) The username of a user to add to the group 

     - returns: RequestBuilder<GroupMemberResource> 
     */
    public class func addMemberToGroupWithRequestBuilder(uniqueName uniqueName: String, username: GroupMemberResource) -> RequestBuilder<GroupMemberResource> {
        var path = "/users/groups/{uniqueName}/members"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = username.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GroupMemberResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a group
     
     - parameter groupResource: (body) The new group (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createGroup(groupResource groupResource: GroupResource? = nil, completion: ((data: GroupResource?, error: ErrorType?) -> Void)) {
        createGroupWithRequestBuilder(groupResource: groupResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a group
     - POST /users/groups
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "parent" : "aeiou",
  "sub_member_count" : 8,
  "unique_name" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "member_count" : 1,
  "message_of_the_day" : "aeiou",
  "status" : "open"
}}]
     
     - parameter groupResource: (body) The new group (optional)

     - returns: RequestBuilder<GroupResource> 
     */
    public class func createGroupWithRequestBuilder(groupResource groupResource: GroupResource? = nil) -> RequestBuilder<GroupResource> {
        let path = "/users/groups"
        let URLString = JSAPIAPI.basePath + path
        let parameters = groupResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GroupResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a group template
     
     - parameter groupTemplateResource: (body) The group template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createGroupTemplate(groupTemplateResource groupTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        createGroupTemplateWithRequestBuilder(groupTemplateResource: groupTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a group template
     - POST /users/groups/templates
     - Group Templates define a type of group and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 5,
  "id" : "aeiou",
  "updated_date" : 7,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "aeiou" ],
        "name" : "aeiou",
        "description" : "aeiou",
        "type" : "integer",
        "inner_type_fields" : [ "" ],
        "required" : false
      } ],
      "property_type" : "aeiou",
      "property_fields" : [ "" ]
    },
    "required" : false
  } ]
}}]
     
     - parameter groupTemplateResource: (body) The group template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func createGroupTemplateWithRequestBuilder(groupTemplateResource groupTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/users/groups/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters = groupTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a group from the system IF no resources are attached to it
     
     - parameter uniqueName: (path) The group unique name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteGroup(uniqueName uniqueName: String, completion: ((error: ErrorType?) -> Void)) {
        deleteGroupWithRequestBuilder(uniqueName: uniqueName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a group from the system IF no resources are attached to it
     - DELETE /users/groups/{uniqueName}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter uniqueName: (path) The group unique name 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteGroupWithRequestBuilder(uniqueName uniqueName: String) -> RequestBuilder<Void> {
        var path = "/users/groups/{uniqueName}"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a group template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteGroupTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteGroupTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a group template
     - DELETE /users/groups/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteGroupTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/groups/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Loads a specific group's details
     
     - parameter uniqueName: (path) The group unique name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroup(uniqueName uniqueName: String, completion: ((data: GroupResource?, error: ErrorType?) -> Void)) {
        getGroupWithRequestBuilder(uniqueName: uniqueName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Loads a specific group's details
     - GET /users/groups/{uniqueName}
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "parent" : "aeiou",
  "sub_member_count" : 2,
  "unique_name" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "member_count" : 2,
  "message_of_the_day" : "aeiou",
  "status" : "open"
}}]
     
     - parameter uniqueName: (path) The group unique name 

     - returns: RequestBuilder<GroupResource> 
     */
    public class func getGroupWithRequestBuilder(uniqueName uniqueName: String) -> RequestBuilder<GroupResource> {
        var path = "/users/groups/{uniqueName}"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GroupResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a user from a group
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The id of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupMember(uniqueName uniqueName: String, userId: Int32, completion: ((data: GroupMemberResource?, error: ErrorType?) -> Void)) {
        getGroupMemberWithRequestBuilder(uniqueName: uniqueName, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user from a group
     - GET /users/groups/{uniqueName}/members/{userId}
     - examples: [{contentType=application/json, example={
  "avatar_url" : "aeiou",
  "id" : 8,
  "display_name" : "aeiou",
  "status" : "moderator",
  "username" : "aeiou"
}}]
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The id of the user 

     - returns: RequestBuilder<GroupMemberResource> 
     */
    public class func getGroupMemberWithRequestBuilder(uniqueName uniqueName: String, userId: Int32) -> RequestBuilder<GroupMemberResource> {
        var path = "/users/groups/{uniqueName}/members/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GroupMemberResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Lists members of the group
     
     - parameter uniqueName: (path) The group unique name 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupMembers(uniqueName uniqueName: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceGroupMemberResource?, error: ErrorType?) -> Void)) {
        getGroupMembersWithRequestBuilder(uniqueName: uniqueName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Lists members of the group
     - GET /users/groups/{uniqueName}/members
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 1,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 5,
  "content" : [ {
    "avatar_url" : "aeiou",
    "id" : 3,
    "display_name" : "aeiou",
    "status" : "moderator",
    "username" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter uniqueName: (path) The group unique name 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceGroupMemberResource> 
     */
    public class func getGroupMembersWithRequestBuilder(uniqueName uniqueName: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceGroupMemberResource> {
        var path = "/users/groups/{uniqueName}/members"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceGroupMemberResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single group template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupTemplate(id id: String, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        getGroupTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single group template
     - GET /users/groups/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 9,
  "id" : "aeiou",
  "updated_date" : 2,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "aeiou" ],
        "name" : "aeiou",
        "description" : "aeiou",
        "type" : "integer",
        "inner_type_fields" : [ "" ],
        "required" : false
      } ],
      "property_type" : "aeiou",
      "property_fields" : [ "" ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func getGroupTemplateWithRequestBuilder(id id: String) -> RequestBuilder<TemplateResource> {
        var path = "/users/groups/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search group templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceTemplateResource?, error: ErrorType?) -> Void)) {
        getGroupTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search group templates
     - GET /users/groups/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 3,
  "total_elements" : 8,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 9,
  "content" : [ {
    "name" : "aeiou",
    "created_date" : 5,
    "id" : "aeiou",
    "updated_date" : 3,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "aeiou" ],
          "name" : "aeiou",
          "description" : "aeiou",
          "type" : "integer",
          "inner_type_fields" : [ "" ],
          "required" : false
        } ],
        "property_type" : "aeiou",
        "property_fields" : [ "" ]
      },
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    public class func getGroupTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/users/groups/templates"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List groups a user is in
     
     - parameter userId: (path) The id of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupsForUser(userId userId: Int32, completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        getGroupsForUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List groups a user is in
     - GET /users/{userId}/groups
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter userId: (path) The id of the user 

     - returns: RequestBuilder<[String]> 
     */
    public class func getGroupsForUserWithRequestBuilder(userId userId: Int32) -> RequestBuilder<[String]> {
        var path = "/users/{userId}/groups"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a user from a group
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The id of the user to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeGroupMember(uniqueName uniqueName: String, userId: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeGroupMemberWithRequestBuilder(uniqueName: uniqueName, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a user from a group
     - DELETE /users/groups/{uniqueName}/members/{userId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The id of the user to remove 

     - returns: RequestBuilder<Void> 
     */
    public class func removeGroupMemberWithRequestBuilder(uniqueName uniqueName: String, userId: Int32) -> RequestBuilder<Void> {
        var path = "/users/groups/{uniqueName}/members/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a group
     
     - parameter uniqueName: (path) The group unique name 
     - parameter groupResource: (body) The updated group (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateGroup(uniqueName uniqueName: String, groupResource: GroupResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateGroupWithRequestBuilder(uniqueName: uniqueName, groupResource: groupResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a group
     - PUT /users/groups/{uniqueName}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter uniqueName: (path) The group unique name 
     - parameter groupResource: (body) The updated group (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateGroupWithRequestBuilder(uniqueName uniqueName: String, groupResource: GroupResource? = nil) -> RequestBuilder<Void> {
        var path = "/users/groups/{uniqueName}"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = groupResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Change a user's status
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The user id of the member to modify 
     - parameter status: (body) The new status for the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateGroupMemberStatus(uniqueName uniqueName: String, userId: Int32, status: String, completion: ((error: ErrorType?) -> Void)) {
        updateGroupMemberStatusWithRequestBuilder(uniqueName: uniqueName, userId: userId, status: status).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Change a user's status
     - PUT /users/groups/{uniqueName}/members/{userId}/status
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter uniqueName: (path) The group unique name 
     - parameter userId: (path) The user id of the member to modify 
     - parameter status: (body) The new status for the user 

     - returns: RequestBuilder<Void> 
     */
    public class func updateGroupMemberStatusWithRequestBuilder(uniqueName uniqueName: String, userId: Int32, status: String) -> RequestBuilder<Void> {
        var path = "/users/groups/{uniqueName}/members/{userId}/status"
        path = path.stringByReplacingOccurrencesOfString("{unique_name}", withString: "\(uniqueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = status.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a group template
     
     - parameter id: (path) The id of the template 
     - parameter groupTemplateResource: (body) The group template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateGroupTemplate(id id: String, groupTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        updateGroupTemplateWithRequestBuilder(id: id, groupTemplateResource: groupTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a group template
     - PUT /users/groups/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 1,
  "id" : "aeiou",
  "updated_date" : 9,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "aeiou" ],
        "name" : "aeiou",
        "description" : "aeiou",
        "type" : "integer",
        "inner_type_fields" : [ "" ],
        "required" : false
      } ],
      "property_type" : "aeiou",
      "property_fields" : [ "" ]
    },
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter groupTemplateResource: (body) The group template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func updateGroupTemplateWithRequestBuilder(id id: String, groupTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/users/groups/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = groupTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter filterStatus
     */
    public enum FilterStatus_updateGroups: String { 
        case Open = "open"
        case Closed = "closed"
    }

    /**
     List and search groups
     
     - parameter filterTemplate: (query) Filter for groups using a specific template, by id (optional)
     - parameter filterMemberCount: (query) Filters groups by member count. Multiple values possible for range search. Format: filter_member_count&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count&#x3D;GT,14,LT,17 (optional)
     - parameter filterName: (query) Filter for groups with names starting with the given string (optional)
     - parameter filterUniqueName: (query) Filter for groups whose unique_name starts with provided string (optional)
     - parameter filterParent: (query) Filter for groups with a specific parent, by unique name (optional)
     - parameter filterStatus: (query) Filter for groups with a certain status (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateGroups(filterTemplate filterTemplate: String? = nil, filterMemberCount: String? = nil, filterName: String? = nil, filterUniqueName: String? = nil, filterParent: String? = nil, filterStatus: FilterStatus_updateGroups? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceGroupResource?, error: ErrorType?) -> Void)) {
        updateGroupsWithRequestBuilder(filterTemplate: filterTemplate, filterMemberCount: filterMemberCount, filterName: filterName, filterUniqueName: filterUniqueName, filterParent: filterParent, filterStatus: filterStatus, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search groups
     - GET /users/groups
     - examples: [{contentType=application/json, example={
  "number" : 7,
  "last" : true,
  "size" : 9,
  "total_elements" : 1,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 4,
  "content" : [ {
    "template" : "aeiou",
    "parent" : "aeiou",
    "sub_member_count" : 4,
    "unique_name" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "member_count" : 7,
    "message_of_the_day" : "aeiou",
    "status" : "open"
  } ],
  "first" : true
}}]
     
     - parameter filterTemplate: (query) Filter for groups using a specific template, by id (optional)
     - parameter filterMemberCount: (query) Filters groups by member count. Multiple values possible for range search. Format: filter_member_count&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count&#x3D;GT,14,LT,17 (optional)
     - parameter filterName: (query) Filter for groups with names starting with the given string (optional)
     - parameter filterUniqueName: (query) Filter for groups whose unique_name starts with provided string (optional)
     - parameter filterParent: (query) Filter for groups with a specific parent, by unique name (optional)
     - parameter filterStatus: (query) Filter for groups with a certain status (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceGroupResource> 
     */
    public class func updateGroupsWithRequestBuilder(filterTemplate filterTemplate: String? = nil, filterMemberCount: String? = nil, filterName: String? = nil, filterUniqueName: String? = nil, filterParent: String? = nil, filterStatus: FilterStatus_updateGroups? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceGroupResource> {
        let path = "/users/groups"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_template": filterTemplate,
            "filter_member_count": filterMemberCount,
            "filter_name": filterName,
            "filter_unique_name": filterUniqueName,
            "filter_parent": filterParent,
            "filter_status": filterStatus?.rawValue,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceGroupResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
