//
// UsersRelationshipsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UsersRelationshipsAPI: APIBase {
    /**
     Create a user relationship
     
     - parameter relationship: (body) The new relationship (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createUserRelationship(relationship relationship: UserRelationshipResource? = nil, completion: ((data: UserRelationshipResource?, error: ErrorType?) -> Void)) {
        createUserRelationshipWithRequestBuilder(relationship: relationship).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a user relationship
     - POST /users/relationships
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "parent" : "",
  "context" : "aeiou",
  "id" : 8,
  "child" : {
    "avatar_url" : "aeiou",
    "id" : 1,
    "display_name" : "aeiou",
    "username" : "aeiou"
  }
}}]
     
     - parameter relationship: (body) The new relationship (optional)

     - returns: RequestBuilder<UserRelationshipResource> 
     */
    public class func createUserRelationshipWithRequestBuilder(relationship relationship: UserRelationshipResource? = nil) -> RequestBuilder<UserRelationshipResource> {
        let path = "/users/relationships"
        let URLString = JSAPIAPI.basePath + path
        let parameters = relationship?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a user relationship
     
     - parameter id: (path) The id of the relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUserRelationship(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteUserRelationshipWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a user relationship
     - DELETE /users/relationships/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the relationship 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUserRelationshipWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/users/relationships/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a user relationship
     
     - parameter id: (path) The id of the relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserRelationship(id id: Int64, completion: ((data: UserRelationshipResource?, error: ErrorType?) -> Void)) {
        getUserRelationshipWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user relationship
     - GET /users/relationships/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "parent" : "",
  "context" : "aeiou",
  "id" : 5,
  "child" : {
    "avatar_url" : "aeiou",
    "id" : 2,
    "display_name" : "aeiou",
    "username" : "aeiou"
  }
}}]
     
     - parameter id: (path) The id of the relationship 

     - returns: RequestBuilder<UserRelationshipResource> 
     */
    public class func getUserRelationshipWithRequestBuilder(id id: Int64) -> RequestBuilder<UserRelationshipResource> {
        var path = "/users/relationships/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of user relationships
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserRelationships(completion: ((data: PageResourceUserRelationshipResource?, error: ErrorType?) -> Void)) {
        getUserRelationshipsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of user relationships
     - GET /users/relationships
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 8,
  "last" : true,
  "size" : 0,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 0,
  "content" : [ {
    "parent" : "",
    "context" : "aeiou",
    "id" : 3,
    "child" : {
      "avatar_url" : "aeiou",
      "id" : 6,
      "display_name" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "first" : true
}}]

     - returns: RequestBuilder<PageResourceUserRelationshipResource> 
     */
    public class func getUserRelationshipsWithRequestBuilder() -> RequestBuilder<PageResourceUserRelationshipResource> {
        let path = "/users/relationships"
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceUserRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a user relationship
     
     - parameter id: (path) The id of the relationship 
     - parameter relationship: (body) The new relationship (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUserRelationship(id id: Int64, relationship: UserRelationshipResource? = nil, completion: ((data: UserRelationshipResource?, error: ErrorType?) -> Void)) {
        updateUserRelationshipWithRequestBuilder(id: id, relationship: relationship).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a user relationship
     - PUT /users/relationships/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "parent" : "",
  "context" : "aeiou",
  "id" : 1,
  "child" : {
    "avatar_url" : "aeiou",
    "id" : 3,
    "display_name" : "aeiou",
    "username" : "aeiou"
  }
}}]
     
     - parameter id: (path) The id of the relationship 
     - parameter relationship: (body) The new relationship (optional)

     - returns: RequestBuilder<UserRelationshipResource> 
     */
    public class func updateUserRelationshipWithRequestBuilder(id id: Int64, relationship: UserRelationshipResource? = nil) -> RequestBuilder<UserRelationshipResource> {
        var path = "/users/relationships/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = relationship?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserRelationshipResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
