//
// Users_AddressesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class Users_AddressesAPI: APIBase {
    /**
     Create a new address
     
     - parameter userId: (path) The id of the user 
     - parameter savedAddressResource: (body) The new address (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createAddress(userId userId: String, savedAddressResource: SavedAddressResource? = nil, completion: ((data: SavedAddressResource?, error: ErrorType?) -> Void)) {
        createAddressWithRequestBuilder(userId: userId, savedAddressResource: savedAddressResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new address
     - POST /users/{userId}/addresses
     - <b>Permissions Needed:</b> USERS_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "address2" : "address2",
  "city" : "city",
  "address1" : "address1",
  "phone2" : "phone2",
  "last_name" : "last_name",
  "phone1" : "phone1",
  "country_code" : "country_code",
  "default" : true,
  "name" : "name",
  "id" : 0,
  "postal_code" : "postal_code",
  "state_code" : "state_code",
  "first_name" : "first_name"
}}]
     
     - parameter userId: (path) The id of the user 
     - parameter savedAddressResource: (body) The new address (optional)

     - returns: RequestBuilder<SavedAddressResource> 
     */
    public class func createAddressWithRequestBuilder(userId userId: String, savedAddressResource: SavedAddressResource? = nil) -> RequestBuilder<SavedAddressResource> {
        var path = "/users/{userId}/addresses"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = savedAddressResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SavedAddressResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an address
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAddress(userId userId: String, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteAddressWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an address
     - DELETE /users/{userId}/addresses/{id}
     - <b>Permissions Needed:</b> USERS_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAddressWithRequestBuilder(userId userId: String, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{userId}/addresses/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single address
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAddress(userId userId: String, id: Int32, completion: ((data: SavedAddressResource?, error: ErrorType?) -> Void)) {
        getAddressWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single address
     - GET /users/{userId}/addresses/{id}
     - <b>Permissions Needed:</b> USERS_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "address2" : "address2",
  "city" : "city",
  "address1" : "address1",
  "phone2" : "phone2",
  "last_name" : "last_name",
  "phone1" : "phone1",
  "country_code" : "country_code",
  "default" : true,
  "name" : "name",
  "id" : 0,
  "postal_code" : "postal_code",
  "state_code" : "state_code",
  "first_name" : "first_name"
}}]
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 

     - returns: RequestBuilder<SavedAddressResource> 
     */
    public class func getAddressWithRequestBuilder(userId userId: String, id: Int32) -> RequestBuilder<SavedAddressResource> {
        var path = "/users/{userId}/addresses/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SavedAddressResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search addresses
     
     - parameter userId: (path) The id of the user 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAddresses(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceSavedAddressResource?, error: ErrorType?) -> Void)) {
        getAddressesWithRequestBuilder(userId: userId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search addresses
     - GET /users/{userId}/addresses
     - <b>Permissions Needed:</b> USERS_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 5,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 1,
  "content" : [ {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "phone2" : "phone2",
    "last_name" : "last_name",
    "phone1" : "phone1",
    "country_code" : "country_code",
    "default" : true,
    "name" : "name",
    "id" : 0,
    "postal_code" : "postal_code",
    "state_code" : "state_code",
    "first_name" : "first_name"
  }, {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "phone2" : "phone2",
    "last_name" : "last_name",
    "phone1" : "phone1",
    "country_code" : "country_code",
    "default" : true,
    "name" : "name",
    "id" : 0,
    "postal_code" : "postal_code",
    "state_code" : "state_code",
    "first_name" : "first_name"
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The id of the user 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceSavedAddressResource> 
     */
    public class func getAddressesWithRequestBuilder(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceSavedAddressResource> {
        var path = "/users/{userId}/addresses"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceSavedAddressResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an address
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 
     - parameter savedAddressResource: (body) The saved address resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateAddress(userId userId: String, id: Int32, savedAddressResource: SavedAddressResource? = nil, completion: ((data: SavedAddressResource?, error: ErrorType?) -> Void)) {
        updateAddressWithRequestBuilder(userId: userId, id: id, savedAddressResource: savedAddressResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an address
     - PUT /users/{userId}/addresses/{id}
     - <b>Permissions Needed:</b> USERS_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "address2" : "address2",
  "city" : "city",
  "address1" : "address1",
  "phone2" : "phone2",
  "last_name" : "last_name",
  "phone1" : "phone1",
  "country_code" : "country_code",
  "default" : true,
  "name" : "name",
  "id" : 0,
  "postal_code" : "postal_code",
  "state_code" : "state_code",
  "first_name" : "first_name"
}}]
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the address 
     - parameter savedAddressResource: (body) The saved address resource object (optional)

     - returns: RequestBuilder<SavedAddressResource> 
     */
    public class func updateAddressWithRequestBuilder(userId userId: String, id: Int32, savedAddressResource: SavedAddressResource? = nil) -> RequestBuilder<SavedAddressResource> {
        var path = "/users/{userId}/addresses/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = savedAddressResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SavedAddressResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
