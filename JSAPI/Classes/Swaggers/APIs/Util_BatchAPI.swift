//
// Util_BatchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class Util_BatchAPI: APIBase {
    /**
     Get batch result with token
     
     - parameter token: (path) token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBatch(token token: String, completion: ((data: [BatchReturn]?, error: ErrorType?) -> Void)) {
        getBatchWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get batch result with token
     - GET /batch/{token}
     - Tokens expire in 24 hours. <br><br><b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=[ {
  "code" : 0,
  "body" : "{}",
  "uri" : "uri"
}, {
  "code" : 0,
  "body" : "{}",
  "uri" : "uri"
} ]}]
     
     - parameter token: (path) token 

     - returns: RequestBuilder<[BatchReturn]> 
     */
    public class func getBatchWithRequestBuilder(token token: String) -> RequestBuilder<[BatchReturn]> {
        var path = "/batch/{token}"
        path = path.stringByReplacingOccurrencesOfString("{token}", withString: "\(token)", options: .LiteralSearch, range: nil)
        let URLString = JSAPIAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BatchReturn]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Request to run API call given the method, content type, path url, and body of request
     
     - parameter batch: (body) The batch object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendBatch(batch batch: Batch? = nil, completion: ((data: [BatchReturn]?, error: ErrorType?) -> Void)) {
        sendBatchWithRequestBuilder(batch: batch).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Request to run API call given the method, content type, path url, and body of request
     - POST /batch
     - Should the request take longer than one of the alloted timeout parameters, a token will be returned instead, which can be used on the token endpoint in this service. <br><br><b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant
     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=[ {
  "code" : 0,
  "body" : "{}",
  "uri" : "uri"
}, {
  "code" : 0,
  "body" : "{}",
  "uri" : "uri"
} ]}]
     
     - parameter batch: (body) The batch object (optional)

     - returns: RequestBuilder<[BatchReturn]> 
     */
    public class func sendBatchWithRequestBuilder(batch batch: Batch? = nil) -> RequestBuilder<[BatchReturn]> {
        let path = "/batch"
        let URLString = JSAPIAPI.basePath + path
        let parameters = batch?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BatchReturn]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
