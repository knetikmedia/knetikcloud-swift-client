//
// ServiceDeployedEvent.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ServiceDeployedEvent: JSONEncodable {
    public var client: String?
    public var customer: String?
    public var doNotBroadcast: Bool?
    public var section: String?
    public var source: AnyObject?
    public var specifics: String?
    public var synchronous: Bool?
    public var timestamp: Int64?
    /** The type of the event. Used for polymorphic type recognition and thus must match an expected type */
    public var type: String?
    /** The events fired by this service */
    public var events: [BreTriggerResource]?
    /** The resources managed by this service */
    public var resources: [ResourceTypeDescription]?
    /** The unique name for the service. This serves as the unique identifier. Cannot be changed after creation */
    public var serviceName: String?
    /** The url of the swagger doc */
    public var swaggerUrl: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["client"] = self.client
        nillableDictionary["customer"] = self.customer
        nillableDictionary["do_not_broadcast"] = self.doNotBroadcast
        nillableDictionary["section"] = self.section
        nillableDictionary["source"] = self.source
        nillableDictionary["specifics"] = self.specifics
        nillableDictionary["synchronous"] = self.synchronous
        nillableDictionary["timestamp"] = self.timestamp?.encodeToJSON()
        nillableDictionary["type"] = self.type
        nillableDictionary["events"] = self.events?.encodeToJSON()
        nillableDictionary["resources"] = self.resources?.encodeToJSON()
        nillableDictionary["service_name"] = self.serviceName
        nillableDictionary["swagger_url"] = self.swaggerUrl
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
