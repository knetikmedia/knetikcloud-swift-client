//
// AuthRolesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AuthRolesAPI: APIBase {
    /**
     Create a new role
     
     - parameter roleResource: (body) The role resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createRole(roleResource roleResource: RoleResource? = nil, completion: ((data: RoleResource?, error: ErrorType?) -> Void)) {
        createRoleWithRequestBuilder(roleResource: roleResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new role
     - POST /auth/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 5,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 6,
    "updated_date" : 6,
    "locked" : false
  } ],
  "created_date" : 4,
  "locked" : false,
  "client_count" : 0
}}]
     
     - parameter roleResource: (body) The role resource object (optional)

     - returns: RequestBuilder<RoleResource> 
     */
    public class func createRoleWithRequestBuilder(roleResource roleResource: RoleResource? = nil) -> RequestBuilder<RoleResource> {
        let path = "/auth/roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = roleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a role
     
     - parameter role: (path) The role value 
     - parameter force: (query) If true, removes role from users/clients (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRole(role role: String, force: Bool? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteRoleWithRequestBuilder(role: role, force: force).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a role
     - DELETE /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter role: (path) The role value 
     - parameter force: (query) If true, removes role from users/clients (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteRoleWithRequestBuilder(role role: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/auth/roles/{role}"
        path = path.stringByReplacingOccurrencesOfString("{role}", withString: "\(role)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "force": force
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get roles for a client
     
     - parameter clientKey: (path) The client key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getClientRoles(clientKey clientKey: String, completion: ((data: [RoleResource]?, error: ErrorType?) -> Void)) {
        getClientRolesWithRequestBuilder(clientKey: clientKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get roles for a client
     - GET /auth/clients/{clientKey}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "user_count" : 0,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 2,
    "updated_date" : 6,
    "locked" : false
  } ],
  "created_date" : 9,
  "locked" : false,
  "client_count" : 4
} ]}]
     
     - parameter clientKey: (path) The client key 

     - returns: RequestBuilder<[RoleResource]> 
     */
    public class func getClientRolesWithRequestBuilder(clientKey clientKey: String) -> RequestBuilder<[RoleResource]> {
        var path = "/auth/clients/{clientKey}/roles"
        path = path.stringByReplacingOccurrencesOfString("{client_key}", withString: "\(clientKey)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoleResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single role
     
     - parameter role: (path) The role value 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRole(role role: String, completion: ((data: RoleResource?, error: ErrorType?) -> Void)) {
        getRoleWithRequestBuilder(role: role).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single role
     - GET /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 9,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 4,
    "updated_date" : 8,
    "locked" : false
  } ],
  "created_date" : 8,
  "locked" : false,
  "client_count" : 1
}}]
     
     - parameter role: (path) The role value 

     - returns: RequestBuilder<RoleResource> 
     */
    public class func getRoleWithRequestBuilder(role role: String) -> RequestBuilder<RoleResource> {
        var path = "/auth/roles/{role}"
        path = path.stringByReplacingOccurrencesOfString("{role}", withString: "\(role)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search roles
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoles(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceRoleResource?, error: ErrorType?) -> Void)) {
        getRolesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search roles
     - GET /auth/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 2,
  "last" : true,
  "size" : 1,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 6,
  "content" : [ {
    "role" : "aeiou",
    "user_count" : 0,
    "name" : "aeiou",
    "role_permission" : [ {
      "parent" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "permission" : "aeiou",
      "created_date" : 3,
      "updated_date" : 4,
      "locked" : false
    } ],
    "created_date" : 0,
    "locked" : false,
    "client_count" : 0
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceRoleResource> 
     */
    public class func getRolesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceRoleResource> {
        let path = "/auth/roles"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceRoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get roles for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserRoles(userId userId: Int32, completion: ((data: [RoleResource]?, error: ErrorType?) -> Void)) {
        getUserRolesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get roles for a user
     - GET /auth/users/{userId}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "user_count" : 2,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 5,
    "updated_date" : 5,
    "locked" : false
  } ],
  "created_date" : 2,
  "locked" : false,
  "client_count" : 6
} ]}]
     
     - parameter userId: (path) The user&#39;s id 

     - returns: RequestBuilder<[RoleResource]> 
     */
    public class func getUserRolesWithRequestBuilder(userId userId: Int32) -> RequestBuilder<[RoleResource]> {
        var path = "/auth/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoleResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set roles for a client
     
     - parameter clientKey: (path) The client key 
     - parameter rolesList: (body) The list of unique roles (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setClientRoles(clientKey clientKey: String, rolesList: [String]? = nil, completion: ((data: ClientResource?, error: ErrorType?) -> Void)) {
        setClientRolesWithRequestBuilder(clientKey: clientKey, rolesList: rolesList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set roles for a client
     - PUT /auth/clients/{clientKey}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "client_key" : "aeiou",
  "grant_types" : [ "aeiou" ],
  "is_public" : false,
  "name" : "aeiou",
  "id" : 8,
  "redirect_uris" : [ "aeiou" ],
  "secret" : "aeiou",
  "locked" : false,
  "access_token_validity_seconds" : 0,
  "refresh_token_validity_seconds" : 0
}}]
     
     - parameter clientKey: (path) The client key 
     - parameter rolesList: (body) The list of unique roles (optional)

     - returns: RequestBuilder<ClientResource> 
     */
    public class func setClientRolesWithRequestBuilder(clientKey clientKey: String, rolesList: [String]? = nil) -> RequestBuilder<ClientResource> {
        var path = "/auth/clients/{clientKey}/roles"
        path = path.stringByReplacingOccurrencesOfString("{client_key}", withString: "\(clientKey)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rolesList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ClientResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set permissions for a role
     
     - parameter role: (path) The role value 
     - parameter permissionsList: (body) The list of unique permissions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setPermissionsForRole(role role: String, permissionsList: [String]? = nil, completion: ((data: RoleResource?, error: ErrorType?) -> Void)) {
        setPermissionsForRoleWithRequestBuilder(role: role, permissionsList: permissionsList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set permissions for a role
     - PUT /auth/roles/{role}/permissions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 5,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 6,
    "updated_date" : 9,
    "locked" : false
  } ],
  "created_date" : 9,
  "locked" : false,
  "client_count" : 0
}}]
     
     - parameter role: (path) The role value 
     - parameter permissionsList: (body) The list of unique permissions (optional)

     - returns: RequestBuilder<RoleResource> 
     */
    public class func setPermissionsForRoleWithRequestBuilder(role role: String, permissionsList: [String]? = nil) -> RequestBuilder<RoleResource> {
        var path = "/auth/roles/{role}/permissions"
        path = path.stringByReplacingOccurrencesOfString("{role}", withString: "\(role)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = permissionsList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set roles for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter rolesList: (body) The list of unique roles (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setUserRoles(userId userId: Int32, rolesList: [String]? = nil, completion: ((data: UserResource?, error: ErrorType?) -> Void)) {
        setUserRolesWithRequestBuilder(userId: userId, rolesList: rolesList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set roles for a user
     - PUT /auth/users/{userId}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "gender" : "aeiou",
  "city" : "aeiou",
  "date_of_birth" : 6,
  "description" : "aeiou",
  "currency_code" : "aeiou",
  "language_code" : "aeiou",
  "password" : "aeiou",
  "children" : [ {
    "avatar_url" : "aeiou",
    "context" : "aeiou",
    "relationship_id" : 8,
    "id" : 9,
    "display_name" : "aeiou",
    "username" : "aeiou"
  } ],
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "id" : 8,
  "state" : "aeiou",
  "first_name" : "aeiou",
  "email" : "aeiou",
  "address" : "aeiou",
  "address2" : "aeiou",
  "last_name" : "aeiou",
  "display_name" : "aeiou",
  "tags" : [ "aeiou" ],
  "country_code" : "aeiou",
  "avatar_url" : "aeiou",
  "timezone_code" : "aeiou",
  "fullname" : "aeiou",
  "mobile_number" : "aeiou",
  "postal_code" : "aeiou",
  "parents" : [ "" ],
  "username" : "aeiou"
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter rolesList: (body) The list of unique roles (optional)

     - returns: RequestBuilder<UserResource> 
     */
    public class func setUserRolesWithRequestBuilder(userId userId: Int32, rolesList: [String]? = nil) -> RequestBuilder<UserResource> {
        var path = "/auth/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rolesList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a role
     
     - parameter role: (path) The role value 
     - parameter roleResource: (body) The role resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateRole(role role: String, roleResource: RoleResource? = nil, completion: ((data: RoleResource?, error: ErrorType?) -> Void)) {
        updateRoleWithRequestBuilder(role: role, roleResource: roleResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a role
     - PUT /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 2,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 8,
    "updated_date" : 7,
    "locked" : false
  } ],
  "created_date" : 2,
  "locked" : false,
  "client_count" : 9
}}]
     
     - parameter role: (path) The role value 
     - parameter roleResource: (body) The role resource object (optional)

     - returns: RequestBuilder<RoleResource> 
     */
    public class func updateRoleWithRequestBuilder(role role: String, roleResource: RoleResource? = nil) -> RequestBuilder<RoleResource> {
        var path = "/auth/roles/{role}"
        path = path.stringByReplacingOccurrencesOfString("{role}", withString: "\(role)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = roleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
