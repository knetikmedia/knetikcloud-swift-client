//
// BRERuleEngineExpressionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BRERuleEngineExpressionsAPI: APIBase {
    /**
     Get a list of 'lookup' type expressions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLookupTypesUsingGET(completion: ((data: [LookupTypeResource]?, error: ErrorType?) -> Void)) {
        getLookupTypesUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of 'lookup' type expressions
     - GET /bre/expressions/lookup
     - These are expression types that take a second expression as input and produce a value. These can be used in addition to the standard types, like parameter, global and constant (see BRE documentation for details).
     - OAuth:
       - type: oauth2
       - name: knetik_oauth
     - examples: [{contentType=application/json, example=[ {
  "value_type" : "aeiou",
  "key_type" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou"
} ]}]

     - returns: RequestBuilder<[LookupTypeResource]> 
     */
    public class func getLookupTypesUsingGETWithRequestBuilder() -> RequestBuilder<[LookupTypeResource]> {
        let path = "/bre/expressions/lookup"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[LookupTypeResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
