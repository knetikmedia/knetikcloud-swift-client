//
// BRERuleEngineTriggersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BRERuleEngineTriggersAPI: APIBase {
    /**
     Create a trigger
     
     - parameter breTriggerResource: (body) The BRE trigger resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createTriggerUsingPOST(breTriggerResource breTriggerResource: BreTriggerResource? = nil, completion: ((data: BreTriggerResource?, error: ErrorType?) -> Void)) {
        createTriggerUsingPOSTWithRequestBuilder(breTriggerResource: breTriggerResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a trigger
     - POST /bre/triggers
     - Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "trigger_name" : "aeiou",
  "system_trigger" : false,
  "event_name" : "aeiou",
  "category" : "aeiou",
  "parameters" : [ {
    "name" : "aeiou",
    "type" : "aeiou"
  } ],
  "trigger_description" : "aeiou"
}}]
     
     - parameter breTriggerResource: (body) The BRE trigger resource object (optional)

     - returns: RequestBuilder<BreTriggerResource> 
     */
    public class func createTriggerUsingPOSTWithRequestBuilder(breTriggerResource breTriggerResource: BreTriggerResource? = nil) -> RequestBuilder<BreTriggerResource> {
        let path = "/bre/triggers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = breTriggerResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BreTriggerResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a trigger
     
     - parameter eventName: (path) The trigger event name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTriggerUsingDELETE(eventName eventName: String, completion: ((error: ErrorType?) -> Void)) {
        deleteTriggerUsingDELETEWithRequestBuilder(eventName: eventName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a trigger
     - DELETE /bre/triggers/{eventName}
     - May fail if there are existing rules against it. Cannot delete core triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter eventName: (path) The trigger event name 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTriggerUsingDELETEWithRequestBuilder(eventName eventName: String) -> RequestBuilder<Void> {
        var path = "/bre/triggers/{eventName}"
        path = path.stringByReplacingOccurrencesOfString("{event_name}", withString: "\(eventName)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single trigger
     
     - parameter eventName: (path) The trigger event name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTriggerUsingGET(eventName eventName: String, completion: ((data: BreTriggerResource?, error: ErrorType?) -> Void)) {
        getTriggerUsingGETWithRequestBuilder(eventName: eventName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single trigger
     - GET /bre/triggers/{eventName}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "trigger_name" : "aeiou",
  "system_trigger" : false,
  "event_name" : "aeiou",
  "category" : "aeiou",
  "parameters" : [ {
    "name" : "aeiou",
    "type" : "aeiou"
  } ],
  "trigger_description" : "aeiou"
}}]
     
     - parameter eventName: (path) The trigger event name 

     - returns: RequestBuilder<BreTriggerResource> 
     */
    public class func getTriggerUsingGETWithRequestBuilder(eventName eventName: String) -> RequestBuilder<BreTriggerResource> {
        var path = "/bre/triggers/{eventName}"
        path = path.stringByReplacingOccurrencesOfString("{event_name}", withString: "\(eventName)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BreTriggerResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter filterCategory
     */
    public enum FilterCategory_getTriggersUsingGET: String { 
        case Achievement = "achievement"
        case Behavior = "behavior"
        case Comment = "comment"
        case Disposition = "disposition"
        case Entitlement = "entitlement"
        case Friends = "friends"
        case Fulfillment = "fulfillment"
        case Gamification = "gamification"
        case Inventory = "inventory"
        case Invoice = "invoice"
        case Media = "media"
        case Scheduler = "scheduler"
        case Store = "store"
        case Subscription = "subscription"
        case User = "user"
        case Wallet = "wallet"
        case Custom = "custom"
        case Challenge = "challenge"
        case Activity = "activity"
        case Campaign = "campaign"
        case Event = "event"
    }

    /**
     List triggers
     
     - parameter filterSystem: (query) Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)
     - parameter filterCategory: (query) Filter for triggers that are within a specific category (optional)
     - parameter filterName: (query) Filter for triggers that have names containing the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTriggersUsingGET(filterSystem filterSystem: Bool? = nil, filterCategory: FilterCategory_getTriggersUsingGET? = nil, filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageBreTriggerResource?, error: ErrorType?) -> Void)) {
        getTriggersUsingGETWithRequestBuilder(filterSystem: filterSystem, filterCategory: filterCategory, filterName: filterName, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List triggers
     - GET /bre/triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "trigger_name" : "aeiou",
    "system_trigger" : false,
    "event_name" : "aeiou",
    "category" : "aeiou",
    "parameters" : [ {
      "name" : "aeiou",
      "type" : "aeiou"
    } ],
    "trigger_description" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter filterSystem: (query) Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)
     - parameter filterCategory: (query) Filter for triggers that are within a specific category (optional)
     - parameter filterName: (query) Filter for triggers that have names containing the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageBreTriggerResource> 
     */
    public class func getTriggersUsingGETWithRequestBuilder(filterSystem filterSystem: Bool? = nil, filterCategory: FilterCategory_getTriggersUsingGET? = nil, filterName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageBreTriggerResource> {
        let path = "/bre/triggers"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_system": filterSystem,
            "filter_category": filterCategory?.rawValue,
            "filter_name": filterName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageBreTriggerResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a trigger
     
     - parameter eventName: (path) The trigger event name 
     - parameter breTriggerResource: (body) The BRE trigger resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTriggerUsingPUT(eventName eventName: String, breTriggerResource: BreTriggerResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateTriggerUsingPUTWithRequestBuilder(eventName: eventName, breTriggerResource: breTriggerResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a trigger
     - PUT /bre/triggers/{eventName}
     - May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter eventName: (path) The trigger event name 
     - parameter breTriggerResource: (body) The BRE trigger resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateTriggerUsingPUTWithRequestBuilder(eventName eventName: String, breTriggerResource: BreTriggerResource? = nil) -> RequestBuilder<Void> {
        var path = "/bre/triggers/{eventName}"
        path = path.stringByReplacingOccurrencesOfString("{event_name}", withString: "\(eventName)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = breTriggerResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
