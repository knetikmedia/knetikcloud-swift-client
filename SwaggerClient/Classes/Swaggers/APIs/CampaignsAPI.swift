//
// CampaignsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CampaignsAPI: APIBase {
    /**
     Add a challenge to a campaign
     
     - parameter id: (path) The id of the campaign 
     - parameter challengeId: (body) The id of the challenge (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addChallengesUsingPOST(id id: Int64, challengeId: Int64? = nil, completion: ((error: ErrorType?) -> Void)) {
        addChallengesUsingPOSTWithRequestBuilder(id: id, challengeId: challengeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a challenge to a campaign
     - POST /campaigns/{id}/challenges
     
     - parameter id: (path) The id of the campaign 
     - parameter challengeId: (body) The id of the challenge (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addChallengesUsingPOSTWithRequestBuilder(id id: Int64, challengeId: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/campaigns/{id}/challenges"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeId?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a campaign template
     
     - parameter campaignTemplateResource: (body) The campaign template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createCampaignTemplateUsingPOST(campaignTemplateResource campaignTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        createCampaignTemplateUsingPOSTWithRequestBuilder(campaignTemplateResource: campaignTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a campaign template
     - POST /campaigns/templates
     - Campaign Templates define a type of campaign and the properties they have
     - examples: [{output=none}]
     
     - parameter campaignTemplateResource: (body) The campaign template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func createCampaignTemplateUsingPOSTWithRequestBuilder(campaignTemplateResource campaignTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/campaigns/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = campaignTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a campaign
     
     - parameter campaignResource: (body) The campaign resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createCampaignUsingPOST(campaignResource campaignResource: CampaignResource? = nil, completion: ((data: CampaignResource?, error: ErrorType?) -> Void)) {
        createCampaignUsingPOSTWithRequestBuilder(campaignResource: campaignResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a campaign
     - POST /campaigns
     - examples: [{output=none}]
     
     - parameter campaignResource: (body) The campaign resource object (optional)

     - returns: RequestBuilder<CampaignResource> 
     */
    public class func createCampaignUsingPOSTWithRequestBuilder(campaignResource campaignResource: CampaignResource? = nil) -> RequestBuilder<CampaignResource> {
        let path = "/campaigns"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = campaignResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CampaignResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a campaign template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCampaignTemplateUsingDELETE(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteCampaignTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a campaign template
     - DELETE /campaigns/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCampaignTemplateUsingDELETEWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/campaigns/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a campaign
     
     - parameter id: (path) The campaign id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCampaignUsingDELETE(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteCampaignUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a campaign
     - DELETE /campaigns/{id}
     
     - parameter id: (path) The campaign id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCampaignUsingDELETEWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/campaigns/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single campaign template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCampaignTemplateUsingGET(id id: String, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        getCampaignTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single campaign template
     - GET /campaigns/templates/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func getCampaignTemplateUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<TemplateResource> {
        var path = "/campaigns/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search campaign templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCampaignTemplatesUsingGET(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageTemplateResource?, error: ErrorType?) -> Void)) {
        getCampaignTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search campaign templates
     - GET /campaigns/templates
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageTemplateResource> 
     */
    public class func getCampaignTemplatesUsingGETWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageTemplateResource> {
        let path = "/campaigns/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a single campaign
     
     - parameter id: (path) The campaign id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCampaignUsingGET(id id: Int64, completion: ((data: CampaignResource?, error: ErrorType?) -> Void)) {
        getCampaignUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a single campaign
     - GET /campaigns/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The campaign id 

     - returns: RequestBuilder<CampaignResource> 
     */
    public class func getCampaignUsingGETWithRequestBuilder(id id: Int64) -> RequestBuilder<CampaignResource> {
        var path = "/campaigns/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CampaignResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search campaigns
     
     - parameter filterActive: (query) Filter for campaigns that are active (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCampaignsUsingGET(filterActive filterActive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageCampaignResource?, error: ErrorType?) -> Void)) {
        getCampaignsUsingGETWithRequestBuilder(filterActive: filterActive, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search campaigns
     - GET /campaigns
     - examples: [{output=none}]
     
     - parameter filterActive: (query) Filter for campaigns that are active (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageCampaignResource> 
     */
    public class func getCampaignsUsingGETWithRequestBuilder(filterActive filterActive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageCampaignResource> {
        let path = "/campaigns"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_active": filterActive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageCampaignResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the challenges associated with a campaign
     
     - parameter id: (path) The campaign id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getChallengesUsingGET(id id: Int64, completion: ((data: PageChallengeResource?, error: ErrorType?) -> Void)) {
        getChallengesUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List the challenges associated with a campaign
     - GET /campaigns/{id}/challenges
     - examples: [{output=none}]
     
     - parameter id: (path) The campaign id 

     - returns: RequestBuilder<PageChallengeResource> 
     */
    public class func getChallengesUsingGETWithRequestBuilder(id id: Int64) -> RequestBuilder<PageChallengeResource> {
        var path = "/campaigns/{id}/challenges"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageChallengeResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove a challenge from a campaign
     
     - parameter campaignId: (path) The campaign id 
     - parameter id: (path) The challenge id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeChallengeUsingDELETE(campaignId campaignId: Int64, id: Int64, completion: ((error: ErrorType?) -> Void)) {
        removeChallengeUsingDELETEWithRequestBuilder(campaignId: campaignId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove a challenge from a campaign
     - DELETE /campaigns/{campaignId}/challenges/{id}
     
     - parameter campaignId: (path) The campaign id 
     - parameter id: (path) The challenge id 

     - returns: RequestBuilder<Void> 
     */
    public class func removeChallengeUsingDELETEWithRequestBuilder(campaignId campaignId: Int64, id: Int64) -> RequestBuilder<Void> {
        var path = "/campaigns/{campaignId}/challenges/{id}"
        path = path.stringByReplacingOccurrencesOfString("{campaign_id}", withString: "\(campaignId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an campaign template
     
     - parameter id: (path) The id of the template 
     - parameter campaignTemplateResource: (body) The campaign template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCampaignTemplateUsingPUT(id id: String, campaignTemplateResource: TemplateResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateCampaignTemplateUsingPUTWithRequestBuilder(id: id, campaignTemplateResource: campaignTemplateResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an campaign template
     - PUT /campaigns/templates/{id}
     
     - parameter id: (path) The id of the template 
     - parameter campaignTemplateResource: (body) The campaign template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateCampaignTemplateUsingPUTWithRequestBuilder(id id: String, campaignTemplateResource: TemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/campaigns/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = campaignTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a campaign
     
     - parameter id: (path) The campaign id 
     - parameter campaignResource: (body) The campaign resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCampaignUsingPUT(id id: Int64, campaignResource: CampaignResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateCampaignUsingPUTWithRequestBuilder(id: id, campaignResource: campaignResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a campaign
     - PUT /campaigns/{id}
     
     - parameter id: (path) The campaign id 
     - parameter campaignResource: (body) The campaign resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateCampaignUsingPUTWithRequestBuilder(id id: Int64, campaignResource: CampaignResource? = nil) -> RequestBuilder<Void> {
        var path = "/campaigns/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = campaignResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
