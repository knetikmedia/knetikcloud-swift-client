//
// ConfigsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConfigsAPI: APIBase {
    /**
     Create a new config
     
     - parameter config: (body) The config object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createConfigUsingPOST(config config: Config? = nil, completion: ((data: Config?, error: ErrorType?) -> Void)) {
        createConfigUsingPOSTWithRequestBuilder(config: config).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new config
     - POST /configs
     - examples: [{output=none}]
     
     - parameter config: (body) The config object (optional)

     - returns: RequestBuilder<Config> 
     */
    public class func createConfigUsingPOSTWithRequestBuilder(config config: Config? = nil) -> RequestBuilder<Config> {
        let path = "/configs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = config?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Config>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing config.
     
     - parameter name: (path) The config name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConfigUsingDELETE(name name: String, completion: ((error: ErrorType?) -> Void)) {
        deleteConfigUsingDELETEWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing config.
     - DELETE /configs/{name}
     
     - parameter name: (path) The config name 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteConfigUsingDELETEWithRequestBuilder(name name: String) -> RequestBuilder<Void> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single config
     
     - parameter name: (path) The config name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConfigUsingGET(name name: String, completion: ((data: Config?, error: ErrorType?) -> Void)) {
        getConfigUsingGETWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single config
     - GET /configs/{name}
     - examples: [{output=none}]
     
     - parameter name: (path) The config name 

     - returns: RequestBuilder<Config> 
     */
    public class func getConfigUsingGETWithRequestBuilder(name name: String) -> RequestBuilder<Config> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Config>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search configs
     
     - parameter filterSearch: (query) Filter for configs whose name contains the given string (optional)
     - parameter size: (query) The number of objects returned per pag (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConfigsUsingGET(filterSearch filterSearch: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageConfig?, error: ErrorType?) -> Void)) {
        getConfigsUsingGETWithRequestBuilder(filterSearch: filterSearch, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search configs
     - GET /configs
     - examples: [{output=none}]
     
     - parameter filterSearch: (query) Filter for configs whose name contains the given string (optional)
     - parameter size: (query) The number of objects returned per pag (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageConfig> 
     */
    public class func getConfigsUsingGETWithRequestBuilder(filterSearch filterSearch: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageConfig> {
        let path = "/configs"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_search": filterSearch,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an existing config.
     
     - parameter name: (path) The config name 
     - parameter config: (body) The config object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateConfigUsingPUT(name name: String, config: Config? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateConfigUsingPUTWithRequestBuilder(name: name, config: config).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an existing config.
     - PUT /configs/{name}
     
     - parameter name: (path) The config name 
     - parameter config: (body) The config object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateConfigUsingPUTWithRequestBuilder(name name: String, config: Config? = nil) -> RequestBuilder<Void> {
        var path = "/configs/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = config?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
