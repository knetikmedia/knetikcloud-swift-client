//
// ContentArticlesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContentArticlesAPI: APIBase {
    /**
     Create a new article
     
     - parameter articleResource: (body) The new article (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createArticle(articleResource articleResource: ArticleResource? = nil, completion: ((data: ArticleResource?, error: ErrorType?) -> Void)) {
        createArticleWithRequestBuilder(articleResource: articleResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new article
     - POST /content/articles
     - Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "active" : false,
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 1,
  "id" : "aeiou",
  "updated_date" : 6,
  "body" : "aeiou",
  "category" : {
    "name" : "aeiou",
    "active" : false,
    "id" : "aeiou"
  },
  "title" : "aeiou",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter articleResource: (body) The new article (optional)

     - returns: RequestBuilder<ArticleResource> 
     */
    public class func createArticleWithRequestBuilder(articleResource articleResource: ArticleResource? = nil) -> RequestBuilder<ArticleResource> {
        let path = "/content/articles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = articleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ArticleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an article template
     
     - parameter articleTemplateResource: (body) The article template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createArticleTemplate(articleTemplateResource articleTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        createArticleTemplateWithRequestBuilder(articleTemplateResource: articleTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an article template
     - POST /content/articles/templates
     - Article Templates define a type of article and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 0,
  "id" : "aeiou",
  "updated_date" : 5,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter articleTemplateResource: (body) The article template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func createArticleTemplateWithRequestBuilder(articleTemplateResource articleTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/content/articles/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = articleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing article
     
     - parameter id: (path) The article id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteArticle(id id: String, completion: ((error: ErrorType?) -> Void)) {
        deleteArticleWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing article
     - DELETE /content/articles/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The article id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteArticleWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/content/articles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an article template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteArticleTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteArticleTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an article template
     - DELETE /content/articles/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteArticleTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/content/articles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single article
     
     - parameter id: (path) The article id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getArticle(id id: String, completion: ((data: ArticleResource?, error: ErrorType?) -> Void)) {
        getArticleWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single article
     - GET /content/articles/{id}
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "active" : false,
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 4,
  "id" : "aeiou",
  "updated_date" : 7,
  "body" : "aeiou",
  "category" : {
    "name" : "aeiou",
    "active" : false,
    "id" : "aeiou"
  },
  "title" : "aeiou",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter id: (path) The article id 

     - returns: RequestBuilder<ArticleResource> 
     */
    public class func getArticleWithRequestBuilder(id id: String) -> RequestBuilder<ArticleResource> {
        var path = "/content/articles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ArticleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single article template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getArticleTemplate(id id: String, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        getArticleTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single article template
     - GET /content/articles/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 3,
  "id" : "aeiou",
  "updated_date" : 2,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func getArticleTemplateWithRequestBuilder(id id: String) -> RequestBuilder<TemplateResource> {
        var path = "/content/articles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search article templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getArticleTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceTemplateResource?, error: ErrorType?) -> Void)) {
        getArticleTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search article templates
     - GET /content/articles/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 9,
  "last" : true,
  "size" : 7,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 9,
  "content" : [ {
    "name" : "aeiou",
    "created_date" : 0,
    "id" : "aeiou",
    "updated_date" : 4,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    public class func getArticleTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/content/articles/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search articles
     
     - parameter filterCategory: (query) Filter for articles from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for articles with specified tags (separated by comma) (optional)
     - parameter filterTitle: (query) Filter for articles whose title contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getArticles(filterCategory filterCategory: String? = nil, filterTagset: String? = nil, filterTitle: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceArticleResource?, error: ErrorType?) -> Void)) {
        getArticlesWithRequestBuilder(filterCategory: filterCategory, filterTagset: filterTagset, filterTitle: filterTitle, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search articles
     - GET /content/articles
     - Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use 'Get a single article' to retrieve the full resource with assets for a given item as needed.
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 6,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 9,
  "content" : [ {
    "template" : "aeiou",
    "active" : false,
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 5,
    "id" : "aeiou",
    "updated_date" : 9,
    "body" : "aeiou",
    "category" : {
      "name" : "aeiou",
      "active" : false,
      "id" : "aeiou"
    },
    "title" : "aeiou",
    "tags" : [ "aeiou" ]
  } ],
  "first" : true
}}]
     
     - parameter filterCategory: (query) Filter for articles from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for articles with specified tags (separated by comma) (optional)
     - parameter filterTitle: (query) Filter for articles whose title contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceArticleResource> 
     */
    public class func getArticlesWithRequestBuilder(filterCategory filterCategory: String? = nil, filterTagset: String? = nil, filterTitle: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceArticleResource> {
        let path = "/content/articles"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_category": filterCategory,
            "filter_tagset": filterTagset,
            "filter_title": filterTitle,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceArticleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an existing article
     
     - parameter id: (path) The article id 
     - parameter articleResource: (body) The article object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateArticle(id id: String, articleResource: ArticleResource? = nil, completion: ((data: ArticleResource?, error: ErrorType?) -> Void)) {
        updateArticleWithRequestBuilder(id: id, articleResource: articleResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an existing article
     - PUT /content/articles/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "active" : false,
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 4,
  "id" : "aeiou",
  "updated_date" : 6,
  "body" : "aeiou",
  "category" : {
    "name" : "aeiou",
    "active" : false,
    "id" : "aeiou"
  },
  "title" : "aeiou",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter id: (path) The article id 
     - parameter articleResource: (body) The article object (optional)

     - returns: RequestBuilder<ArticleResource> 
     */
    public class func updateArticleWithRequestBuilder(id id: String, articleResource: ArticleResource? = nil) -> RequestBuilder<ArticleResource> {
        var path = "/content/articles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = articleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ArticleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an article template
     
     - parameter id: (path) The id of the template 
     - parameter articleTemplateResource: (body) The article template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateArticleTemplate(id id: String, articleTemplateResource: TemplateResource? = nil, completion: ((data: TemplateResource?, error: ErrorType?) -> Void)) {
        updateArticleTemplateWithRequestBuilder(id: id, articleTemplateResource: articleTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an article template
     - PUT /content/articles/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 0,
  "id" : "aeiou",
  "updated_date" : 9,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter articleTemplateResource: (body) The article template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    public class func updateArticleTemplateWithRequestBuilder(id id: String, articleTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/content/articles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = articleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
