//
// ContentCommentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContentCommentsAPI: APIBase {
    /**
     Add a new comment
     
     - parameter commentResource: (body) The comment to be added (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addComment(commentResource commentResource: CommentResource? = nil, completion: ((data: CommentResource?, error: ErrorType?) -> Void)) {
        addCommentWithRequestBuilder(commentResource: commentResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new comment
     - POST /comments
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "summary" : "aeiou",
  "context" : "aeiou",
  "context_id" : 3,
  "created_date" : 3,
  "id" : 2,
  "updated_date" : 1,
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 9,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "content" : "aeiou"
}}]
     
     - parameter commentResource: (body) The comment to be added (optional)

     - returns: RequestBuilder<CommentResource> 
     */
    public class func addCommentWithRequestBuilder(commentResource commentResource: CommentResource? = nil) -> RequestBuilder<CommentResource> {
        let path = "/comments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = commentResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a comment
     
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteComment(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a comment
     - DELETE /comments/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCommentWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/comments/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Return a comment
     
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getComment(id id: Int64, completion: ((data: CommentResource?, error: ErrorType?) -> Void)) {
        getCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Return a comment
     - GET /comments/{id}
     - examples: [{contentType=application/json, example={
  "summary" : "aeiou",
  "context" : "aeiou",
  "context_id" : 5,
  "created_date" : 4,
  "id" : 5,
  "updated_date" : 9,
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 6,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "content" : "aeiou"
}}]
     
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<CommentResource> 
     */
    public class func getCommentWithRequestBuilder(id id: Int64) -> RequestBuilder<CommentResource> {
        var path = "/comments/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a page of comments
     
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getComments(context context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceCommentResource?, error: ErrorType?) -> Void)) {
        getCommentsWithRequestBuilder(context: context, contextId: contextId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of comments
     - GET /comments
     - examples: [{contentType=application/json, example={
  "number" : 8,
  "last" : true,
  "size" : 0,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 9,
  "content" : [ {
    "summary" : "aeiou",
    "context" : "aeiou",
    "context_id" : 9,
    "created_date" : 3,
    "id" : 4,
    "updated_date" : 0,
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 9,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "content" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceCommentResource> 
     */
    public class func getCommentsWithRequestBuilder(context context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceCommentResource> {
        let path = "/comments"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "context": context,
            "context_id": contextId.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceCommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search the comment index
     
     - parameter query: (body) The search query (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func searchComments(query query: AnyObject? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: CommentSearch?, error: ErrorType?) -> Void)) {
        searchCommentsWithRequestBuilder(query: query, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search the comment index
     - POST /comments/search
     - The body is an ElasticSearch query json. Please see their <a href='https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html'>documentation</a> for details on the format and search options
     - examples: [{contentType=application/json, example={
  "owner_id" : 1,
  "owner_username" : "aeiou",
  "context" : "aeiou",
  "context_id" : 3,
  "id" : 6,
  "content" : "aeiou"
}}]
     
     - parameter query: (body) The search query (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<CommentSearch> 
     */
    public class func searchCommentsWithRequestBuilder(query query: AnyObject? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<CommentSearch> {
        let path = "/comments/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentSearch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a comment
     
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateComment(id id: Int64, content: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateCommentWithRequestBuilder(id: id, content: content).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a comment
     - PUT /comments/{id}/content
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateCommentWithRequestBuilder(id id: Int64, content: String? = nil) -> RequestBuilder<Void> {
        var path = "/comments/{id}/content"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = content?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
