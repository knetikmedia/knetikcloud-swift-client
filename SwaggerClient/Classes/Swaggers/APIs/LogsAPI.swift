//
// LogsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class LogsAPI: APIBase {
    /**
     Add a new user log entry
     
     - parameter logEntry: (body) The user log entry to be added (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addUserLogUsingPOST(logEntry logEntry: UserActionLog? = nil, completion: ((error: ErrorType?) -> Void)) {
        addUserLogUsingPOSTWithRequestBuilder(logEntry: logEntry).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a new user log entry
     - POST /audit/logs
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter logEntry: (body) The user log entry to be added (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addUserLogUsingPOSTWithRequestBuilder(logEntry logEntry: UserActionLog? = nil) -> RequestBuilder<Void> {
        let path = "/audit/logs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = logEntry?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an existing BRE event log entry by id
     
     - parameter id: (path) The BRE event log entry id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEventLogUsingGET(id id: String, completion: ((data: BreEventLog?, error: ErrorType?) -> Void)) {
        getEventLogUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an existing BRE event log entry by id
     - GET /bre/logs/event-log/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The BRE event log entry id 

     - returns: RequestBuilder<BreEventLog> 
     */
    public class func getEventLogUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<BreEventLog> {
        var path = "/bre/logs/event-log/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BreEventLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a list of BRE event log entries
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEventName: (query) Filter event logs by event name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEventsLogsUsingGET(filterStartDate filterStartDate: String? = nil, filterEventName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageBreEventLog?, error: ErrorType?) -> Void)) {
        getEventsLogsUsingGETWithRequestBuilder(filterStartDate: filterStartDate, filterEventName: filterEventName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a list of BRE event log entries
     - GET /bre/logs/event-log
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEventName: (query) Filter event logs by event name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageBreEventLog> 
     */
    public class func getEventsLogsUsingGETWithRequestBuilder(filterStartDate filterStartDate: String? = nil, filterEventName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageBreEventLog> {
        let path = "/bre/logs/event-log"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_start_date": filterStartDate,
            "filter_event_name": filterEventName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageBreEventLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an existing forward log entry by id
     
     - parameter id: (path) The forward log entry id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getForwardLogUsingGET(id id: String, completion: ((data: ForwardLog?, error: ErrorType?) -> Void)) {
        getForwardLogUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an existing forward log entry by id
     - GET /bre/logs/forward-log/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The forward log entry id 

     - returns: RequestBuilder<ForwardLog> 
     */
    public class func getForwardLogUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<ForwardLog> {
        var path = "/bre/logs/forward-log/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ForwardLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a list of forward log entries
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEndDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterStatusCode: (query) Filter forward logs by http status code (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getForwardLogsUsingGET(filterStartDate filterStartDate: String? = nil, filterEndDate: String? = nil, filterStatusCode: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageForwardLog?, error: ErrorType?) -> Void)) {
        getForwardLogsUsingGETWithRequestBuilder(filterStartDate: filterStartDate, filterEndDate: filterEndDate, filterStatusCode: filterStatusCode, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a list of forward log entries
     - GET /bre/logs/forward-log
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEndDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterStatusCode: (query) Filter forward logs by http status code (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageForwardLog> 
     */
    public class func getForwardLogsUsingGETWithRequestBuilder(filterStartDate filterStartDate: String? = nil, filterEndDate: String? = nil, filterStatusCode: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageForwardLog> {
        let path = "/bre/logs/forward-log"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_start_date": filterStartDate,
            "filter_end_date": filterEndDate,
            "filter_status_code": filterStatusCode?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageForwardLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a user log entry by id
     
     - parameter id: (path) The user log entry id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserLogsUsingGET(id id: String, completion: ((data: UserActionLog?, error: ErrorType?) -> Void)) {
        getUserLogsUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a user log entry by id
     - GET /audit/logs/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The user log entry id 

     - returns: RequestBuilder<UserActionLog> 
     */
    public class func getUserLogsUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<UserActionLog> {
        var path = "/audit/logs/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserActionLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a page of user logs entries
     
     - parameter filterUser: (query) Filter for actions taken by a specific user by id (optional)
     - parameter filterActionName: (query) Filter for actions of a specific name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserLogsUsingGET1(filterUser filterUser: Int32? = nil, filterActionName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageUserActionLog?, error: ErrorType?) -> Void)) {
        getUserLogsUsingGET1WithRequestBuilder(filterUser: filterUser, filterActionName: filterActionName, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of user logs entries
     - GET /audit/logs
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter filterUser: (query) Filter for actions taken by a specific user by id (optional)
     - parameter filterActionName: (query) Filter for actions of a specific name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserActionLog> 
     */
    public class func getUserLogsUsingGET1WithRequestBuilder(filterUser filterUser: Int32? = nil, filterActionName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserActionLog> {
        let path = "/audit/logs"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_user": filterUser?.encodeToJSON(),
            "filter_action_name": filterActionName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserActionLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
