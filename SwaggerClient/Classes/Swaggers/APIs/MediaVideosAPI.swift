//
// MediaVideosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MediaVideosAPI: APIBase {
    /**
     Add a new video comment
     
     - parameter videoId: (path) The video id  
     - parameter commentResource: (body) The comment object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCommentUsingPOST1(videoId videoId: Int32, commentResource: CommentResource? = nil, completion: ((data: CommentResource?, error: ErrorType?) -> Void)) {
        addCommentUsingPOST1WithRequestBuilder(videoId: videoId, commentResource: commentResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new video comment
     - POST /media/videos/{videoId}/comments
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "summary" : "aeiou",
  "context" : "aeiou",
  "context_id" : 123,
  "created_date" : 123456789,
  "id" : 123456789,
  "updated_date" : 123456789,
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 123,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "content" : "aeiou"
}}]
     
     - parameter videoId: (path) The video id  
     - parameter commentResource: (body) The comment object (optional)

     - returns: RequestBuilder<CommentResource> 
     */
    public class func addCommentUsingPOST1WithRequestBuilder(videoId videoId: Int32, commentResource: CommentResource? = nil) -> RequestBuilder<CommentResource> {
        var path = "/media/videos/{videoId}/comments"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = commentResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds a contributor to a video
     
     - parameter videoId: (path) The video id 
     - parameter contributionResource: (body) The contribution object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addContributorUsingPOST(videoId videoId: Int64, contributionResource: ContributionResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        addContributorUsingPOSTWithRequestBuilder(videoId: videoId, contributionResource: contributionResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Adds a contributor to a video
     - POST /media/videos/{videoId}/contributors
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter contributionResource: (body) The contribution object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addContributorUsingPOSTWithRequestBuilder(videoId videoId: Int64, contributionResource: ContributionResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/contributors"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = contributionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new Video disposition
     
     - parameter videoId: (path) The video id 
     - parameter dispositionResource: (body) The disposition object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addDispositionUsingPOST1(videoId videoId: Int32, dispositionResource: DispositionResource? = nil, completion: ((data: DispositionResource?, error: ErrorType?) -> Void)) {
        addDispositionUsingPOST1WithRequestBuilder(videoId: videoId, dispositionResource: dispositionResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new Video disposition
     - POST /media/videos/{videoId}/dispositions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "context" : "aeiou",
  "name" : "aeiou",
  "context_id" : "aeiou",
  "created_date" : 123456789,
  "id" : 123456789,
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 123,
    "display_name" : "aeiou",
    "username" : "aeiou"
  }
}}]
     
     - parameter videoId: (path) The video id 
     - parameter dispositionResource: (body) The disposition object (optional)

     - returns: RequestBuilder<DispositionResource> 
     */
    public class func addDispositionUsingPOST1WithRequestBuilder(videoId videoId: Int32, dispositionResource: DispositionResource? = nil) -> RequestBuilder<DispositionResource> {
        var path = "/media/videos/{videoId}/dispositions"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = dispositionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DispositionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new flag
     
     - parameter videoId: (path) The video id 
     - parameter reason: (body) The flag reason (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFlagUsingPOST(videoId videoId: Int64, reason: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        addFlagUsingPOSTWithRequestBuilder(videoId: videoId, reason: reason).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a new flag
     - POST /media/videos/{videoId}/moderation
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter reason: (body) The flag reason (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addFlagUsingPOSTWithRequestBuilder(videoId videoId: Int64, reason: String? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/moderation"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = reason?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds one or more existing videos as related to this one
     
     - parameter videoId: (path) The video id 
     - parameter videoRelationshipResource: (body) The video relationship object  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addRelatedUsingPOST(videoId videoId: Int64, videoRelationshipResource: VideoRelationshipResource? = nil, completion: ((data: VideoRelationshipResource?, error: ErrorType?) -> Void)) {
        addRelatedUsingPOSTWithRequestBuilder(videoId: videoId, videoRelationshipResource: videoRelationshipResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds one or more existing videos as related to this one
     - POST /media/videos/{videoId}/related
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "relationship_details" : "aeiou",
  "from" : {
    "name" : "aeiou",
    "id" : 123456789
  },
  "id" : 123456789,
  "to" : ""
}}]
     
     - parameter videoId: (path) The video id 
     - parameter videoRelationshipResource: (body) The video relationship object  (optional)

     - returns: RequestBuilder<VideoRelationshipResource> 
     */
    public class func addRelatedUsingPOSTWithRequestBuilder(videoId videoId: Int64, videoRelationshipResource: VideoRelationshipResource? = nil) -> RequestBuilder<VideoRelationshipResource> {
        var path = "/media/videos/{videoId}/related"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = videoRelationshipResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoRelationshipResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds a new video in the system
     
     - parameter videoResource: (body) The video object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVideoUsingPOST(videoResource videoResource: VideoResource? = nil, completion: ((data: VideoResource?, error: ErrorType?) -> Void)) {
        addVideoUsingPOSTWithRequestBuilder(videoResource: videoResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds a new video in the system
     - POST /media/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "authored" : 123456789,
  "short_description" : "aeiou",
  "extension" : "aeiou",
  "privacy" : "aeiou",
  "uploader" : "",
  "banned" : false,
  "embed" : "aeiou",
  "id" : 123456789,
  "views" : 123456789,
  "height" : 123,
  "thumbnail" : "aeiou",
  "comments" : [ {
    "summary" : "aeiou",
    "context" : "aeiou",
    "context_id" : 123,
    "created_date" : 123456789,
    "id" : 123456789,
    "updated_date" : 123456789,
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 123,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "content" : "aeiou"
  } ],
  "author" : {
    "name" : "aeiou",
    "id" : 123456789
  },
  "length" : 123,
  "active" : false,
  "long_description" : "aeiou",
  "published" : false,
  "priority" : 123,
  "tags" : [ "aeiou" ],
  "size" : 123456789,
  "mime_type" : "aeiou",
  "name" : "aeiou",
  "width" : 123,
  "location" : "aeiou",
  "contributors" : [ {
    "role" : "aeiou",
    "artist" : "",
    "media" : ""
  } ],
  "created_date" : 123456789,
  "updated_date" : 123456789,
  "category" : {
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter videoResource: (body) The video object (optional)

     - returns: RequestBuilder<VideoResource> 
     */
    public class func addVideoUsingPOSTWithRequestBuilder(videoResource videoResource: VideoResource? = nil) -> RequestBuilder<VideoResource> {
        let path = "/media/videos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = videoResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Adds a user to a video's whitelist
     
     - parameter id: (path) The video id 
     - parameter userId: (body) The user id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWhitelistUsingPOST(id id: Int64, userId: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        addWhitelistUsingPOSTWithRequestBuilder(id: id, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Adds a user to a video's whitelist
     - POST /media/videos/{id}/whitelist
     - Whitelisted users can view video regardless of privacy setting.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The video id 
     - parameter userId: (body) The user id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func addWhitelistUsingPOSTWithRequestBuilder(id id: Int64, userId: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}/whitelist"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userId?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video comment
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCommentUsingDELETE1(videoId videoId: Int64, id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteCommentUsingDELETE1WithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video comment
     - DELETE /media/videos/{videoId}/comments/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCommentUsingDELETE1WithRequestBuilder(videoId videoId: Int64, id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/comments/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video comment
     
     - parameter dispositionId: (path) The disposition id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteDispositionUsingDELETE1(dispositionId dispositionId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteDispositionUsingDELETE1WithRequestBuilder(dispositionId: dispositionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video comment
     - DELETE /media/videos/{videoId}/dispositions/{dispositionId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter dispositionId: (path) The disposition id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteDispositionUsingDELETE1WithRequestBuilder(dispositionId dispositionId: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/dispositions/{dispositionId}"
        path = path.stringByReplacingOccurrencesOfString("{disposition_id}", withString: "\(dispositionId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a flag
     
     - parameter videoId: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFlagUsingDELETE(videoId videoId: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteFlagUsingDELETEWithRequestBuilder(videoId: videoId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a flag
     - DELETE /media/videos/{videoId}/moderation
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFlagUsingDELETEWithRequestBuilder(videoId videoId: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/moderation"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a video's relationship
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The relationship id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRelationshipUsingDELETE1(videoId videoId: Int64, id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteRelationshipUsingDELETE1WithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a video's relationship
     - DELETE /media/videos/{videoId}/related/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The relationship id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteRelationshipUsingDELETE1WithRequestBuilder(videoId videoId: Int64, id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/related/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a video from the system if no resources are attached to it
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVideoUsingDELETE(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteVideoUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a video from the system if no resources are attached to it
     - DELETE /media/videos/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVideoUsingDELETEWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a page of comments for a video
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCommentsUsingGET1(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageCommentResource?, error: ErrorType?) -> Void)) {
        getCommentsUsingGET1WithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of comments for a video
     - GET /media/videos/{videoId}/comments
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "summary" : "aeiou",
    "context" : "aeiou",
    "context_id" : 123,
    "created_date" : 123456789,
    "id" : 123456789,
    "updated_date" : 123456789,
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 123,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "content" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageCommentResource> 
     */
    public class func getCommentsUsingGET1WithRequestBuilder(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageCommentResource> {
        var path = "/media/videos/{videoId}/comments"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageCommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a page of dispositions for a video
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDispositionsUsingGET1(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageDispositionResource?, error: ErrorType?) -> Void)) {
        getDispositionsUsingGET1WithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of dispositions for a video
     - GET /media/videos/{videoId}/dispositions
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "context" : "aeiou",
    "name" : "aeiou",
    "context_id" : "aeiou",
    "created_date" : 123456789,
    "id" : 123456789,
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 123,
      "display_name" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageDispositionResource> 
     */
    public class func getDispositionsUsingGET1WithRequestBuilder(videoId videoId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageDispositionResource> {
        var path = "/media/videos/{videoId}/dispositions"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageDispositionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a page of video relationships
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRelatedUsingGET(videoId videoId: Int64, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageVideoRelationshipResource?, error: ErrorType?) -> Void)) {
        getRelatedUsingGETWithRequestBuilder(videoId: videoId, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a page of video relationships
     - GET /media/videos/{videoId}/related
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "relationship_details" : "aeiou",
    "from" : {
      "name" : "aeiou",
      "id" : 123456789
    },
    "id" : 123456789,
    "to" : ""
  } ],
  "first" : true
}}]
     
     - parameter videoId: (path) The video id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageVideoRelationshipResource> 
     */
    public class func getRelatedUsingGETWithRequestBuilder(videoId videoId: Int64, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageVideoRelationshipResource> {
        var path = "/media/videos/{videoId}/related"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageVideoRelationshipResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get user videos
     
     - parameter userId: (path) The user id 
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserVideosUsingGET(userId userId: Int32, excludeFlagged: Bool? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageVideoResource?, error: ErrorType?) -> Void)) {
        getUserVideosUsingGETWithRequestBuilder(userId: userId, excludeFlagged: excludeFlagged, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user videos
     - GET /users/{userId}/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "authored" : 123456789,
    "short_description" : "aeiou",
    "extension" : "aeiou",
    "privacy" : "aeiou",
    "uploader" : "",
    "banned" : false,
    "embed" : "aeiou",
    "id" : 123456789,
    "views" : 123456789,
    "height" : 123,
    "thumbnail" : "aeiou",
    "comments" : [ {
      "summary" : "aeiou",
      "context" : "aeiou",
      "context_id" : 123,
      "created_date" : 123456789,
      "id" : 123456789,
      "updated_date" : 123456789,
      "user" : {
        "avatar_url" : "aeiou",
        "id" : 123,
        "display_name" : "aeiou",
        "username" : "aeiou"
      },
      "content" : "aeiou"
    } ],
    "author" : {
      "name" : "aeiou",
      "id" : 123456789
    },
    "length" : 123,
    "active" : false,
    "long_description" : "aeiou",
    "published" : false,
    "priority" : 123,
    "tags" : [ "aeiou" ],
    "size" : 123456789,
    "mime_type" : "aeiou",
    "name" : "aeiou",
    "width" : 123,
    "location" : "aeiou",
    "contributors" : [ {
      "role" : "aeiou",
      "artist" : "",
      "media" : ""
    } ],
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "category" : {
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The user id 
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageVideoResource> 
     */
    public class func getUserVideosUsingGETWithRequestBuilder(userId userId: Int32, excludeFlagged: Bool? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageVideoResource> {
        var path = "/users/{userId}/videos"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "exclude_flagged": excludeFlagged,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageVideoResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Loads a specific video details
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoUsingGET(id id: Int64, completion: ((data: VideoResource?, error: ErrorType?) -> Void)) {
        getVideoUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Loads a specific video details
     - GET /media/videos/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "authored" : 123456789,
  "short_description" : "aeiou",
  "extension" : "aeiou",
  "privacy" : "aeiou",
  "uploader" : "",
  "banned" : false,
  "embed" : "aeiou",
  "id" : 123456789,
  "views" : 123456789,
  "height" : 123,
  "thumbnail" : "aeiou",
  "comments" : [ {
    "summary" : "aeiou",
    "context" : "aeiou",
    "context_id" : 123,
    "created_date" : 123456789,
    "id" : 123456789,
    "updated_date" : 123456789,
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 123,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "content" : "aeiou"
  } ],
  "author" : {
    "name" : "aeiou",
    "id" : 123456789
  },
  "length" : 123,
  "active" : false,
  "long_description" : "aeiou",
  "published" : false,
  "priority" : 123,
  "tags" : [ "aeiou" ],
  "size" : 123456789,
  "mime_type" : "aeiou",
  "name" : "aeiou",
  "width" : 123,
  "location" : "aeiou",
  "contributors" : [ {
    "role" : "aeiou",
    "artist" : "",
    "media" : ""
  } ],
  "created_date" : 123456789,
  "updated_date" : 123456789,
  "category" : {
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<VideoResource> 
     */
    public class func getVideoUsingGETWithRequestBuilder(id id: Int64) -> RequestBuilder<VideoResource> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a contributor from a video
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The contributor id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeContributorUsingDELETE(videoId videoId: Int64, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeContributorUsingDELETEWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a contributor from a video
     - DELETE /media/videos/{videoId}/contributors/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The contributor id 

     - returns: RequestBuilder<Void> 
     */
    public class func removeContributorUsingDELETEWithRequestBuilder(videoId videoId: Int64, id: Int32) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/contributors/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes a user from a video's whitelist
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeWhitelistUsingDELETE(videoId videoId: Int64, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeWhitelistUsingDELETEWithRequestBuilder(videoId: videoId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes a user from a video's whitelist
     - DELETE /media/videos/{videoId}/whitelist/{id}
     - Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The user id 

     - returns: RequestBuilder<Void> 
     */
    public class func removeWhitelistUsingDELETEWithRequestBuilder(videoId videoId: Int64, id: Int32) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/whitelist/{id}"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search videos using the documented filters
     
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter filterVideosByUploader: (query) Filter for videos by uploader id (optional)
     - parameter filterCategory: (query) Filter for videos from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for videos with specified tags (separated by comma) (optional)
     - parameter filterVideosByName: (query) Filter for videos which name *STARTS* with the given string (optional)
     - parameter filterVideosByContributor: (query) Filter for videos with contribution from the artist specified by ID (optional)
     - parameter filterVideosByAuthor: (query) Filter for videos with an artist as author specified by ID (optional)
     - parameter filterHasAuthor: (query) Filter for videos that have an author set if true, or that have no author if false (optional)
     - parameter filterHasUploader: (query) Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     - parameter filterRelatedTo: (query) Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     - parameter filterFriends: (query) Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     - parameter filterDisposition: (query) Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func searchVideosUsingGET(excludeFlagged excludeFlagged: Bool? = nil, filterVideosByUploader: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterVideosByName: String? = nil, filterVideosByContributor: String? = nil, filterVideosByAuthor: String? = nil, filterHasAuthor: Bool? = nil, filterHasUploader: Bool? = nil, filterRelatedTo: String? = nil, filterFriends: Bool? = nil, filterDisposition: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageVideoResource?, error: ErrorType?) -> Void)) {
        searchVideosUsingGETWithRequestBuilder(excludeFlagged: excludeFlagged, filterVideosByUploader: filterVideosByUploader, filterCategory: filterCategory, filterTagset: filterTagset, filterVideosByName: filterVideosByName, filterVideosByContributor: filterVideosByContributor, filterVideosByAuthor: filterVideosByAuthor, filterHasAuthor: filterHasAuthor, filterHasUploader: filterHasUploader, filterRelatedTo: filterRelatedTo, filterFriends: filterFriends, filterDisposition: filterDisposition, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search videos using the documented filters
     - GET /media/videos
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "authored" : 123456789,
    "short_description" : "aeiou",
    "extension" : "aeiou",
    "privacy" : "aeiou",
    "uploader" : "",
    "banned" : false,
    "embed" : "aeiou",
    "id" : 123456789,
    "views" : 123456789,
    "height" : 123,
    "thumbnail" : "aeiou",
    "comments" : [ {
      "summary" : "aeiou",
      "context" : "aeiou",
      "context_id" : 123,
      "created_date" : 123456789,
      "id" : 123456789,
      "updated_date" : 123456789,
      "user" : {
        "avatar_url" : "aeiou",
        "id" : 123,
        "display_name" : "aeiou",
        "username" : "aeiou"
      },
      "content" : "aeiou"
    } ],
    "author" : {
      "name" : "aeiou",
      "id" : 123456789
    },
    "length" : 123,
    "active" : false,
    "long_description" : "aeiou",
    "published" : false,
    "priority" : 123,
    "tags" : [ "aeiou" ],
    "size" : 123456789,
    "mime_type" : "aeiou",
    "name" : "aeiou",
    "width" : 123,
    "location" : "aeiou",
    "contributors" : [ {
      "role" : "aeiou",
      "artist" : "",
      "media" : ""
    } ],
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "category" : {
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "first" : true
}}]
     
     - parameter excludeFlagged: (query) Skip videos that have been flagged by the current user (optional, default to true)
     - parameter filterVideosByUploader: (query) Filter for videos by uploader id (optional)
     - parameter filterCategory: (query) Filter for videos from a specific category by id (optional)
     - parameter filterTagset: (query) Filter for videos with specified tags (separated by comma) (optional)
     - parameter filterVideosByName: (query) Filter for videos which name *STARTS* with the given string (optional)
     - parameter filterVideosByContributor: (query) Filter for videos with contribution from the artist specified by ID (optional)
     - parameter filterVideosByAuthor: (query) Filter for videos with an artist as author specified by ID (optional)
     - parameter filterHasAuthor: (query) Filter for videos that have an author set if true, or that have no author if false (optional)
     - parameter filterHasUploader: (query) Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     - parameter filterRelatedTo: (query) Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     - parameter filterFriends: (query) Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     - parameter filterDisposition: (query) Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)

     - returns: RequestBuilder<PageVideoResource> 
     */
    public class func searchVideosUsingGETWithRequestBuilder(excludeFlagged excludeFlagged: Bool? = nil, filterVideosByUploader: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterVideosByName: String? = nil, filterVideosByContributor: String? = nil, filterVideosByAuthor: String? = nil, filterHasAuthor: Bool? = nil, filterHasUploader: Bool? = nil, filterRelatedTo: String? = nil, filterFriends: Bool? = nil, filterDisposition: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageVideoResource> {
        let path = "/media/videos"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "exclude_flagged": excludeFlagged,
            "filter_videos_by_uploader": filterVideosByUploader,
            "filter_category": filterCategory,
            "filter_tagset": filterTagset,
            "filter_videos_by_name": filterVideosByName,
            "filter_videos_by_contributor": filterVideosByContributor,
            "filter_videos_by_author": filterVideosByAuthor,
            "filter_has_author": filterHasAuthor,
            "filter_has_uploader": filterHasUploader,
            "filter_related_to": filterRelatedTo,
            "filter_friends": filterFriends,
            "filter_disposition": filterDisposition,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageVideoResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update video comment content 
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCommentUsingPUT1(videoId videoId: Int64, id: Int64, content: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateCommentUsingPUT1WithRequestBuilder(videoId: videoId, id: id, content: content).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update video comment content 
     - PUT /media/videos/{videoId}/comments/{id}/content
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateCommentUsingPUT1WithRequestBuilder(videoId videoId: Int64, id: Int64, content: String? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/comments/{id}/content"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = content?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a video's relationship details
     
     - parameter videoId: (path) The video id 
     - parameter relationshipId: (path) The relationship id 
     - parameter details: (body) The video relationship details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateRelationshipUsingPUT1(videoId videoId: Int64, relationshipId: Int64, details: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateRelationshipUsingPUT1WithRequestBuilder(videoId: videoId, relationshipId: relationshipId, details: details).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a video's relationship details
     - PUT /media/videos/{videoId}/related/{id}/relationship_details
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter videoId: (path) The video id 
     - parameter relationshipId: (path) The relationship id 
     - parameter details: (body) The video relationship details (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateRelationshipUsingPUT1WithRequestBuilder(videoId videoId: Int64, relationshipId: Int64, details: String? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{videoId}/related/{id}/relationship_details"
        path = path.stringByReplacingOccurrencesOfString("{video_id}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{relationship_id}", withString: "\(relationshipId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = details?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Modifies a video's details
     
     - parameter id: (path) The video id 
     - parameter videoResource: (body) The video object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVideoUsingPUT(id id: Int64, videoResource: VideoResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateVideoUsingPUTWithRequestBuilder(id: id, videoResource: videoResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Modifies a video's details
     - PUT /media/videos/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The video id 
     - parameter videoResource: (body) The video object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateVideoUsingPUTWithRequestBuilder(id id: Int64, videoResource: VideoResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = videoResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Increment a video's view count
     
     - parameter id: (path) The video id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func viewVideoUsingPOST(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        viewVideoUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Increment a video's view count
     - POST /media/videos/{id}/views
     
     - parameter id: (path) The video id 

     - returns: RequestBuilder<Void> 
     */
    public class func viewVideoUsingPOSTWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/media/videos/{id}/views"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
