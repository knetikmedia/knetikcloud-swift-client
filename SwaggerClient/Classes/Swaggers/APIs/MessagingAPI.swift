//
// MessagingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MessagingAPI: APIBase {
    /**
     Send a raw email to one or more users
     
     - parameter rawEmailResource: (body) The new raw email to be sent (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendRawEmailUsingPOST(rawEmailResource rawEmailResource: RawEmailResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        sendRawEmailUsingPOSTWithRequestBuilder(rawEmailResource: rawEmailResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send a raw email to one or more users
     - POST /messaging/raw-email
     
     - parameter rawEmailResource: (body) The new raw email to be sent (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func sendRawEmailUsingPOSTWithRequestBuilder(rawEmailResource rawEmailResource: RawEmailResource? = nil) -> RequestBuilder<Void> {
        let path = "/messaging/raw-email"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rawEmailResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send a raw SMS
     
     - parameter rawSMSResource: (body) The new raw SMS to be sent (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendRawSMSUsingPOST(rawSMSResource rawSMSResource: RawSMSResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        sendRawSMSUsingPOSTWithRequestBuilder(rawSMSResource: rawSMSResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send a raw SMS
     - POST /messaging/raw-sms
     - Sends a raw SMS text message to one or more users. User's without registered mobile numbers will be skipped.
     
     - parameter rawSMSResource: (body) The new raw SMS to be sent (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func sendRawSMSUsingPOSTWithRequestBuilder(rawSMSResource rawSMSResource: RawSMSResource? = nil) -> RequestBuilder<Void> {
        let path = "/messaging/raw-sms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rawSMSResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send a new templated SMS
     
     - parameter templateSMSResource: (body) The new template SMS to be sent (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendRawSMSUsingPOST1(templateSMSResource templateSMSResource: TemplateSMSResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        sendRawSMSUsingPOST1WithRequestBuilder(templateSMSResource: templateSMSResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send a new templated SMS
     - POST /messaging/templated-sms
     - Sends a templated SMS text message to one or more users. User's without registered mobile numbers will be skipped.
     
     - parameter templateSMSResource: (body) The new template SMS to be sent (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func sendRawSMSUsingPOST1WithRequestBuilder(templateSMSResource templateSMSResource: TemplateSMSResource? = nil) -> RequestBuilder<Void> {
        let path = "/messaging/templated-sms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = templateSMSResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send a templated email to one or more users
     
     - parameter messageResource: (body) The new template email to be sent (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendTemplateEmailUsingPOST(messageResource messageResource: TemplateEmailResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        sendTemplateEmailUsingPOSTWithRequestBuilder(messageResource: messageResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send a templated email to one or more users
     - POST /messaging/templated-email
     
     - parameter messageResource: (body) The new template email to be sent (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func sendTemplateEmailUsingPOSTWithRequestBuilder(messageResource messageResource: TemplateEmailResource? = nil) -> RequestBuilder<Void> {
        let path = "/messaging/templated-email"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = messageResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
