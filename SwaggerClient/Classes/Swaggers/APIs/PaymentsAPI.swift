//
// PaymentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PaymentsAPI: APIBase {
    /**
     Create a new payment method for a user
     
     - parameter userId: (path) ID of the user for whom the payment method is being created 
     - parameter paymentMethod: (body) Payment method being created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createPaymentMethodUsingPOST(userId userId: Int32, paymentMethod: PaymentMethodResource? = nil, completion: ((data: PaymentMethodResource?, error: ErrorType?) -> Void)) {
        createPaymentMethodUsingPOSTWithRequestBuilder(userId: userId, paymentMethod: paymentMethod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new payment method for a user
     - POST /users/{userId}/payment-methods
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter userId: (path) ID of the user for whom the payment method is being created 
     - parameter paymentMethod: (body) Payment method being created (optional)

     - returns: RequestBuilder<PaymentMethodResource> 
     */
    public class func createPaymentMethodUsingPOSTWithRequestBuilder(userId userId: Int32, paymentMethod: PaymentMethodResource? = nil) -> RequestBuilder<PaymentMethodResource> {
        var path = "/users/{userId}/payment-methods"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = paymentMethod?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PaymentMethodResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing payment method for a user
     
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePaymentMethodUsingDELETE(userId userId: Int32, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePaymentMethodUsingDELETEWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing payment method for a user
     - DELETE /users/{userId}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being deleted 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePaymentMethodUsingDELETEWithRequestBuilder(userId userId: Int32, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{userId}/payment-methods/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single payment method for a user
     
     - parameter userId: (path) ID of the user for whom the payment method is being retrieved 
     - parameter id: (path) ID of the payment method being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPaymentMethodUsingGET(userId userId: Int32, id: Int32, completion: ((data: PaymentMethodResource?, error: ErrorType?) -> Void)) {
        getPaymentMethodUsingGETWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single payment method for a user
     - GET /users/{userId}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter userId: (path) ID of the user for whom the payment method is being retrieved 
     - parameter id: (path) ID of the payment method being retrieved 

     - returns: RequestBuilder<PaymentMethodResource> 
     */
    public class func getPaymentMethodUsingGETWithRequestBuilder(userId userId: Int32, id: Int32) -> RequestBuilder<PaymentMethodResource> {
        var path = "/users/{userId}/payment-methods/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PaymentMethodResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get all payment methods for a user
     
     - parameter userId: (path) ID of the user for whom the payment methods are being retrieved 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPaymentMethodsUsingGET(userId userId: Int32, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: [PaymentMethodResource]?, error: ErrorType?) -> Void)) {
        getPaymentMethodsUsingGETWithRequestBuilder(userId: userId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all payment methods for a user
     - GET /users/{userId}/payment-methods
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter userId: (path) ID of the user for whom the payment methods are being retrieved 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<[PaymentMethodResource]> 
     */
    public class func getPaymentMethodsUsingGETWithRequestBuilder(userId userId: Int32, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<[PaymentMethodResource]> {
        var path = "/users/{userId}/payment-methods"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PaymentMethodResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Authorize payment of an invoice for later capture
     
     - parameter request: (body) Payment authorization request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func paymentAuthorizationUsingPOST(request request: PaymentAuthorizationResource? = nil, completion: ((data: PaymentAuthorizationResource?, error: ErrorType?) -> Void)) {
        paymentAuthorizationUsingPOSTWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Authorize payment of an invoice for later capture
     - POST /payment/authorizations
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter request: (body) Payment authorization request (optional)

     - returns: RequestBuilder<PaymentAuthorizationResource> 
     */
    public class func paymentAuthorizationUsingPOSTWithRequestBuilder(request request: PaymentAuthorizationResource? = nil) -> RequestBuilder<PaymentAuthorizationResource> {
        let path = "/payment/authorizations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PaymentAuthorizationResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Capture an existing invoice payment authorization
     
     - parameter id: (path) ID of the payment authorization to capture 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func paymentCaptureUsingPOST(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        paymentCaptureUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Capture an existing invoice payment authorization
     - POST /payment/authorizations/{id}/capture
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) ID of the payment authorization to capture 

     - returns: RequestBuilder<Void> 
     */
    public class func paymentCaptureUsingPOSTWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/payment/authorizations/{id}/capture"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an existing payment method for a user
     
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being updated 
     - parameter paymentMethod: (body) The updated payment method data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePaymentMethodUsingPUT(userId userId: Int32, id: Int32, paymentMethod: PaymentMethodResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updatePaymentMethodUsingPUTWithRequestBuilder(userId: userId, id: id, paymentMethod: paymentMethod).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an existing payment method for a user
     - PUT /users/{userId}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being updated 
     - parameter paymentMethod: (body) The updated payment method data (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updatePaymentMethodUsingPUTWithRequestBuilder(userId userId: Int32, id: Int32, paymentMethod: PaymentMethodResource? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/payment-methods/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = paymentMethod?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
