//
// ReportingRevenueAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ReportingRevenueAPI: APIBase {
    /**
     Get item revenue info
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemRevenue(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, completion: ((data: RevenueReportResource?, error: ErrorType?) -> Void)) {
        getItemRevenueWithRequestBuilder(currencyCode: currencyCode, startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get item revenue info
     - GET /reporting/revenue/item-sales/{currencyCode}
     - Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "sales_average" : 7.109901392831627,
  "sale_count" : 6,
  "sales_total" : 7.9336291609262135,
  "customer_count" : 8
}}]
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)

     - returns: RequestBuilder<RevenueReportResource> 
     */
    public class func getItemRevenueWithRequestBuilder(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<RevenueReportResource> {
        var path = "/reporting/revenue/item-sales/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RevenueReportResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get refund revenue info
     
     - parameter currencyCode: (path) The code for a currency to get refund data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRefundRevenue(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, completion: ((data: RevenueReportResource?, error: ErrorType?) -> Void)) {
        getRefundRevenueWithRequestBuilder(currencyCode: currencyCode, startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get refund revenue info
     - GET /reporting/revenue/refunds/{currencyCode}
     - Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "sales_average" : 9.741981672229173,
  "sale_count" : 1,
  "sales_total" : 1.8248192010511277,
  "customer_count" : 7
}}]
     
     - parameter currencyCode: (path) The code for a currency to get refund data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)

     - returns: RequestBuilder<RevenueReportResource> 
     */
    public class func getRefundRevenueWithRequestBuilder(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<RevenueReportResource> {
        var path = "/reporting/revenue/refunds/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RevenueReportResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get revenue info by country
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRevenueByCountry(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceRevenueCountryReportResource?, error: ErrorType?) -> Void)) {
        getRevenueByCountryWithRequestBuilder(currencyCode: currencyCode, startDate: startDate, endDate: endDate, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get revenue info by country
     - GET /reporting/revenue/countries/{currencyCode}
     - Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 8,
  "total_elements" : 8,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 0,
  "content" : [ {
    "volume" : 5,
    "country" : "aeiou",
    "revenue" : 5.557242581239371
  } ],
  "first" : true
}}]
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceRevenueCountryReportResource> 
     */
    public class func getRevenueByCountryWithRequestBuilder(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceRevenueCountryReportResource> {
        var path = "/reporting/revenue/countries/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceRevenueCountryReportResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get revenue info by item
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRevenueByItem(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageResourceRevenueProductReportResource?, error: ErrorType?) -> Void)) {
        getRevenueByItemWithRequestBuilder(currencyCode: currencyCode, startDate: startDate, endDate: endDate, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get revenue info by item
     - GET /reporting/revenue/products/{currencyCode}
     - Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 2,
  "last" : true,
  "size" : 9,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 1,
  "number_of_elements" : 3,
  "content" : [ {
    "volume" : 4,
    "revenue" : 6.892519767665578,
    "item_id" : 8,
    "item_name" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceRevenueProductReportResource> 
     */
    public class func getRevenueByItemWithRequestBuilder(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceRevenueProductReportResource> {
        var path = "/reporting/revenue/products/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceRevenueProductReportResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get subscription revenue info
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscriptionRevenue(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil, completion: ((data: RevenueReportResource?, error: ErrorType?) -> Void)) {
        getSubscriptionRevenueWithRequestBuilder(currencyCode: currencyCode, startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get subscription revenue info
     - GET /reporting/revenue/subscription-sales/{currencyCode}
     - Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "sales_average" : 0.8530639078950442,
  "sale_count" : 6,
  "sales_total" : 8.188918773445641,
  "customer_count" : 5
}}]
     
     - parameter currencyCode: (path) The code for a currency to get sales data for 
     - parameter startDate: (query) The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
     - parameter endDate: (query) The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)

     - returns: RequestBuilder<RevenueReportResource> 
     */
    public class func getSubscriptionRevenueWithRequestBuilder(currencyCode currencyCode: String, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<RevenueReportResource> {
        var path = "/reporting/revenue/subscription-sales/{currencyCode}"
        path = path.stringByReplacingOccurrencesOfString("{currency_code}", withString: "\(currencyCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start_date": startDate?.encodeToJSON(),
            "end_date": endDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RevenueReportResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
