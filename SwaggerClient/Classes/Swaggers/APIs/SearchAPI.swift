//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SearchAPI: APIBase {
    /**
     Add a new object to an index
     
     - parameter type: (path) The index type 
     - parameter id: (path) The ID of the object 
     - parameter object: (body) The object to add (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func externalAddUsingPOST(type type: String, id: String, object: AnyObject? = nil, completion: ((error: ErrorType?) -> Void)) {
        externalAddUsingPOSTWithRequestBuilder(type: type, id: id, object: object).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a new object to an index
     - POST /search/index/{type}/{id}
     - Mainly intended for internal use.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter type: (path) The index type 
     - parameter id: (path) The ID of the object 
     - parameter object: (body) The object to add (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func externalAddUsingPOSTWithRequestBuilder(type type: String, id: String, object: AnyObject? = nil) -> RequestBuilder<Void> {
        var path = "/search/index/{type}/{id}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = object?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete all objects in an index
     
     - parameter type: (path) The index type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func externalDeleteAllUsingDELETE(type type: String, completion: ((error: ErrorType?) -> Void)) {
        externalDeleteAllUsingDELETEWithRequestBuilder(type: type).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete all objects in an index
     - DELETE /search/index/{type}
     - Mainly intended for internal use
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter type: (path) The index type 

     - returns: RequestBuilder<Void> 
     */
    public class func externalDeleteAllUsingDELETEWithRequestBuilder(type type: String) -> RequestBuilder<Void> {
        var path = "/search/index/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an object
     
     - parameter type: (path) The index type 
     - parameter id: (path) The ID of the object to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func externalDeleteUsingDELETE(type type: String, id: String, completion: ((error: ErrorType?) -> Void)) {
        externalDeleteUsingDELETEWithRequestBuilder(type: type, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an object
     - DELETE /search/index/{type}/{id}
     - Mainly intended for internal use. Requires SEARCH_ADMIN.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter type: (path) The index type 
     - parameter id: (path) The ID of the object to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func externalDeleteUsingDELETEWithRequestBuilder(type type: String, id: String) -> RequestBuilder<Void> {
        var path = "/search/index/{type}/{id}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Register reference mappings
     
     - parameter mappings: (body) The mappings to add (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func externalRegisterUsingPOST(mappings mappings: [SearchReferenceMapping]? = nil, completion: ((error: ErrorType?) -> Void)) {
        externalRegisterUsingPOSTWithRequestBuilder(mappings: mappings).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Register reference mappings
     - POST /search/mappings
     - Add a new type mapping to connect data from one index to another, or discover an exsting one. Mainly intended for internal use.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter mappings: (body) The mappings to add (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func externalRegisterUsingPOSTWithRequestBuilder(mappings mappings: [SearchReferenceMapping]? = nil) -> RequestBuilder<Void> {
        let path = "/search/mappings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = mappings?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search an index
     
     - parameter type: (path) The index type 
     - parameter query: (body) The query to be used for the search (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func searchUsingPOST(type type: String, query: AnyObject? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageMapstringobject?, error: ErrorType?) -> Void)) {
        searchUsingPOSTWithRequestBuilder(type: type, query: query, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search an index
     - POST /search/index/{type}
     - The body is an ElasticSearch query in JSON format. Please see their <a href='https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html'>documentation</a> for details on the format and search options. The searchable object's format depends on on the type. See individual search endpoints on other resources for details on their format.
     - examples: [{output=none}]
     
     - parameter type: (path) The index type 
     - parameter query: (body) The query to be used for the search (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageMapstringobject> 
     */
    public class func searchUsingPOSTWithRequestBuilder(type type: String, query: AnyObject? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageMapstringobject> {
        var path = "/search/index/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageMapstringobject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
