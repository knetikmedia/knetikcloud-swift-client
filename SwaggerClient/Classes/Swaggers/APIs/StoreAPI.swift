//
// StoreAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StoreAPI: APIBase {
    /**
     Create an item template
     
     - parameter itemTemplateResource: (body) The new item template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createItemTemplateUsingPOST(itemTemplateResource itemTemplateResource: StoreItemTemplateResource? = nil, completion: ((data: StoreItemTemplateResource?, error: ErrorType?) -> Void)) {
        createItemTemplateUsingPOSTWithRequestBuilder(itemTemplateResource: itemTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an item template
     - POST /store/items/templates
     - Item Templates define a type of item and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter itemTemplateResource: (body) The new item template (optional)

     - returns: RequestBuilder<StoreItemTemplateResource> 
     */
    public class func createItemTemplateUsingPOSTWithRequestBuilder(itemTemplateResource itemTemplateResource: StoreItemTemplateResource? = nil) -> RequestBuilder<StoreItemTemplateResource> {
        let path = "/store/items/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = itemTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StoreItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a store item
     
     - parameter storeItem: (body) The store item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createStoreItemExternalUsingPOST(storeItem storeItem: StoreItem? = nil, completion: ((data: StoreItem?, error: ErrorType?) -> Void)) {
        createStoreItemExternalUsingPOSTWithRequestBuilder(storeItem: storeItem).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a store item
     - POST /store/items
     - SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \"parameters\" field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:<br /> {..., parameters: [[{item: 1, skus: [\"SKU-1\"]}]]}<br /> If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter storeItem: (body) The store item object (optional)

     - returns: RequestBuilder<StoreItem> 
     */
    public class func createStoreItemExternalUsingPOSTWithRequestBuilder(storeItem storeItem: StoreItem? = nil) -> RequestBuilder<StoreItem> {
        let path = "/store/items"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = storeItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StoreItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an item template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemTemplateUsingDELETE(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteItemTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an item template
     - DELETE /store/items/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemTemplateUsingDELETEWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/store/items/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a store item
     
     - parameter id: (path) The id of the item 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStoreItemUsingDELETE1(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteStoreItemUsingDELETE1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a store item
     - DELETE /store/items/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the item 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStoreItemUsingDELETE1WithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/store/items/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single item template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemTemplateUsingGET(id id: String, completion: ((data: StoreItemTemplateResource?, error: ErrorType?) -> Void)) {
        getItemTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single item template
     - GET /store/items/templates/{id}
     - Item Templates define a type of item and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<StoreItemTemplateResource> 
     */
    public class func getItemTemplateUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<StoreItemTemplateResource> {
        var path = "/store/items/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StoreItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search item templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemTemplatesUsingGET(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageStoreItemTemplateResource?, error: ErrorType?) -> Void)) {
        getItemTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search item templates
     - GET /store/items/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageStoreItemTemplateResource> 
     */
    public class func getItemTemplatesUsingGETWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageStoreItemTemplateResource> {
        let path = "/store/items/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageStoreItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single store item
     
     - parameter id: (path) The id of the item 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStoreItemUsingGET1(id id: Int32, completion: ((data: StoreItem?, error: ErrorType?) -> Void)) {
        getStoreItemUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single store item
     - GET /store/items/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the item 

     - returns: RequestBuilder<StoreItem> 
     */
    public class func getStoreItemUsingGET1WithRequestBuilder(id id: Int32) -> RequestBuilder<StoreItem> {
        var path = "/store/items/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StoreItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search store items
     
     - parameter filterNameSearch: (query) Filter for items whose name starts with a given string. (optional)
     - parameter filterUniqueKey: (query) Filter for items whose unique_key is a given string. (optional)
     - parameter filterPublished: (query) Filter for skus that have been published. (optional)
     - parameter filterDisplayable: (query) Filter for items that are displayable. (optional)
     - parameter filterStart: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterEnd: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStopDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterSku: (query) Filter for skus whose name starts with a given string. (optional)
     - parameter filterPrice: (query) A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterTag: (query) A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags. (optional)
     - parameter filterItemsByType: (query) Filter for item type based on its type hint. (optional)
     - parameter filterBundledSkus: (query) Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39; (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStoreItemsUsingGET(filterNameSearch filterNameSearch: String? = nil, filterUniqueKey: String? = nil, filterPublished: Bool? = nil, filterDisplayable: Bool? = nil, filterStart: String? = nil, filterEnd: String? = nil, filterStartDate: String? = nil, filterStopDate: String? = nil, filterSku: String? = nil, filterPrice: String? = nil, filterTag: String? = nil, filterItemsByType: String? = nil, filterBundledSkus: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageStoreItem?, error: ErrorType?) -> Void)) {
        getStoreItemsUsingGETWithRequestBuilder(filterNameSearch: filterNameSearch, filterUniqueKey: filterUniqueKey, filterPublished: filterPublished, filterDisplayable: filterDisplayable, filterStart: filterStart, filterEnd: filterEnd, filterStartDate: filterStartDate, filterStopDate: filterStopDate, filterSku: filterSku, filterPrice: filterPrice, filterTag: filterTag, filterItemsByType: filterItemsByType, filterBundledSkus: filterBundledSkus, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search store items
     - GET /store/items
     - examples: [{output=none}]
     
     - parameter filterNameSearch: (query) Filter for items whose name starts with a given string. (optional)
     - parameter filterUniqueKey: (query) Filter for items whose unique_key is a given string. (optional)
     - parameter filterPublished: (query) Filter for skus that have been published. (optional)
     - parameter filterDisplayable: (query) Filter for items that are displayable. (optional)
     - parameter filterStart: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterEnd: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStopDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterSku: (query) Filter for skus whose name starts with a given string. (optional)
     - parameter filterPrice: (query) A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterTag: (query) A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags. (optional)
     - parameter filterItemsByType: (query) Filter for item type based on its type hint. (optional)
     - parameter filterBundledSkus: (query) Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39; (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageStoreItem> 
     */
    public class func getStoreItemsUsingGETWithRequestBuilder(filterNameSearch filterNameSearch: String? = nil, filterUniqueKey: String? = nil, filterPublished: Bool? = nil, filterDisplayable: Bool? = nil, filterStart: String? = nil, filterEnd: String? = nil, filterStartDate: String? = nil, filterStopDate: String? = nil, filterSku: String? = nil, filterPrice: String? = nil, filterTag: String? = nil, filterItemsByType: String? = nil, filterBundledSkus: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageStoreItem> {
        let path = "/store/items"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_name_search": filterNameSearch,
            "filter_unique_key": filterUniqueKey,
            "filter_published": filterPublished,
            "filter_displayable": filterDisplayable,
            "filter_start": filterStart,
            "filter_end": filterEnd,
            "filter_start_date": filterStartDate,
            "filter_stop_date": filterStopDate,
            "filter_sku": filterSku,
            "filter_price": filterPrice,
            "filter_tag": filterTag,
            "filter_items_by_type": filterItemsByType,
            "filter_bundled_skus": filterBundledSkus,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageStoreItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a listing of store items
     
     - parameter storeListRequest: (body) The store list request object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsingGET2(storeListRequest storeListRequest: StoreListRequest? = nil, completion: ((data: PageStoreItem?, error: ErrorType?) -> Void)) {
        getUsingGET2WithRequestBuilder(storeListRequest: storeListRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a listing of store items
     - GET /store
     - The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors.
     - examples: [{output=none}]
     
     - parameter storeListRequest: (body) The store list request object (optional)

     - returns: RequestBuilder<PageStoreItem> 
     */
    public class func getUsingGET2WithRequestBuilder(storeListRequest storeListRequest: StoreListRequest? = nil) -> RequestBuilder<PageStoreItem> {
        let path = "/store"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = storeListRequest?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageStoreItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an item template
     
     - parameter id: (path) The id of the template 
     - parameter itemTemplateResource: (body) The item template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemTemplateUsingPUT(id id: String, itemTemplateResource: StoreItemTemplateResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateItemTemplateUsingPUTWithRequestBuilder(id: id, itemTemplateResource: itemTemplateResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an item template
     - PUT /store/items/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter itemTemplateResource: (body) The item template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemTemplateUsingPUTWithRequestBuilder(id id: String, itemTemplateResource: StoreItemTemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/store/items/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = itemTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a store item
     
     - parameter id: (path) The id of the item 
     - parameter storeItem: (body) The store item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateStoreItemExternalUsingPUT(id id: Int32, storeItem: StoreItem? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateStoreItemExternalUsingPUTWithRequestBuilder(id: id, storeItem: storeItem).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a store item
     - PUT /store/items/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the item 
     - parameter storeItem: (body) The store item object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateStoreItemExternalUsingPUTWithRequestBuilder(id id: Int32, storeItem: StoreItem? = nil) -> RequestBuilder<Void> {
        var path = "/store/items/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = storeItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
