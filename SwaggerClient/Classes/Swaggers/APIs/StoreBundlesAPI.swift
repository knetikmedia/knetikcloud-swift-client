//
// StoreBundlesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StoreBundlesAPI: APIBase {
    /**
     Create a bundle item
     
     - parameter bundleItem: (body) The bundle item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createBundleItemUsingPOST(bundleItem bundleItem: BundleItem? = nil, completion: ((data: BundleItem?, error: ErrorType?) -> Void)) {
        createBundleItemUsingPOSTWithRequestBuilder(bundleItem: bundleItem).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a bundle item
     - POST /store/bundles
     - The SKU for the bundle itself must be unique and there can only be one SKU.  Extra notes for price_override:  The price of all the items (multiplied by the quantity) must equal the price of the bundle.  With individual prices set, items will be processed individually and can be refunded as such.  However, if all prices are set to null, the price of the bundle will be used and will be treated as one item.
     - examples: [{output=none}]
     
     - parameter bundleItem: (body) The bundle item object (optional)

     - returns: RequestBuilder<BundleItem> 
     */
    public class func createBundleItemUsingPOSTWithRequestBuilder(bundleItem bundleItem: BundleItem? = nil) -> RequestBuilder<BundleItem> {
        let path = "/store/bundles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BundleItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a bundle template
     
     - parameter bundleTemplateResource: (body) The new bundle template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createBundleTemplateUsingPOST(bundleTemplateResource bundleTemplateResource: ItemTemplateResource? = nil, completion: ((data: ItemTemplateResource?, error: ErrorType?) -> Void)) {
        createBundleTemplateUsingPOSTWithRequestBuilder(bundleTemplateResource: bundleTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a bundle template
     - POST /store/bundles/templates
     - Bundle Templates define a type of bundle and the properties they have.
     - examples: [{output=none}]
     
     - parameter bundleTemplateResource: (body) The new bundle template (optional)

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    public class func createBundleTemplateUsingPOSTWithRequestBuilder(bundleTemplateResource bundleTemplateResource: ItemTemplateResource? = nil) -> RequestBuilder<ItemTemplateResource> {
        let path = "/store/bundles/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a bundle template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBundleTemplateUsingDELETE(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteBundleTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a bundle template
     - DELETE /store/bundles/templates/{id}
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBundleTemplateUsingDELETEWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStoreItemUsingDELETE(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteStoreItemUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a bundle item
     - DELETE /store/bundles/{id}
     
     - parameter id: (path) The id of the bundle 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStoreItemUsingDELETEWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single bundle template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBundleTemplateUsingGET(id id: String, completion: ((data: ItemTemplateResource?, error: ErrorType?) -> Void)) {
        getBundleTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single bundle template
     - GET /store/bundles/templates/{id}
     - Bundle Templates define a type of bundle and the properties they have.
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    public class func getBundleTemplateUsingGETWithRequestBuilder(id id: String) -> RequestBuilder<ItemTemplateResource> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search bundle templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBundleTemplatesUsingGET(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageItemTemplateResource?, error: ErrorType?) -> Void)) {
        getBundleTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search bundle templates
     - GET /store/bundles/templates
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageItemTemplateResource> 
     */
    public class func getBundleTemplatesUsingGETWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageItemTemplateResource> {
        let path = "/store/bundles/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStoreItemUsingGET(id id: Int32, completion: ((data: BundleItem?, error: ErrorType?) -> Void)) {
        getStoreItemUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single bundle item
     - GET /store/bundles/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the bundle 

     - returns: RequestBuilder<BundleItem> 
     */
    public class func getStoreItemUsingGETWithRequestBuilder(id id: Int32) -> RequestBuilder<BundleItem> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BundleItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter bundleItem: (body) The bundle item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBundleItemUsingPUT(id id: Int32, bundleItem: BundleItem? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateBundleItemUsingPUTWithRequestBuilder(id: id, bundleItem: bundleItem).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a bundle item
     - PUT /store/bundles/{id}
     
     - parameter id: (path) The id of the bundle 
     - parameter bundleItem: (body) The bundle item object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateBundleItemUsingPUTWithRequestBuilder(id id: Int32, bundleItem: BundleItem? = nil) -> RequestBuilder<Void> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a bundle template
     
     - parameter id: (path) The id of the template 
     - parameter bundleTemplateResource: (body) The bundle template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBundleTemplateUsingPUT(id id: String, bundleTemplateResource: ItemTemplateResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateBundleTemplateUsingPUTWithRequestBuilder(id: id, bundleTemplateResource: bundleTemplateResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a bundle template
     - PUT /store/bundles/templates/{id}
     
     - parameter id: (path) The id of the template 
     - parameter bundleTemplateResource: (body) The bundle template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateBundleTemplateUsingPUTWithRequestBuilder(id id: String, bundleTemplateResource: ItemTemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
