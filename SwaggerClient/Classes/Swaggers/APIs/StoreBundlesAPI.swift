//
// StoreBundlesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StoreBundlesAPI: APIBase {
    /**
     Create a bundle item
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter bundleItem: (body) The bundle item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createBundleItem(cascade cascade: Bool? = nil, bundleItem: BundleItem? = nil, completion: ((data: BundleItem?, error: ErrorType?) -> Void)) {
        createBundleItemWithRequestBuilder(cascade: cascade, bundleItem: bundleItem).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a bundle item
     - POST /store/bundles
     - The SKU for the bundle itself must be unique and there can only be one SKU.  Extra notes for price_override:  The price of all the items (multiplied by the quantity) must equal the price of the bundle.  With individual prices set, items will be processed individually and can be refunded as such.  However, if all prices are set to null, the price of the bundle will be used and will be treated as one item.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 2,
    "original_price" : 8.230973779238317,
    "description" : "aeiou",
    "stop_date" : 3,
    "published" : false,
    "inventory" : 0,
    "min_inventory_threshold" : 3,
    "currency_code" : "aeiou",
    "price" : 3.6624243403960333,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 3
  } ],
  "store_end" : 6,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "bundled_skus" : [ {
    "quantity" : 5,
    "price_override" : 8.618483949058644,
    "sku" : "aeiou"
  } ],
  "long_description" : "aeiou",
  "sort" : 1,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 6,
  "store_start" : 7,
  "vendor_id" : 9,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 1,
  "id" : 8,
  "updated_date" : 4,
  "category" : "aeiou"
}}]
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter bundleItem: (body) The bundle item object (optional)

     - returns: RequestBuilder<BundleItem> 
     */
    public class func createBundleItemWithRequestBuilder(cascade cascade: Bool? = nil, bundleItem: BundleItem? = nil) -> RequestBuilder<BundleItem> {
        let path = "/store/bundles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BundleItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a bundle template
     
     - parameter bundleTemplateResource: (body) The new bundle template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createBundleTemplate(bundleTemplateResource bundleTemplateResource: ItemTemplateResource? = nil, completion: ((data: ItemTemplateResource?, error: ErrorType?) -> Void)) {
        createBundleTemplateWithRequestBuilder(bundleTemplateResource: bundleTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a bundle template
     - POST /store/bundles/templates
     - Bundle Templates define a type of bundle and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 8,
  "id" : "aeiou",
  "updated_date" : 2,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter bundleTemplateResource: (body) The new bundle template (optional)

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    public class func createBundleTemplateWithRequestBuilder(bundleTemplateResource bundleTemplateResource: ItemTemplateResource? = nil) -> RequestBuilder<ItemTemplateResource> {
        let path = "/store/bundles/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBundleItem(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteBundleItemWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a bundle item
     - DELETE /store/bundles/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the bundle 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBundleItemWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a bundle template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBundleTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteBundleTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a bundle template
     - DELETE /store/bundles/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBundleTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBundleItem(id id: Int32, completion: ((data: BundleItem?, error: ErrorType?) -> Void)) {
        getBundleItemWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single bundle item
     - GET /store/bundles/{id}
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 0,
    "original_price" : 7.7121122050299595,
    "description" : "aeiou",
    "stop_date" : 6,
    "published" : false,
    "inventory" : 7,
    "min_inventory_threshold" : 3,
    "currency_code" : "aeiou",
    "price" : 3.5492309079058018,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 0
  } ],
  "store_end" : 3,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "bundled_skus" : [ {
    "quantity" : 0,
    "price_override" : 1.6603753927454301,
    "sku" : "aeiou"
  } ],
  "long_description" : "aeiou",
  "sort" : 3,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 0,
  "store_start" : 4,
  "vendor_id" : 8,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 3,
  "id" : 5,
  "updated_date" : 7,
  "category" : "aeiou"
}}]
     
     - parameter id: (path) The id of the bundle 

     - returns: RequestBuilder<BundleItem> 
     */
    public class func getBundleItemWithRequestBuilder(id id: Int32) -> RequestBuilder<BundleItem> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BundleItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single bundle template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBundleTemplate(id id: String, completion: ((data: ItemTemplateResource?, error: ErrorType?) -> Void)) {
        getBundleTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single bundle template
     - GET /store/bundles/templates/{id}
     - Bundle Templates define a type of bundle and the properties they have.
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 5,
  "id" : "aeiou",
  "updated_date" : 6,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    public class func getBundleTemplateWithRequestBuilder(id id: String) -> RequestBuilder<ItemTemplateResource> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search bundle templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBundleTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceItemTemplateResource?, error: ErrorType?) -> Void)) {
        getBundleTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search bundle templates
     - GET /store/bundles/templates
     - examples: [{contentType=application/json, example={
  "number" : 3,
  "last" : true,
  "size" : 8,
  "total_elements" : 6,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 4,
  "number_of_elements" : 2,
  "content" : [ {
    "behaviors" : [ {
      "behavior" : {
        "type_hint" : "aeiou"
      },
      "modifiable" : false,
      "required" : false
    } ],
    "name" : "aeiou",
    "created_date" : 7,
    "id" : "aeiou",
    "updated_date" : 4,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceItemTemplateResource> 
     */
    public class func getBundleTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceItemTemplateResource> {
        let path = "/store/bundles/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a bundle item
     
     - parameter id: (path) The id of the bundle 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter bundleItem: (body) The bundle item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBundleItem(id id: Int32, cascade: Bool? = nil, bundleItem: BundleItem? = nil, completion: ((data: BundleItem?, error: ErrorType?) -> Void)) {
        updateBundleItemWithRequestBuilder(id: id, cascade: cascade, bundleItem: bundleItem).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a bundle item
     - PUT /store/bundles/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 7,
    "original_price" : 2.2696862337233736,
    "description" : "aeiou",
    "stop_date" : 8,
    "published" : false,
    "inventory" : 7,
    "min_inventory_threshold" : 3,
    "currency_code" : "aeiou",
    "price" : 7.83924546394738,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 9
  } ],
  "store_end" : 1,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "bundled_skus" : [ {
    "quantity" : 5,
    "price_override" : 2.5997595470854296,
    "sku" : "aeiou"
  } ],
  "long_description" : "aeiou",
  "sort" : 1,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 2,
  "store_start" : 6,
  "vendor_id" : 8,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 6,
  "id" : 3,
  "updated_date" : 5,
  "category" : "aeiou"
}}]
     
     - parameter id: (path) The id of the bundle 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter bundleItem: (body) The bundle item object (optional)

     - returns: RequestBuilder<BundleItem> 
     */
    public class func updateBundleItemWithRequestBuilder(id id: Int32, cascade: Bool? = nil, bundleItem: BundleItem? = nil) -> RequestBuilder<BundleItem> {
        var path = "/store/bundles/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BundleItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a bundle template
     
     - parameter id: (path) The id of the template 
     - parameter bundleTemplateResource: (body) The bundle template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBundleTemplate(id id: String, bundleTemplateResource: ItemTemplateResource? = nil, completion: ((data: ItemTemplateResource?, error: ErrorType?) -> Void)) {
        updateBundleTemplateWithRequestBuilder(id: id, bundleTemplateResource: bundleTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a bundle template
     - PUT /store/bundles/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 7,
  "id" : "aeiou",
  "updated_date" : 1,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter bundleTemplateResource: (body) The bundle template resource object (optional)

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    public class func updateBundleTemplateWithRequestBuilder(id id: String, bundleTemplateResource: ItemTemplateResource? = nil) -> RequestBuilder<ItemTemplateResource> {
        var path = "/store/bundles/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bundleTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
