//
// StoreSubscriptionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StoreSubscriptionsAPI: APIBase {
    /**
     Creates a subscription item and associated plans
     
     - parameter subscriptionResource: (body) The subscription to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createSubscription(subscriptionResource subscriptionResource: SubscriptionResource? = nil, completion: ((data: SubscriptionResource?, error: ErrorType?) -> Void)) {
        createSubscriptionWithRequestBuilder(subscriptionResource: subscriptionResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Creates a subscription item and associated plans
     - POST /subscriptions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "store_end" : 3,
  "unique_key" : "aeiou",
  "availability" : "all",
  "long_description" : "aeiou",
  "sort" : 3,
  "tags" : [ "aeiou" ],
  "consolidation_day_of_month" : 2,
  "plans" : [ {
    "end_date" : 5,
    "initial_fee" : 7.515156192676661,
    "late_payment_fee" : 4.431983825350435,
    "billing_cycle_length" : 1,
    "reactivation_sku" : "aeiou",
    "currency_code" : "aeiou",
    "recurring_fee" : 3.5606313456822,
    "min_cycles" : 2,
    "recurring_sku" : "aeiou",
    "max_bill_attempts" : 2,
    "additional_properties" : {
      "key" : ""
    },
    "id" : "aeiou",
    "locked" : false,
    "start_date" : 9,
    "initial_sku" : "aeiou",
    "published" : false,
    "grace_period" : 2,
    "consolidated" : false,
    "first_billing_cycle_unit" : "millisecond",
    "late_payment_sku" : "aeiou",
    "first_billing_cycle_length" : 5,
    "migrate_to_plan" : "aeiou",
    "name" : "aeiou",
    "billing_cycle_unit" : "millisecond",
    "reactivation_fee" : 7.177306843908106,
    "max_cycles" : 6
  } ],
  "store_start" : 0,
  "vendor_id" : 8,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 7,
  "id" : 7,
  "updated_date" : 7,
  "category" : "aeiou"
}}]
     
     - parameter subscriptionResource: (body) The subscription to be created (optional)

     - returns: RequestBuilder<SubscriptionResource> 
     */
    public class func createSubscriptionWithRequestBuilder(subscriptionResource subscriptionResource: SubscriptionResource? = nil) -> RequestBuilder<SubscriptionResource> {
        let path = "/subscriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = subscriptionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SubscriptionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a subscription template
     
     - parameter subscriptionTemplateResource: (body) The new subscription template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createSubscriptionTemplate(subscriptionTemplateResource subscriptionTemplateResource: SubscriptionTemplateResource? = nil, completion: ((data: SubscriptionTemplateResource?, error: ErrorType?) -> Void)) {
        createSubscriptionTemplateWithRequestBuilder(subscriptionTemplateResource: subscriptionTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a subscription template
     - POST /subscriptions/templates
     - Subscription Templates define a type of subscription and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "plan_template" : {
    "name" : "aeiou",
    "created_date" : 6,
    "id" : "aeiou",
    "updated_date" : 1,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  },
  "created_date" : 2,
  "id" : "aeiou",
  "updated_date" : 5,
  "properties" : [ "" ]
}}]
     
     - parameter subscriptionTemplateResource: (body) The new subscription template (optional)

     - returns: RequestBuilder<SubscriptionTemplateResource> 
     */
    public class func createSubscriptionTemplateWithRequestBuilder(subscriptionTemplateResource subscriptionTemplateResource: SubscriptionTemplateResource? = nil) -> RequestBuilder<SubscriptionTemplateResource> {
        let path = "/subscriptions/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = subscriptionTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SubscriptionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a subscription plan
     
     - parameter id: (path) The id of the subscription 
     - parameter planId: (path) The id of the plan 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscription(id id: Int32, planId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteSubscriptionWithRequestBuilder(id: id, planId: planId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a subscription plan
     - DELETE /subscriptions/{id}/plans/{planId}
     - Must not be locked or a migration target
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the subscription 
     - parameter planId: (path) The id of the plan 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubscriptionWithRequestBuilder(id id: Int32, planId: String) -> RequestBuilder<Void> {
        var path = "/subscriptions/{id}/plans/{planId}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{plan_id}", withString: "\(planId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a subscription template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscriptionTemplate(id id: String, cascade: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteSubscriptionTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a subscription template
     - DELETE /subscriptions/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubscriptionTemplateWithRequestBuilder(id id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/subscriptions/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Retrieve a single subscription item and associated plans
     
     - parameter id: (path) The id of the subscription 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscription(id id: Int32, completion: ((data: SubscriptionResource?, error: ErrorType?) -> Void)) {
        getSubscriptionWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieve a single subscription item and associated plans
     - GET /subscriptions/{id}
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "store_end" : 3,
  "unique_key" : "aeiou",
  "availability" : "all",
  "long_description" : "aeiou",
  "sort" : 6,
  "tags" : [ "aeiou" ],
  "consolidation_day_of_month" : 0,
  "plans" : [ {
    "end_date" : 9,
    "initial_fee" : 9.398538135609098,
    "late_payment_fee" : 3.9002844841511894,
    "billing_cycle_length" : 5,
    "reactivation_sku" : "aeiou",
    "currency_code" : "aeiou",
    "recurring_fee" : 3.0957478214233545,
    "min_cycles" : 1,
    "recurring_sku" : "aeiou",
    "max_bill_attempts" : 1,
    "additional_properties" : {
      "key" : ""
    },
    "id" : "aeiou",
    "locked" : false,
    "start_date" : 8,
    "initial_sku" : "aeiou",
    "published" : false,
    "grace_period" : 9,
    "consolidated" : false,
    "first_billing_cycle_unit" : "millisecond",
    "late_payment_sku" : "aeiou",
    "first_billing_cycle_length" : 8,
    "migrate_to_plan" : "aeiou",
    "name" : "aeiou",
    "billing_cycle_unit" : "millisecond",
    "reactivation_fee" : 8.666589409862162,
    "max_cycles" : 2
  } ],
  "store_start" : 9,
  "vendor_id" : 3,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 0,
  "id" : 3,
  "updated_date" : 3,
  "category" : "aeiou"
}}]
     
     - parameter id: (path) The id of the subscription 

     - returns: RequestBuilder<SubscriptionResource> 
     */
    public class func getSubscriptionWithRequestBuilder(id id: Int32) -> RequestBuilder<SubscriptionResource> {
        var path = "/subscriptions/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SubscriptionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single subscription template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscriptionTemplate(id id: String, completion: ((data: SubscriptionTemplateResource?, error: ErrorType?) -> Void)) {
        getSubscriptionTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single subscription template
     - GET /subscriptions/templates/{id}
     - Subscription Templates define a type of subscription and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "plan_template" : {
    "name" : "aeiou",
    "created_date" : 5,
    "id" : "aeiou",
    "updated_date" : 5,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  },
  "created_date" : 0,
  "id" : "aeiou",
  "updated_date" : 5,
  "properties" : [ "" ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<SubscriptionTemplateResource> 
     */
    public class func getSubscriptionTemplateWithRequestBuilder(id id: String) -> RequestBuilder<SubscriptionTemplateResource> {
        var path = "/subscriptions/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SubscriptionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search subscription templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscriptionTemplates(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceSubscriptionTemplateResource?, error: ErrorType?) -> Void)) {
        getSubscriptionTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search subscription templates
     - GET /subscriptions/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 7,
  "last" : true,
  "size" : 8,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 2,
  "content" : [ {
    "name" : "aeiou",
    "plan_template" : {
      "name" : "aeiou",
      "created_date" : 9,
      "id" : "aeiou",
      "updated_date" : 0,
      "properties" : [ {
        "name" : "aeiou",
        "type" : "aeiou",
        "required" : false
      } ]
    },
    "created_date" : 0,
    "id" : "aeiou",
    "updated_date" : 4,
    "properties" : [ "" ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceSubscriptionTemplateResource> 
     */
    public class func getSubscriptionTemplatesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceSubscriptionTemplateResource> {
        let path = "/subscriptions/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceSubscriptionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List available subscription items and associated plans
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscriptions(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceSubscriptionResource?, error: ErrorType?) -> Void)) {
        getSubscriptionsWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List available subscription items and associated plans
     - GET /subscriptions
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 4,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 7,
  "content" : [ {
    "geo_policy_type" : "whitelist",
    "template" : "aeiou",
    "short_description" : "aeiou",
    "geo_country_list" : [ "aeiou" ],
    "store_end" : 5,
    "unique_key" : "aeiou",
    "availability" : "all",
    "long_description" : "aeiou",
    "sort" : 2,
    "tags" : [ "aeiou" ],
    "consolidation_day_of_month" : 3,
    "plans" : [ {
      "end_date" : 3,
      "initial_fee" : 5.540605640638429,
      "late_payment_fee" : 0.8152414571009725,
      "billing_cycle_length" : 5,
      "reactivation_sku" : "aeiou",
      "currency_code" : "aeiou",
      "recurring_fee" : 7.522055342614373,
      "min_cycles" : 3,
      "recurring_sku" : "aeiou",
      "max_bill_attempts" : 9,
      "additional_properties" : {
        "key" : ""
      },
      "id" : "aeiou",
      "locked" : false,
      "start_date" : 0,
      "initial_sku" : "aeiou",
      "published" : false,
      "grace_period" : 9,
      "consolidated" : false,
      "first_billing_cycle_unit" : "millisecond",
      "late_payment_sku" : "aeiou",
      "first_billing_cycle_length" : 9,
      "migrate_to_plan" : "aeiou",
      "name" : "aeiou",
      "billing_cycle_unit" : "millisecond",
      "reactivation_fee" : 0.9270123329003621,
      "max_cycles" : 7
    } ],
    "store_start" : 5,
    "vendor_id" : 5,
    "name" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 0,
    "id" : 7,
    "updated_date" : 6,
    "category" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceSubscriptionResource> 
     */
    public class func getSubscriptionsWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceSubscriptionResource> {
        let path = "/subscriptions"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceSubscriptionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Processes subscriptions and charge dues
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func processSubscriptions(completion: ((error: ErrorType?) -> Void)) {
        processSubscriptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Processes subscriptions and charge dues
     - POST /subscriptions/process
     - OAuth:
       - type: oauth2
       - name: OAuth2

     - returns: RequestBuilder<Void> 
     */
    public class func processSubscriptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/subscriptions/process"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates a subscription item and associated plans
     
     - parameter id: (path) The id of the subscription 
     - parameter subscriptionResource: (body) The subscription resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubscription(id id: Int32, subscriptionResource: SubscriptionResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateSubscriptionWithRequestBuilder(id: id, subscriptionResource: subscriptionResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates a subscription item and associated plans
     - PUT /subscriptions/{id}
     - Will not remove plans left out
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the subscription 
     - parameter subscriptionResource: (body) The subscription resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateSubscriptionWithRequestBuilder(id id: Int32, subscriptionResource: SubscriptionResource? = nil) -> RequestBuilder<Void> {
        var path = "/subscriptions/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = subscriptionResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a subscription template
     
     - parameter id: (path) The id of the template 
     - parameter subscriptionTemplateResource: (body) The subscription template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubscriptionTemplate(id id: String, subscriptionTemplateResource: SubscriptionTemplateResource? = nil, completion: ((data: SubscriptionTemplateResource?, error: ErrorType?) -> Void)) {
        updateSubscriptionTemplateWithRequestBuilder(id: id, subscriptionTemplateResource: subscriptionTemplateResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a subscription template
     - PUT /subscriptions/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "plan_template" : {
    "name" : "aeiou",
    "created_date" : 0,
    "id" : "aeiou",
    "updated_date" : 1,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  },
  "created_date" : 2,
  "id" : "aeiou",
  "updated_date" : 0,
  "properties" : [ "" ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter subscriptionTemplateResource: (body) The subscription template resource object (optional)

     - returns: RequestBuilder<SubscriptionTemplateResource> 
     */
    public class func updateSubscriptionTemplateWithRequestBuilder(id id: String, subscriptionTemplateResource: SubscriptionTemplateResource? = nil) -> RequestBuilder<SubscriptionTemplateResource> {
        var path = "/subscriptions/templates/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = subscriptionTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SubscriptionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
