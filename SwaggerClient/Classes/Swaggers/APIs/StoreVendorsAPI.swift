//
// StoreVendorsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StoreVendorsAPI: APIBase {
    /**
     Create a vendor
     
     - parameter vendor: (body) The vendor (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createVendorUsingPOST(vendor vendor: VendorResource? = nil, completion: ((data: VendorResource?, error: ErrorType?) -> Void)) {
        createVendorUsingPOSTWithRequestBuilder(vendor: vendor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a vendor
     - POST /vendors
     - examples: [{output=none}]
     
     - parameter vendor: (body) The vendor (optional)

     - returns: RequestBuilder<VendorResource> 
     */
    public class func createVendorUsingPOSTWithRequestBuilder(vendor vendor: VendorResource? = nil) -> RequestBuilder<VendorResource> {
        let path = "/vendors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = vendor?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VendorResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a vendor
     
     - parameter id: (path) The id of the vendor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVendorUsingDELETE(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteVendorUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a vendor
     - DELETE /vendors/{id}
     
     - parameter id: (path) The id of the vendor 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVendorUsingDELETEWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/vendors/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single vendor
     
     - parameter id: (path) The id of the vendor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorUsingGET(id id: Int32, completion: ((data: VendorResource?, error: ErrorType?) -> Void)) {
        getVendorUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single vendor
     - GET /vendors/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the vendor 

     - returns: RequestBuilder<VendorResource> 
     */
    public class func getVendorUsingGETWithRequestBuilder(id id: Int32) -> RequestBuilder<VendorResource> {
        var path = "/vendors/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VendorResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search vendors
     
     - parameter filterName: (query) Filters vendors by name starting with the text provided in the filter (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorsUsingGET(filterName filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageVendorResource?, error: ErrorType?) -> Void)) {
        getVendorsUsingGETWithRequestBuilder(filterName: filterName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search vendors
     - GET /vendors
     - examples: [{output=none}]
     
     - parameter filterName: (query) Filters vendors by name starting with the text provided in the filter (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageVendorResource> 
     */
    public class func getVendorsUsingGETWithRequestBuilder(filterName filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageVendorResource> {
        let path = "/vendors"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter_name": filterName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageVendorResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a vendor
     
     - parameter id: (path) The id of the vendor 
     - parameter vendor: (body) The vendor (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVendorUsingPUT(id id: Int32, vendor: VendorResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateVendorUsingPUTWithRequestBuilder(id: id, vendor: vendor).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a vendor
     - PUT /vendors/{id}
     
     - parameter id: (path) The id of the vendor 
     - parameter vendor: (body) The vendor (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateVendorUsingPUTWithRequestBuilder(id id: Int32, vendor: VendorResource? = nil) -> RequestBuilder<Void> {
        var path = "/vendors/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = vendor?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
