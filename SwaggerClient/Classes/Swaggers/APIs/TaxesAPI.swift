//
// TaxesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TaxesAPI: APIBase {
    /**
     Create a tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createTaxUsingPOST(countryCodeIso3 countryCodeIso3: String, taxResource: StateTaxResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        createTaxUsingPOSTWithRequestBuilder(countryCodeIso3: countryCodeIso3, taxResource: taxResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create a tax
     - POST /tax/countries/{country_code_iso3}/states
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func createTaxUsingPOSTWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, taxResource: StateTaxResource? = nil) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}/states"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTaxUsingDELETE(countryCodeIso3 countryCodeIso3: String, completion: ((error: ErrorType?) -> Void)) {
        deleteTaxUsingDELETEWithRequestBuilder(countryCodeIso3: countryCodeIso3).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing tax
     - DELETE /tax/countries/{country_code_iso3}
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTaxUsingDELETEWithRequestBuilder(countryCodeIso3 countryCodeIso3: String) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTaxUsingDELETE1(countryCodeIso3 countryCodeIso3: String, stateCode: String, completion: ((error: ErrorType?) -> Void)) {
        deleteTaxUsingDELETE1WithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing tax
     - DELETE /tax/countries/{country_code_iso3}/states/{stateCode}
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTaxUsingDELETE1WithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search taxes across all countries
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllTaxesUsingGET(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageStateTaxResource?, error: ErrorType?) -> Void)) {
        getAllTaxesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes across all countries
     - GET /tax/states
     - Get a list of taxes
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageStateTaxResource> 
     */
    public class func getAllTaxesUsingGETWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageStateTaxResource> {
        let path = "/tax/states"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageStateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxUsingGET(countryCodeIso3 countryCodeIso3: String, completion: ((data: CountryTaxResource?, error: ErrorType?) -> Void)) {
        getTaxUsingGETWithRequestBuilder(countryCodeIso3: countryCodeIso3).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single tax
     - GET /tax/countries/{country_code_iso3}
     - examples: [{output=none}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 

     - returns: RequestBuilder<CountryTaxResource> 
     */
    public class func getTaxUsingGETWithRequestBuilder(countryCodeIso3 countryCodeIso3: String) -> RequestBuilder<CountryTaxResource> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxUsingGET1(countryCodeIso3 countryCodeIso3: String, stateCode: String, completion: ((data: StateTaxResource?, error: ErrorType?) -> Void)) {
        getTaxUsingGET1WithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single tax
     - GET /tax/countries/{country_code_iso3}/states/{stateCode}
     - examples: [{output=none}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 

     - returns: RequestBuilder<StateTaxResource> 
     */
    public class func getTaxUsingGET1WithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String) -> RequestBuilder<StateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search taxes
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxesUsingGET(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageCountryTaxResource?, error: ErrorType?) -> Void)) {
        getTaxesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes
     - GET /tax/countries
     - Get a list of taxes
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageCountryTaxResource> 
     */
    public class func getTaxesUsingGETWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageCountryTaxResource> {
        let path = "/tax/countries"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageCountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search taxes within a country
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxesUsingGET1(countryCodeIso3 countryCodeIso3: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageStateTaxResource?, error: ErrorType?) -> Void)) {
        getTaxesUsingGET1WithRequestBuilder(countryCodeIso3: countryCodeIso3, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes within a country
     - GET /tax/countries/{country_code_iso3}/states
     - Get a list of taxes
     - examples: [{output=none}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageStateTaxResource> 
     */
    public class func getTaxesUsingGET1WithRequestBuilder(countryCodeIso3 countryCodeIso3: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageStateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageStateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a tax
     
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTaxUsingPOST(taxResource taxResource: CountryTaxResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateTaxUsingPOSTWithRequestBuilder(taxResource: taxResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create a tax
     - POST /tax/countries
     
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateTaxUsingPOSTWithRequestBuilder(taxResource taxResource: CountryTaxResource? = nil) -> RequestBuilder<Void> {
        let path = "/tax/countries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create or update a tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTaxUsingPUT(countryCodeIso3 countryCodeIso3: String, taxResource: CountryTaxResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateTaxUsingPUTWithRequestBuilder(countryCodeIso3: countryCodeIso3, taxResource: taxResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create or update a tax
     - PUT /tax/countries/{country_code_iso3}
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateTaxUsingPUTWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, taxResource: CountryTaxResource? = nil) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create or update a tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTaxUsingPUT1(countryCodeIso3 countryCodeIso3: String, stateCode: String, taxResource: StateTaxResource? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateTaxUsingPUT1WithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode, taxResource: taxResource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create or update a tax
     - PUT /tax/countries/{country_code_iso3}/states/{stateCode}
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateTaxUsingPUT1WithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String, taxResource: StateTaxResource? = nil) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
