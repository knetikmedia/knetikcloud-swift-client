//
// TaxesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TaxesAPI: APIBase {
    /**
     Create a country tax
     
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createCountryTax(taxResource taxResource: CountryTaxResource? = nil, completion: ((data: CountryTaxResource?, error: ErrorType?) -> Void)) {
        createCountryTaxWithRequestBuilder(taxResource: taxResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a country tax
     - POST /tax/countries
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 6.747578334998861,
  "name" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<CountryTaxResource> 
     */
    public class func createCountryTaxWithRequestBuilder(taxResource taxResource: CountryTaxResource? = nil) -> RequestBuilder<CountryTaxResource> {
        let path = "/tax/countries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a state tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createStateTax(countryCodeIso3 countryCodeIso3: String, taxResource: StateTaxResource? = nil, completion: ((data: StateTaxResource?, error: ErrorType?) -> Void)) {
        createStateTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3, taxResource: taxResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a state tax
     - POST /tax/countries/{country_code_iso3}/states
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 1.0125398957342902,
  "federally_exempt" : false,
  "name" : "aeiou",
  "state_code" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<StateTaxResource> 
     */
    public class func createStateTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, taxResource: StateTaxResource? = nil) -> RequestBuilder<StateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCountryTax(countryCodeIso3 countryCodeIso3: String, completion: ((error: ErrorType?) -> Void)) {
        deleteCountryTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing tax
     - DELETE /tax/countries/{country_code_iso3}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCountryTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing state tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStateTax(countryCodeIso3 countryCodeIso3: String, stateCode: String, completion: ((error: ErrorType?) -> Void)) {
        deleteStateTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an existing state tax
     - DELETE /tax/countries/{country_code_iso3}/states/{stateCode}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStateTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String) -> RequestBuilder<Void> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCountryTax(countryCodeIso3 countryCodeIso3: String, completion: ((data: CountryTaxResource?, error: ErrorType?) -> Void)) {
        getCountryTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single tax
     - GET /tax/countries/{country_code_iso3}
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 8.861128972896537,
  "name" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 

     - returns: RequestBuilder<CountryTaxResource> 
     */
    public class func getCountryTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String) -> RequestBuilder<CountryTaxResource> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search taxes
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCountryTaxes(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceCountryTaxResource?, error: ErrorType?) -> Void)) {
        getCountryTaxesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes
     - GET /tax/countries
     - Get a list of taxes
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 0,
  "total_elements" : 0,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 6,
  "number_of_elements" : 1,
  "content" : [ {
    "tax_shipping" : false,
    "rate" : 0.11373293668504592,
    "name" : "aeiou",
    "country_iso3" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceCountryTaxResource> 
     */
    public class func getCountryTaxesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceCountryTaxResource> {
        let path = "/tax/countries"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceCountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single state tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStateTax(countryCodeIso3 countryCodeIso3: String, stateCode: String, completion: ((data: StateTaxResource?, error: ErrorType?) -> Void)) {
        getStateTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single state tax
     - GET /tax/countries/{country_code_iso3}/states/{stateCode}
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 0.9992840887352106,
  "federally_exempt" : false,
  "name" : "aeiou",
  "state_code" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 

     - returns: RequestBuilder<StateTaxResource> 
     */
    public class func getStateTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String) -> RequestBuilder<StateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search taxes across all countries
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStateTaxesForCountries(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceStateTaxResource?, error: ErrorType?) -> Void)) {
        getStateTaxesForCountriesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes across all countries
     - GET /tax/states
     - Get a list of taxes
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 3,
  "total_elements" : 6,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 3,
  "content" : [ {
    "tax_shipping" : false,
    "rate" : 4.055817968319065,
    "federally_exempt" : false,
    "name" : "aeiou",
    "state_code" : "aeiou",
    "country_iso3" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceStateTaxResource> 
     */
    public class func getStateTaxesForCountriesWithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceStateTaxResource> {
        let path = "/tax/states"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceStateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search taxes within a country
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStateTaxesForCountry(countryCodeIso3 countryCodeIso3: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageResourceStateTaxResource?, error: ErrorType?) -> Void)) {
        getStateTaxesForCountryWithRequestBuilder(countryCodeIso3: countryCodeIso3, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search taxes within a country
     - GET /tax/countries/{country_code_iso3}/states
     - Get a list of taxes
     - examples: [{contentType=application/json, example={
  "number" : 2,
  "last" : true,
  "size" : 8,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 0,
  "content" : [ {
    "tax_shipping" : false,
    "rate" : 8.177163425888628,
    "federally_exempt" : false,
    "name" : "aeiou",
    "state_code" : "aeiou",
    "country_iso3" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceStateTaxResource> 
     */
    public class func getStateTaxesForCountryWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceStateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceStateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create or update a tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCountryTax(countryCodeIso3 countryCodeIso3: String, taxResource: CountryTaxResource? = nil, completion: ((data: CountryTaxResource?, error: ErrorType?) -> Void)) {
        updateCountryTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3, taxResource: taxResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create or update a tax
     - PUT /tax/countries/{country_code_iso3}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 6.123088982485207,
  "name" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<CountryTaxResource> 
     */
    public class func updateCountryTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, taxResource: CountryTaxResource? = nil) -> RequestBuilder<CountryTaxResource> {
        var path = "/tax/countries/{country_code_iso3}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CountryTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create or update a state tax
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter taxResource: (body) The tax object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateStateTax(countryCodeIso3 countryCodeIso3: String, stateCode: String, taxResource: StateTaxResource? = nil, completion: ((data: StateTaxResource?, error: ErrorType?) -> Void)) {
        updateStateTaxWithRequestBuilder(countryCodeIso3: countryCodeIso3, stateCode: stateCode, taxResource: taxResource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create or update a state tax
     - PUT /tax/countries/{country_code_iso3}/states/{stateCode}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "tax_shipping" : false,
  "rate" : 5.98477741622902,
  "federally_exempt" : false,
  "name" : "aeiou",
  "state_code" : "aeiou",
  "country_iso3" : "aeiou"
}}]
     
     - parameter countryCodeIso3: (path) The iso3 code of the country 
     - parameter stateCode: (path) The code of the state 
     - parameter taxResource: (body) The tax object (optional)

     - returns: RequestBuilder<StateTaxResource> 
     */
    public class func updateStateTaxWithRequestBuilder(countryCodeIso3 countryCodeIso3: String, stateCode: String, taxResource: StateTaxResource? = nil) -> RequestBuilder<StateTaxResource> {
        var path = "/tax/countries/{country_code_iso3}/states/{stateCode}"
        path = path.stringByReplacingOccurrencesOfString("{country_code_iso3}", withString: "\(countryCodeIso3)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{state_code}", withString: "\(stateCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = taxResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StateTaxResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
