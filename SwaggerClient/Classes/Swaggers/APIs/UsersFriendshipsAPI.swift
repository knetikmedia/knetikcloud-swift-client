//
// UsersFriendshipsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UsersFriendshipsAPI: APIBase {
    /**
     Add a friend
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFriendUsingPOST(userId userId: String, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        addFriendUsingPOSTWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a friend
     - POST /users/{userId}/friends/{id}
     - As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 

     - returns: RequestBuilder<Void> 
     */
    public class func addFriendUsingPOSTWithRequestBuilder(userId userId: String, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{userId}/friends/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Redeem friendship token
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter token: (body) The invite token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func connectUsingTokenUsingPOST(userId userId: String, token: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        connectUsingTokenUsingPOSTWithRequestBuilder(userId: userId, token: token).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Redeem friendship token
     - POST /users/{userId}/friends/tokens
     - Immediately connects the requested user with the user mapped by the provided invite token
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter token: (body) The invite token (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func connectUsingTokenUsingPOSTWithRequestBuilder(userId userId: String, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/friends/tokens"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = token?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get friends list
     
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFriendsUsingGET(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageSimpleUserResource?, error: ErrorType?) -> Void)) {
        getFriendsUsingGETWithRequestBuilder(userId: userId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get friends list
     - GET /users/{userId}/friends
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "avatar_url" : "aeiou",
    "id" : 123,
    "display_name" : "aeiou",
    "username" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageSimpleUserResource> 
     */
    public class func getFriendsUsingGETWithRequestBuilder(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageSimpleUserResource> {
        var path = "/users/{userId}/friends"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageSimpleUserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns the invite token
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInviteTokenUsingGET(userId userId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        getInviteTokenUsingGETWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns the invite token
     - GET /users/{userId}/invite-token
     - This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 

     - returns: RequestBuilder<String> 
     */
    public class func getInviteTokenUsingGETWithRequestBuilder(userId userId: String) -> RequestBuilder<String> {
        var path = "/users/{userId}/invite-token"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get pending invites
     
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInvitesUsingGET(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageSimpleUserResource?, error: ErrorType?) -> Void)) {
        getInvitesUsingGETWithRequestBuilder(userId: userId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get pending invites
     - GET /users/{userId}/invites
     - Invites that the specified user received
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "avatar_url" : "aeiou",
    "id" : 123,
    "display_name" : "aeiou",
    "username" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageSimpleUserResource> 
     */
    public class func getInvitesUsingGETWithRequestBuilder(userId userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageSimpleUserResource> {
        var path = "/users/{userId}/invites"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageSimpleUserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove or decline a friend
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeFriendUsingDELETE(userId userId: String, id: Int32, completion: ((error: ErrorType?) -> Void)) {
        removeFriendUsingDELETEWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove or decline a friend
     - DELETE /users/{userId}/friends/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 

     - returns: RequestBuilder<Void> 
     */
    public class func removeFriendUsingDELETEWithRequestBuilder(userId userId: String, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{userId}/friends/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
