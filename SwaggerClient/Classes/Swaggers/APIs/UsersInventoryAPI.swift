//
// UsersInventoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UsersInventoryAPI: APIBase {
    /**
     Adds an item to the user inventory
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemUsingPOST1(id id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil, completion: ((data: InvoiceResource?, error: ErrorType?) -> Void)) {
        addItemUsingPOST1WithRequestBuilder(id: id, userInventoryAddRequest: userInventoryAddRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Adds an item to the user inventory
     - POST /users/{id}/inventory
     - The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)

     - returns: RequestBuilder<InvoiceResource> 
     */
    public class func addItemUsingPOST1WithRequestBuilder(id id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil) -> RequestBuilder<InvoiceResource> {
        var path = "/users/{id}/inventory"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userInventoryAddRequest?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InvoiceResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an entitlement item
     
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createItemUsingPOST(entitlementItem entitlementItem: EntitlementItem? = nil, completion: ((data: EntitlementItem?, error: ErrorType?) -> Void)) {
        createItemUsingPOSTWithRequestBuilder(entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an entitlement item
     - POST /entitlements
     - examples: [{output=none}]
     
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<EntitlementItem> 
     */
    public class func createItemUsingPOSTWithRequestBuilder(entitlementItem entitlementItem: EntitlementItem? = nil) -> RequestBuilder<EntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemUsingDELETE(entitlementId entitlementId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemUsingDELETEWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an entitlement item
     - DELETE /entitlements/{entitlementId}
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemUsingDELETEWithRequestBuilder(entitlementId entitlementId: Int32) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.stringByReplacingOccurrencesOfString("{entitlement_id}", withString: "\(entitlementId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check for access to an item without consuming
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func entitlementCheckUsingGET(userId userId: String, itemId: Int32, sku: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        entitlementCheckUsingGETWithRequestBuilder(userId: userId, itemId: itemId, sku: sku).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Check for access to an item without consuming
     - GET /users/{userId}/entitlements/{itemId}/check
     - Useful for pre-check and accounts for all various buisness rules
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func entitlementCheckUsingGETWithRequestBuilder(userId userId: String, itemId: Int32, sku: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/check"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{item_id}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sku": sku
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Use an item
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func entitlementUseUsingPOST(userId userId: String, itemId: Int32, sku: String? = nil, info: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        entitlementUseUsingPOSTWithRequestBuilder(userId: userId, itemId: itemId, sku: sku, info: info).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Use an item
     - POST /users/{userId}/entitlements/{itemId}/use
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func entitlementUseUsingPOSTWithRequestBuilder(userId userId: String, itemId: Int32, sku: String? = nil, info: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/use"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{item_id}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sku": sku,
            "info": info
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search entitlement items
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCurrenciesUsingGET1(size size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: ((data: PageEntitlementItem?, error: ErrorType?) -> Void)) {
        getCurrenciesUsingGET1WithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List and search entitlement items
     - GET /entitlements
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageEntitlementItem> 
     */
    public class func getCurrenciesUsingGET1WithRequestBuilder(size size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageEntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageEntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the user inventory entries for all users
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventoryListUsingGET(inactive inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil, completion: ((data: PageUserInventoryResource?, error: ErrorType?) -> Void)) {
        getInventoryListUsingGETWithRequestBuilder(inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterMinDate: filterMinDate, filterMaxDate: filterMaxDate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List the user inventory entries for all users
     - GET /inventories
     - examples: [{output=none}]
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)

     - returns: RequestBuilder<PageUserInventoryResource> 
     */
    public class func getInventoryListUsingGETWithRequestBuilder(inactive inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil) -> RequestBuilder<PageUserInventoryResource> {
        let path = "/inventories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "inactive": inactive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "filter_item_name": filterItemName,
            "filter_min_date": filterMinDate?.encodeToJSON(),
            "filter_max_date": filterMaxDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an inventory entry
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventoryUsingGET(userId userId: Int32, id: Int32, completion: ((data: UserInventoryResource?, error: ErrorType?) -> Void)) {
        getInventoryUsingGETWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an inventory entry
     - GET /users/{userId}/inventory/{id}
     - examples: [{output=none}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 

     - returns: RequestBuilder<UserInventoryResource> 
     */
    public class func getInventoryUsingGETWithRequestBuilder(userId userId: Int32, id: Int32) -> RequestBuilder<UserInventoryResource> {
        var path = "/users/{userId}/inventory/{id}"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemUsingGET(entitlementId entitlementId: Int32, completion: ((data: EntitlementItem?, error: ErrorType?) -> Void)) {
        getItemUsingGETWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single entitlement item
     - GET /entitlements/{entitlementId}
     - examples: [{output=none}]
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<EntitlementItem> 
     */
    public class func getItemUsingGETWithRequestBuilder(entitlementId entitlementId: Int32) -> RequestBuilder<EntitlementItem> {
        var path = "/entitlements/{entitlementId}"
        path = path.stringByReplacingOccurrencesOfString("{entitlement_id}", withString: "\(entitlementId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List the user inventory entries for a given user
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserInventoryListUsingGET(id id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil, completion: ((data: PageUserInventoryResource?, error: ErrorType?) -> Void)) {
        getUserInventoryListUsingGETWithRequestBuilder(id: id, inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterMinDate: filterMinDate, filterMaxDate: filterMaxDate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List the user inventory entries for a given user
     - GET /users/{id}/inventory
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)

     - returns: RequestBuilder<PageUserInventoryResource> 
     */
    public class func getUserInventoryListUsingGETWithRequestBuilder(id id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil) -> RequestBuilder<PageUserInventoryResource> {
        var path = "/users/{id}/inventory"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "inactive": inactive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "filter_item_name": filterItemName,
            "filter_min_date": filterMinDate?.encodeToJSON(),
            "filter_max_date": filterMaxDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the log entries for this inventory entry.
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserInventoryLogUsingGET(userId userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil, completion: ((data: PageUserItemLogResource?, error: ErrorType?) -> Void)) {
        getUserInventoryLogUsingGETWithRequestBuilder(userId: userId, id: id, size: size, page: page).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List the log entries for this inventory entry.
     - GET /users/{userId}/inventory/{id}/log
     - examples: [{output=none}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserItemLogResource> 
     */
    public class func getUserInventoryLogUsingGETWithRequestBuilder(userId userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserItemLogResource> {
        var path = "/users/{userId}/inventory/{id}/log"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserItemLogResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemUsingPUT1(entitlementId entitlementId: Int32, entitlementItem: EntitlementItem? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateItemUsingPUT1WithRequestBuilder(entitlementId: entitlementId, entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an entitlement item
     - PUT /entitlements/{entitlementId}
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemUsingPUT1WithRequestBuilder(entitlementId entitlementId: Int32, entitlementItem: EntitlementItem? = nil) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.stringByReplacingOccurrencesOfString("{entitlement_id}", withString: "\(entitlementId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the behavior data for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUserInventoryBehaviorDataUsingPUT(userId userId: Int32, id: Int32, data: AnyObject? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateUserInventoryBehaviorDataUsingPUTWithRequestBuilder(userId: userId, id: id, data: data).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set the behavior data for an inventory entry
     - PUT /users/{userId}/inventory/{id}/behavior-data
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateUserInventoryBehaviorDataUsingPUTWithRequestBuilder(userId userId: Int32, id: Int32, data: AnyObject? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/behavior-data"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the expiration date
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUserInventoryExpiresUsingPUT(userId userId: Int32, id: Int32, timestamp: Int64? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateUserInventoryExpiresUsingPUTWithRequestBuilder(userId: userId, id: id, timestamp: timestamp).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set the expiration date
     - PUT /users/{userId}/inventory/{id}/expires
     - Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateUserInventoryExpiresUsingPUTWithRequestBuilder(userId userId: Int32, id: Int32, timestamp: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/expires"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = timestamp?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the status for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUserInventoryStatusUsingPUT(userId userId: Int32, id: Int32, inventoryStatus: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateUserInventoryStatusUsingPUTWithRequestBuilder(userId: userId, id: id, inventoryStatus: inventoryStatus).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set the status for an inventory entry
     - PUT /users/{userId}/inventory/{id}/status
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateUserInventoryStatusUsingPUTWithRequestBuilder(userId userId: Int32, id: Int32, inventoryStatus: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/status"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inventoryStatus?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
