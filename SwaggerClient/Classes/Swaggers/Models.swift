// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AchievementDefinitionResource]
            Decoders.addDecoder(clazz: [AchievementDefinitionResource].self) { (source: AnyObject) -> [AchievementDefinitionResource] in
                return Decoders.decode(clazz: [AchievementDefinitionResource].self, source: source)
            }
            // Decoder for AchievementDefinitionResource
            Decoders.addDecoder(clazz: AchievementDefinitionResource.self) { (source: AnyObject) -> AchievementDefinitionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AchievementDefinitionResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.hidden = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hidden"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"])
                instance.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [AchievementProgressUpdateRequest]
            Decoders.addDecoder(clazz: [AchievementProgressUpdateRequest].self) { (source: AnyObject) -> [AchievementProgressUpdateRequest] in
                return Decoders.decode(clazz: [AchievementProgressUpdateRequest].self, source: source)
            }
            // Decoder for AchievementProgressUpdateRequest
            Decoders.addDecoder(clazz: AchievementProgressUpdateRequest.self) { (source: AnyObject) -> AchievementProgressUpdateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AchievementProgressUpdateRequest()
                instance.incrementValue = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["increment_value"])
                instance.progressValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress_value"])
                return instance
            }


            // Decoder for [ActionResource]
            Decoders.addDecoder(clazz: [ActionResource].self) { (source: AnyObject) -> [ActionResource] in
                return Decoders.decode(clazz: [ActionResource].self, source: source)
            }
            // Decoder for ActionResource
            Decoders.addDecoder(clazz: ActionResource.self) { (source: AnyObject) -> ActionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActionResource()
                instance.category = ActionResource.Category(rawValue: (sourceDictionary["category"] as? String) ?? "") 
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.variables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["variables"])
                return instance
            }


            // Decoder for [ActionVariableResource]
            Decoders.addDecoder(clazz: [ActionVariableResource].self) { (source: AnyObject) -> [ActionVariableResource] in
                return Decoders.decode(clazz: [ActionVariableResource].self, source: source)
            }
            // Decoder for ActionVariableResource
            Decoders.addDecoder(clazz: ActionVariableResource.self) { (source: AnyObject) -> ActionVariableResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActionVariableResource()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ActivityEntitlementResource]
            Decoders.addDecoder(clazz: [ActivityEntitlementResource].self) { (source: AnyObject) -> [ActivityEntitlementResource] in
                return Decoders.decode(clazz: [ActivityEntitlementResource].self, source: source)
            }
            // Decoder for ActivityEntitlementResource
            Decoders.addDecoder(clazz: ActivityEntitlementResource.self) { (source: AnyObject) -> ActivityEntitlementResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityEntitlementResource()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }


            // Decoder for [ActivityOccurrenceCreationFailure]
            Decoders.addDecoder(clazz: [ActivityOccurrenceCreationFailure].self) { (source: AnyObject) -> [ActivityOccurrenceCreationFailure] in
                return Decoders.decode(clazz: [ActivityOccurrenceCreationFailure].self, source: source)
            }
            // Decoder for ActivityOccurrenceCreationFailure
            Decoders.addDecoder(clazz: ActivityOccurrenceCreationFailure.self) { (source: AnyObject) -> ActivityOccurrenceCreationFailure in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityOccurrenceCreationFailure()
                instance.userResults = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user_results"])
                return instance
            }


            // Decoder for [ActivityOccurrenceJoinResult]
            Decoders.addDecoder(clazz: [ActivityOccurrenceJoinResult].self) { (source: AnyObject) -> [ActivityOccurrenceJoinResult] in
                return Decoders.decode(clazz: [ActivityOccurrenceJoinResult].self, source: source)
            }
            // Decoder for ActivityOccurrenceJoinResult
            Decoders.addDecoder(clazz: ActivityOccurrenceJoinResult.self) { (source: AnyObject) -> ActivityOccurrenceJoinResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityOccurrenceJoinResult()
                instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.userId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [ActivityOccurrenceResource]
            Decoders.addDecoder(clazz: [ActivityOccurrenceResource].self) { (source: AnyObject) -> [ActivityOccurrenceResource] in
                return Decoders.decode(clazz: [ActivityOccurrenceResource].self, source: source)
            }
            // Decoder for ActivityOccurrenceResource
            Decoders.addDecoder(clazz: ActivityOccurrenceResource.self) { (source: AnyObject) -> ActivityOccurrenceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityOccurrenceResource()
                instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"])
                instance.challengeActivityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_activity_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"])
                instance.eventId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_id"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.rewardStatus = ActivityOccurrenceResource.RewardStatus(rawValue: (sourceDictionary["reward_status"] as? String) ?? "") 
                instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"])
                instance.simulated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["simulated"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.status = ActivityOccurrenceResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }


            // Decoder for [ActivityOccurrenceResults]
            Decoders.addDecoder(clazz: [ActivityOccurrenceResults].self) { (source: AnyObject) -> [ActivityOccurrenceResults] in
                return Decoders.decode(clazz: [ActivityOccurrenceResults].self, source: source)
            }
            // Decoder for ActivityOccurrenceResults
            Decoders.addDecoder(clazz: ActivityOccurrenceResults.self) { (source: AnyObject) -> ActivityOccurrenceResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityOccurrenceResults()
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }


            // Decoder for [ActivityResource]
            Decoders.addDecoder(clazz: [ActivityResource].self) { (source: AnyObject) -> [ActivityResource] in
                return Decoders.decode(clazz: [ActivityResource].self, source: source)
            }
            // Decoder for ActivityResource
            Decoders.addDecoder(clazz: ActivityResource.self) { (source: AnyObject) -> ActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.entitlements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entitlements"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"])
                instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [ActivityUserResource]
            Decoders.addDecoder(clazz: [ActivityUserResource].self) { (source: AnyObject) -> [ActivityUserResource] in
                return Decoders.decode(clazz: [ActivityUserResource].self, source: source)
            }
            // Decoder for ActivityUserResource
            Decoders.addDecoder(clazz: ActivityUserResource.self) { (source: AnyObject) -> ActivityUserResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ActivityUserResource()
                instance.host = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["host"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.joinedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["joined_date"])
                instance.leftDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["left_date"])
                instance.metric = Decoders.decodeOptional(clazz: MetricResource.self, source: sourceDictionary["metric"])
                instance.status = ActivityUserResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [AddressResource]
            Decoders.addDecoder(clazz: [AddressResource].self) { (source: AnyObject) -> [AddressResource] in
                return Decoders.decode(clazz: [AddressResource].self, source: source)
            }
            // Decoder for AddressResource
            Decoders.addDecoder(clazz: AddressResource.self) { (source: AnyObject) -> AddressResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressResource()
                instance.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"])
                instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"])
                return instance
            }


            // Decoder for [Affiliate]
            Decoders.addDecoder(clazz: [Affiliate].self) { (source: AnyObject) -> [Affiliate] in
                return Decoders.decode(clazz: [Affiliate].self, source: source)
            }
            // Decoder for Affiliate
            Decoders.addDecoder(clazz: Affiliate.self) { (source: AnyObject) -> Affiliate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Affiliate()
                instance.affiliateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate_key"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [AggregateCountResource]
            Decoders.addDecoder(clazz: [AggregateCountResource].self) { (source: AnyObject) -> [AggregateCountResource] in
                return Decoders.decode(clazz: [AggregateCountResource].self, source: source)
            }
            // Decoder for AggregateCountResource
            Decoders.addDecoder(clazz: AggregateCountResource.self) { (source: AnyObject) -> AggregateCountResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AggregateCountResource()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                return instance
            }


            // Decoder for [AggregateInvoiceReportResource]
            Decoders.addDecoder(clazz: [AggregateInvoiceReportResource].self) { (source: AnyObject) -> [AggregateInvoiceReportResource] in
                return Decoders.decode(clazz: [AggregateInvoiceReportResource].self, source: source)
            }
            // Decoder for AggregateInvoiceReportResource
            Decoders.addDecoder(clazz: AggregateInvoiceReportResource.self) { (source: AnyObject) -> AggregateInvoiceReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AggregateInvoiceReportResource()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"])
                instance.userCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_count"])
                return instance
            }


            // Decoder for [AmazonS3Activity]
            Decoders.addDecoder(clazz: [AmazonS3Activity].self) { (source: AnyObject) -> [AmazonS3Activity] in
                return Decoders.decode(clazz: [AmazonS3Activity].self, source: source)
            }
            // Decoder for AmazonS3Activity
            Decoders.addDecoder(clazz: AmazonS3Activity.self) { (source: AnyObject) -> AmazonS3Activity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AmazonS3Activity()
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.objectKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["object_key"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [AnswerResource]
            Decoders.addDecoder(clazz: [AnswerResource].self) { (source: AnyObject) -> [AnswerResource] in
                return Decoders.decode(clazz: [AnswerResource].self, source: source)
            }
            // Decoder for AnswerResource
            Decoders.addDecoder(clazz: AnswerResource.self) { (source: AnyObject) -> AnswerResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AnswerResource()
                instance.answer = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["answer"])
                instance.correct = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["correct"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ApplyPaymentRequest]
            Decoders.addDecoder(clazz: [ApplyPaymentRequest].self) { (source: AnyObject) -> [ApplyPaymentRequest] in
                return Decoders.decode(clazz: [ApplyPaymentRequest].self, source: source)
            }
            // Decoder for ApplyPaymentRequest
            Decoders.addDecoder(clazz: ApplyPaymentRequest.self) { (source: AnyObject) -> ApplyPaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApplyPaymentRequest()
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.receipt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receipt"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"])
                return instance
            }


            // Decoder for [ArticleResource]
            Decoders.addDecoder(clazz: [ArticleResource].self) { (source: AnyObject) -> [ArticleResource] in
                return Decoders.decode(clazz: [ArticleResource].self, source: source)
            }
            // Decoder for ArticleResource
            Decoders.addDecoder(clazz: ArticleResource.self) { (source: AnyObject) -> ArticleResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ArticleResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [Artist]
            Decoders.addDecoder(clazz: [Artist].self) { (source: AnyObject) -> [Artist] in
                return Decoders.decode(clazz: [Artist].self, source: source)
            }
            // Decoder for Artist
            Decoders.addDecoder(clazz: Artist.self) { (source: AnyObject) -> Artist in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Artist()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.born = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["born"])
                instance.contributionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contribution_count"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"])
                instance.died = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["died"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [ArtistResource]
            Decoders.addDecoder(clazz: [ArtistResource].self) { (source: AnyObject) -> [ArtistResource] in
                return Decoders.decode(clazz: [ArtistResource].self, source: source)
            }
            // Decoder for ArtistResource
            Decoders.addDecoder(clazz: ArtistResource.self) { (source: AnyObject) -> ArtistResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ArtistResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.born = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["born"])
                instance.contributionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contribution_count"])
                instance.contributions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributions"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.died = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["died"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [AvailableSettingResource]
            Decoders.addDecoder(clazz: [AvailableSettingResource].self) { (source: AnyObject) -> [AvailableSettingResource] in
                return Decoders.decode(clazz: [AvailableSettingResource].self, source: source)
            }
            // Decoder for AvailableSettingResource
            Decoders.addDecoder(clazz: AvailableSettingResource.self) { (source: AnyObject) -> AvailableSettingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AvailableSettingResource()
                instance.advancedOption = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["advanced_option"])
                instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                return instance
            }


            // Decoder for [BareActivityResource]
            Decoders.addDecoder(clazz: [BareActivityResource].self) { (source: AnyObject) -> [BareActivityResource] in
                return Decoders.decode(clazz: [BareActivityResource].self, source: source)
            }
            // Decoder for BareActivityResource
            Decoders.addDecoder(clazz: BareActivityResource.self) { (source: AnyObject) -> BareActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BareActivityResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [BareChallengeActivityResource]
            Decoders.addDecoder(clazz: [BareChallengeActivityResource].self) { (source: AnyObject) -> [BareChallengeActivityResource] in
                return Decoders.decode(clazz: [BareChallengeActivityResource].self, source: source)
            }
            // Decoder for BareChallengeActivityResource
            Decoders.addDecoder(clazz: BareChallengeActivityResource.self) { (source: AnyObject) -> BareChallengeActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BareChallengeActivityResource()
                instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"])
                instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [Batch]
            Decoders.addDecoder(clazz: [Batch].self) { (source: AnyObject) -> [Batch] in
                return Decoders.decode(clazz: [Batch].self, source: source)
            }
            // Decoder for Batch
            Decoders.addDecoder(clazz: Batch.self) { (source: AnyObject) -> Batch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Batch()
                instance.batch = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["batch"])
                return instance
            }


            // Decoder for [BatchRequest]
            Decoders.addDecoder(clazz: [BatchRequest].self) { (source: AnyObject) -> [BatchRequest] in
                return Decoders.decode(clazz: [BatchRequest].self, source: source)
            }
            // Decoder for BatchRequest
            Decoders.addDecoder(clazz: BatchRequest.self) { (source: AnyObject) -> BatchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BatchRequest()
                instance.body = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["body"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content_type"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [BatchReturn]
            Decoders.addDecoder(clazz: [BatchReturn].self) { (source: AnyObject) -> [BatchReturn] in
                return Decoders.decode(clazz: [BatchReturn].self, source: source)
            }
            // Decoder for BatchReturn
            Decoders.addDecoder(clazz: BatchReturn.self) { (source: AnyObject) -> BatchReturn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BatchReturn()
                instance.body = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["body"])
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [Behavior]
            Decoders.addDecoder(clazz: [Behavior].self) { (source: AnyObject) -> [Behavior] in
                return Decoders.decode(clazz: [Behavior].self, source: source)
            }
            // Decoder for Behavior
            Decoders.addDecoder(clazz: Behavior.self) { (source: AnyObject) -> Behavior in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Behavior()
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                return instance
            }


            // Decoder for [BillingReport]
            Decoders.addDecoder(clazz: [BillingReport].self) { (source: AnyObject) -> [BillingReport] in
                return Decoders.decode(clazz: [BillingReport].self, source: source)
            }
            // Decoder for BillingReport
            Decoders.addDecoder(clazz: BillingReport.self) { (source: AnyObject) -> BillingReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillingReport()
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.lastKnownFailures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["last_known_failures"])
                instance.statistics = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["statistics"])
                return instance
            }


            // Decoder for [BooleanResource]
            Decoders.addDecoder(clazz: [BooleanResource].self) { (source: AnyObject) -> [BooleanResource] in
                return Decoders.decode(clazz: [BooleanResource].self, source: source)
            }
            // Decoder for BooleanResource
            Decoders.addDecoder(clazz: BooleanResource.self) { (source: AnyObject) -> BooleanResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BooleanResource()
                instance.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [BreCategoryResource]
            Decoders.addDecoder(clazz: [BreCategoryResource].self) { (source: AnyObject) -> [BreCategoryResource] in
                return Decoders.decode(clazz: [BreCategoryResource].self, source: source)
            }
            // Decoder for BreCategoryResource
            Decoders.addDecoder(clazz: BreCategoryResource.self) { (source: AnyObject) -> BreCategoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreCategoryResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                return instance
            }


            // Decoder for [BreEvent]
            Decoders.addDecoder(clazz: [BreEvent].self) { (source: AnyObject) -> [BreEvent] in
                return Decoders.decode(clazz: [BreEvent].self, source: source)
            }
            // Decoder for BreEvent
            Decoders.addDecoder(clazz: BreEvent.self) { (source: AnyObject) -> BreEvent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreEvent()
                instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"])
                instance.params = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["params"])
                return instance
            }


            // Decoder for [BreEventLog]
            Decoders.addDecoder(clazz: [BreEventLog].self) { (source: AnyObject) -> [BreEventLog] in
                return Decoders.decode(clazz: [BreEventLog].self, source: source)
            }
            // Decoder for BreEventLog
            Decoders.addDecoder(clazz: BreEventLog.self) { (source: AnyObject) -> BreEventLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreEventLog()
                instance.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"])
                instance.eventId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_id"])
                instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"])
                instance.eventStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_start_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.parameters = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["parameters"])
                instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"])
                return instance
            }


            // Decoder for [BreGlobalResource]
            Decoders.addDecoder(clazz: [BreGlobalResource].self) { (source: AnyObject) -> [BreGlobalResource] in
                return Decoders.decode(clazz: [BreGlobalResource].self, source: source)
            }
            // Decoder for BreGlobalResource
            Decoders.addDecoder(clazz: BreGlobalResource.self) { (source: AnyObject) -> BreGlobalResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreGlobalResource()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.scopes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["scopes"])
                instance.systemGlobal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_global"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [BreGlobalScopeDefinition]
            Decoders.addDecoder(clazz: [BreGlobalScopeDefinition].self) { (source: AnyObject) -> [BreGlobalScopeDefinition] in
                return Decoders.decode(clazz: [BreGlobalScopeDefinition].self, source: source)
            }
            // Decoder for BreGlobalScopeDefinition
            Decoders.addDecoder(clazz: BreGlobalScopeDefinition.self) { (source: AnyObject) -> BreGlobalScopeDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreGlobalScopeDefinition()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [BreRule]
            Decoders.addDecoder(clazz: [BreRule].self) { (source: AnyObject) -> [BreRule] in
                return Decoders.decode(clazz: [BreRule].self, source: source)
            }
            // Decoder for BreRule
            Decoders.addDecoder(clazz: BreRule.self) { (source: AnyObject) -> BreRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreRule()
                instance.actions = Decoders.decodeOptional(clazz: ActionResource.self, source: sourceDictionary["actions"])
                instance.condition = Decoders.decodeOptional(clazz: PredicateOperation.self, source: sourceDictionary["condition"])
                instance.conditionText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["condition_text"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"])
                instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.systemRule = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_rule"])
                return instance
            }


            // Decoder for [BreRuleLog]
            Decoders.addDecoder(clazz: [BreRuleLog].self) { (source: AnyObject) -> [BreRuleLog] in
                return Decoders.decode(clazz: [BreRuleLog].self, source: source)
            }
            // Decoder for BreRuleLog
            Decoders.addDecoder(clazz: BreRuleLog.self) { (source: AnyObject) -> BreRuleLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreRuleLog()
                instance.ran = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ran"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.ruleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_end_date"])
                instance.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"])
                instance.ruleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_name"])
                instance.ruleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_start_date"])
                return instance
            }


            // Decoder for [BreTriggerParameterDefinition]
            Decoders.addDecoder(clazz: [BreTriggerParameterDefinition].self) { (source: AnyObject) -> [BreTriggerParameterDefinition] in
                return Decoders.decode(clazz: [BreTriggerParameterDefinition].self, source: source)
            }
            // Decoder for BreTriggerParameterDefinition
            Decoders.addDecoder(clazz: BreTriggerParameterDefinition.self) { (source: AnyObject) -> BreTriggerParameterDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreTriggerParameterDefinition()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [BreTriggerResource]
            Decoders.addDecoder(clazz: [BreTriggerResource].self) { (source: AnyObject) -> [BreTriggerResource] in
                return Decoders.decode(clazz: [BreTriggerResource].self, source: source)
            }
            // Decoder for BreTriggerResource
            Decoders.addDecoder(clazz: BreTriggerResource.self) { (source: AnyObject) -> BreTriggerResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BreTriggerResource()
                instance.category = BreTriggerResource.Category(rawValue: (sourceDictionary["category"] as? String) ?? "") 
                instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"])
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.systemTrigger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_trigger"])
                instance.triggerDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_description"])
                instance.triggerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_name"])
                return instance
            }


            // Decoder for [BundleItem]
            Decoders.addDecoder(clazz: [BundleItem].self) { (source: AnyObject) -> [BundleItem] in
                return Decoders.decode(clazz: [BundleItem].self, source: source)
            }
            // Decoder for BundleItem
            Decoders.addDecoder(clazz: BundleItem.self) { (source: AnyObject) -> BundleItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BundleItem()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.bundledSkus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bundled_skus"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"])
                instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"])
                instance.geoPolicyType = BundleItem.GeoPolicyType(rawValue: (sourceDictionary["geo_policy_type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"])
                instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [BundledSku]
            Decoders.addDecoder(clazz: [BundledSku].self) { (source: AnyObject) -> [BundledSku] in
                return Decoders.decode(clazz: [BundledSku].self, source: source)
            }
            // Decoder for BundledSku
            Decoders.addDecoder(clazz: BundledSku.self) { (source: AnyObject) -> BundledSku in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BundledSku()
                instance.priceOverride = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_override"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }


            // Decoder for [CampaignResource]
            Decoders.addDecoder(clazz: [CampaignResource].self) { (source: AnyObject) -> [CampaignResource] in
                return Decoders.decode(clazz: [CampaignResource].self, source: source)
            }
            // Decoder for CampaignResource
            Decoders.addDecoder(clazz: CampaignResource.self) { (source: AnyObject) -> CampaignResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CampaignResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.nextChallenge = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_challenge"])
                instance.nextChallengeDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_challenge_date"])
                instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"])
                instance.rewardStatus = CampaignResource.RewardStatus(rawValue: (sourceDictionary["reward_status"] as? String) ?? "") 
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [Cart]
            Decoders.addDecoder(clazz: [Cart].self) { (source: AnyObject) -> [Cart] in
                return Decoders.decode(clazz: [Cart].self, source: source)
            }
            // Decoder for Cart
            Decoders.addDecoder(clazz: Cart.self) { (source: AnyObject) -> Cart in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Cart()
                instance.countryTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["country_tax"])
                instance.coupons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coupons"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.discountTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_total"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.owner = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner"])
                instance.selectedShippingOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["selected_shipping_options"])
                instance.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"])
                instance.shippingAddress = Decoders.decodeOptional(clazz: CartShippingAddressRequest.self, source: sourceDictionary["shipping_address"])
                instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping_cost"])
                instance.shippingOptions = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["shipping_options"])
                instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"])
                instance.status = Cart.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"])
                return instance
            }


            // Decoder for [CartItemRequest]
            Decoders.addDecoder(clazz: [CartItemRequest].self) { (source: AnyObject) -> [CartItemRequest] in
                return Decoders.decode(clazz: [CartItemRequest].self, source: source)
            }
            // Decoder for CartItemRequest
            Decoders.addDecoder(clazz: CartItemRequest.self) { (source: AnyObject) -> CartItemRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartItemRequest()
                instance.affiliateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate_key"])
                instance.catalogSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["catalog_sku"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                return instance
            }


            // Decoder for [CartLineItem]
            Decoders.addDecoder(clazz: [CartLineItem].self) { (source: AnyObject) -> [CartLineItem] in
                return Decoders.decode(clazz: [CartLineItem].self, source: source)
            }
            // Decoder for CartLineItem
            Decoders.addDecoder(clazz: CartLineItem.self) { (source: AnyObject) -> CartLineItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartLineItem()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.discount = Decoders.decodeOptional(clazz: Discount.self, source: sourceDictionary["discount"])
                instance.lineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["line_total"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.originalLineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_line_total"])
                instance.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"])
                instance.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"])
                instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"])
                instance.storeItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["store_item_id"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.thumbUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb_url"])
                instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"])
                return instance
            }


            // Decoder for [CartShippableResponse]
            Decoders.addDecoder(clazz: [CartShippableResponse].self) { (source: AnyObject) -> [CartShippableResponse] in
                return Decoders.decode(clazz: [CartShippableResponse].self, source: source)
            }
            // Decoder for CartShippableResponse
            Decoders.addDecoder(clazz: CartShippableResponse.self) { (source: AnyObject) -> CartShippableResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartShippableResponse()
                instance.cartId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cart_id"])
                instance.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"])
                return instance
            }


            // Decoder for [CartShippingAddressRequest]
            Decoders.addDecoder(clazz: [CartShippingAddressRequest].self) { (source: AnyObject) -> [CartShippingAddressRequest] in
                return Decoders.decode(clazz: [CartShippingAddressRequest].self, source: source)
            }
            // Decoder for CartShippingAddressRequest
            Decoders.addDecoder(clazz: CartShippingAddressRequest.self) { (source: AnyObject) -> CartShippingAddressRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartShippingAddressRequest()
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"])
                instance.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.postalStateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_state_code"])
                instance.shippingAddressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line1"])
                instance.shippingAddressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line2"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"])
                return instance
            }


            // Decoder for [CartShippingOption]
            Decoders.addDecoder(clazz: [CartShippingOption].self) { (source: AnyObject) -> [CartShippingOption] in
                return Decoders.decode(clazz: [CartShippingOption].self, source: source)
            }
            // Decoder for CartShippingOption
            Decoders.addDecoder(clazz: CartShippingOption.self) { (source: AnyObject) -> CartShippingOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartShippingOption()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.shippingItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_item_id"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"])
                return instance
            }


            // Decoder for [CartSummary]
            Decoders.addDecoder(clazz: [CartSummary].self) { (source: AnyObject) -> [CartSummary] in
                return Decoders.decode(clazz: [CartSummary].self, source: source)
            }
            // Decoder for CartSummary
            Decoders.addDecoder(clazz: CartSummary.self) { (source: AnyObject) -> CartSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartSummary()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"])
                instance.itemsInCart = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["items_in_cart"])
                instance.status = CartSummary.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                return instance
            }


            // Decoder for [CatalogSale]
            Decoders.addDecoder(clazz: [CatalogSale].self) { (source: AnyObject) -> [CatalogSale] in
                return Decoders.decode(clazz: [CatalogSale].self, source: source)
            }
            // Decoder for CatalogSale
            Decoders.addDecoder(clazz: CatalogSale.self) { (source: AnyObject) -> CatalogSale in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CatalogSale()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.discountType = CatalogSale.DiscountType(rawValue: (sourceDictionary["discount_type"] as? String) ?? "") 
                instance.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.item = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.saleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_end_date"])
                instance.saleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_start_date"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"])
                instance.vendor = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor"])
                return instance
            }


            // Decoder for [CategoryResource]
            Decoders.addDecoder(clazz: [CategoryResource].self) { (source: AnyObject) -> [CategoryResource] in
                return Decoders.decode(clazz: [CategoryResource].self, source: source)
            }
            // Decoder for CategoryResource
            Decoders.addDecoder(clazz: CategoryResource.self) { (source: AnyObject) -> CategoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CategoryResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                return instance
            }


            // Decoder for [ChallengeActivityResource]
            Decoders.addDecoder(clazz: [ChallengeActivityResource].self) { (source: AnyObject) -> [ChallengeActivityResource] in
                return Decoders.decode(clazz: [ChallengeActivityResource].self, source: source)
            }
            // Decoder for ChallengeActivityResource
            Decoders.addDecoder(clazz: ChallengeActivityResource.self) { (source: AnyObject) -> ChallengeActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChallengeActivityResource()
                instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"])
                instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"])
                instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"])
                instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"])
                return instance
            }


            // Decoder for [ChallengeEventParticipantResource]
            Decoders.addDecoder(clazz: [ChallengeEventParticipantResource].self) { (source: AnyObject) -> [ChallengeEventParticipantResource] in
                return Decoders.decode(clazz: [ChallengeEventParticipantResource].self, source: source)
            }
            // Decoder for ChallengeEventParticipantResource
            Decoders.addDecoder(clazz: ChallengeEventParticipantResource.self) { (source: AnyObject) -> ChallengeEventParticipantResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChallengeEventParticipantResource()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"])
                instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [ChallengeEventResource]
            Decoders.addDecoder(clazz: [ChallengeEventResource].self) { (source: AnyObject) -> [ChallengeEventResource] in
                return Decoders.decode(clazz: [ChallengeEventResource].self, source: source)
            }
            // Decoder for ChallengeEventResource
            Decoders.addDecoder(clazz: ChallengeEventResource.self) { (source: AnyObject) -> ChallengeEventResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChallengeEventResource()
                instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.rewardStatus = ChallengeEventResource.RewardStatus(rawValue: (sourceDictionary["reward_status"] as? String) ?? "") 
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                return instance
            }


            // Decoder for [ChallengeResource]
            Decoders.addDecoder(clazz: [ChallengeResource].self) { (source: AnyObject) -> [ChallengeResource] in
                return Decoders.decode(clazz: [ChallengeResource].self, source: source)
            }
            // Decoder for ChallengeResource
            Decoders.addDecoder(clazz: ChallengeResource.self) { (source: AnyObject) -> ChallengeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChallengeResource()
                instance.activities = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["activities"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.campaignId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["campaign_id"])
                instance.copyOf = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["copy_of"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.nextEventDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_event_date"])
                instance.rewardLagMinutes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reward_lag_minutes"])
                instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"])
                instance.schedule = Decoders.decodeOptional(clazz: Schedule.self, source: sourceDictionary["schedule"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [ClientResource]
            Decoders.addDecoder(clazz: [ClientResource].self) { (source: AnyObject) -> [ClientResource] in
                return Decoders.decode(clazz: [ClientResource].self, source: source)
            }
            // Decoder for ClientResource
            Decoders.addDecoder(clazz: ClientResource.self) { (source: AnyObject) -> ClientResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ClientResource()
                instance.accessTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["access_token_validity_seconds"])
                instance.clientKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_key"])
                instance.grantTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["grant_types"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.isPublic = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_public"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.redirectUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["redirect_uris"])
                instance.refreshTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refresh_token_validity_seconds"])
                instance.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"])
                return instance
            }


            // Decoder for [CollectionCountry]
            Decoders.addDecoder(clazz: [CollectionCountry].self) { (source: AnyObject) -> [CollectionCountry] in
                return Decoders.decode(clazz: [CollectionCountry].self, source: source)
            }
            // Decoder for CollectionCountry
            Decoders.addDecoder(clazz: CollectionCountry.self) { (source: AnyObject) -> CollectionCountry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CollectionCountry()
                return instance
            }


            // Decoder for [CollectionVideoContribution]
            Decoders.addDecoder(clazz: [CollectionVideoContribution].self) { (source: AnyObject) -> [CollectionVideoContribution] in
                return Decoders.decode(clazz: [CollectionVideoContribution].self, source: source)
            }
            // Decoder for CollectionVideoContribution
            Decoders.addDecoder(clazz: CollectionVideoContribution.self) { (source: AnyObject) -> CollectionVideoContribution in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CollectionVideoContribution()
                return instance
            }


            // Decoder for [Collectionstring]
            Decoders.addDecoder(clazz: [Collectionstring].self) { (source: AnyObject) -> [Collectionstring] in
                return Decoders.decode(clazz: [Collectionstring].self, source: source)
            }
            // Decoder for Collectionstring
            Decoders.addDecoder(clazz: Collectionstring.self) { (source: AnyObject) -> Collectionstring in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Collectionstring()
                return instance
            }


            // Decoder for [CommentResource]
            Decoders.addDecoder(clazz: [CommentResource].self) { (source: AnyObject) -> [CommentResource] in
                return Decoders.decode(clazz: [CommentResource].self, source: source)
            }
            // Decoder for CommentResource
            Decoders.addDecoder(clazz: CommentResource.self) { (source: AnyObject) -> CommentResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CommentResource()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [CommentSearch]
            Decoders.addDecoder(clazz: [CommentSearch].self) { (source: AnyObject) -> [CommentSearch] in
                return Decoders.decode(clazz: [CommentSearch].self, source: source)
            }
            // Decoder for CommentSearch
            Decoders.addDecoder(clazz: CommentSearch.self) { (source: AnyObject) -> CommentSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CommentSearch()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"])
                instance.ownerUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner_username"])
                return instance
            }


            // Decoder for [Config]
            Decoders.addDecoder(clazz: [Config].self) { (source: AnyObject) -> [Config] in
                return Decoders.decode(clazz: [Config].self, source: source)
            }
            // Decoder for Config
            Decoders.addDecoder(clazz: Config.self) { (source: AnyObject) -> Config in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Config()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.publicRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public_read"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ContributionResource]
            Decoders.addDecoder(clazz: [ContributionResource].self) { (source: AnyObject) -> [ContributionResource] in
                return Decoders.decode(clazz: [ContributionResource].self, source: source)
            }
            // Decoder for ContributionResource
            Decoders.addDecoder(clazz: ContributionResource.self) { (source: AnyObject) -> ContributionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContributionResource()
                instance.artist = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["artist"])
                instance.media = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["media"])
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"])
                return instance
            }


            // Decoder for [Country]
            Decoders.addDecoder(clazz: [Country].self) { (source: AnyObject) -> [Country] in
                return Decoders.decode(clazz: [Country].self, source: source)
            }
            // Decoder for Country
            Decoders.addDecoder(clazz: Country.self) { (source: AnyObject) -> Country in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Country()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"])
                instance.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [CountryResource]
            Decoders.addDecoder(clazz: [CountryResource].self) { (source: AnyObject) -> [CountryResource] in
                return Decoders.decode(clazz: [CountryResource].self, source: source)
            }
            // Decoder for CountryResource
            Decoders.addDecoder(clazz: CountryResource.self) { (source: AnyObject) -> CountryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CountryResource()
                instance.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"])
                instance.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [CountryTaxResource]
            Decoders.addDecoder(clazz: [CountryTaxResource].self) { (source: AnyObject) -> [CountryTaxResource] in
                return Decoders.decode(clazz: [CountryTaxResource].self, source: source)
            }
            // Decoder for CountryTaxResource
            Decoders.addDecoder(clazz: CountryTaxResource.self) { (source: AnyObject) -> CountryTaxResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CountryTaxResource()
                instance.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"])
                return instance
            }


            // Decoder for [CouponDefinition]
            Decoders.addDecoder(clazz: [CouponDefinition].self) { (source: AnyObject) -> [CouponDefinition] in
                return Decoders.decode(clazz: [CouponDefinition].self, source: source)
            }
            // Decoder for CouponDefinition
            Decoders.addDecoder(clazz: CouponDefinition.self) { (source: AnyObject) -> CouponDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CouponDefinition()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.discountType = CouponDefinition.DiscountType(rawValue: (sourceDictionary["discount_type"] as? String) ?? "") 
                instance.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"])
                instance.maxDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_discount"])
                instance.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"])
                instance.minCartTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_cart_total"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"])
                instance.targetItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["target_item_id"])
                instance.type = CouponDefinition.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [CouponItem]
            Decoders.addDecoder(clazz: [CouponItem].self) { (source: AnyObject) -> [CouponItem] in
                return Decoders.decode(clazz: [CouponItem].self, source: source)
            }
            // Decoder for CouponItem
            Decoders.addDecoder(clazz: CouponItem.self) { (source: AnyObject) -> CouponItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CouponItem()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.couponTypeHint = CouponItem.CouponTypeHint(rawValue: (sourceDictionary["coupon_type_hint"] as? String) ?? "") 
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.discountMax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_max"])
                instance.discountMinCartValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_min_cart_value"])
                instance.discountType = CouponItem.DiscountType(rawValue: (sourceDictionary["discount_type"] as? String) ?? "") 
                instance.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"])
                instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"])
                instance.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"])
                instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"])
                instance.geoPolicyType = CouponItem.GeoPolicyType(rawValue: (sourceDictionary["geo_policy_type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"])
                instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"])
                instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [CreateBillingAgreementRequest]
            Decoders.addDecoder(clazz: [CreateBillingAgreementRequest].self) { (source: AnyObject) -> [CreateBillingAgreementRequest] in
                return Decoders.decode(clazz: [CreateBillingAgreementRequest].self, source: source)
            }
            // Decoder for CreateBillingAgreementRequest
            Decoders.addDecoder(clazz: CreateBillingAgreementRequest.self) { (source: AnyObject) -> CreateBillingAgreementRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateBillingAgreementRequest()
                instance.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"])
                instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [CreatePayPalPaymentRequest]
            Decoders.addDecoder(clazz: [CreatePayPalPaymentRequest].self) { (source: AnyObject) -> [CreatePayPalPaymentRequest] in
                return Decoders.decode(clazz: [CreatePayPalPaymentRequest].self, source: source)
            }
            // Decoder for CreatePayPalPaymentRequest
            Decoders.addDecoder(clazz: CreatePayPalPaymentRequest.self) { (source: AnyObject) -> CreatePayPalPaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreatePayPalPaymentRequest()
                instance.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"])
                return instance
            }


            // Decoder for [Currency]
            Decoders.addDecoder(clazz: [Currency].self) { (source: AnyObject) -> [Currency] in
                return Decoders.decode(clazz: [Currency].self, source: source)
            }
            // Decoder for Currency
            Decoders.addDecoder(clazz: Currency.self) { (source: AnyObject) -> Currency in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Currency()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"])
                instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"])
                instance.factor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factor"])
                instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Currency.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.virtual = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["virtual"])
                return instance
            }


            // Decoder for [CurrencyResource]
            Decoders.addDecoder(clazz: [CurrencyResource].self) { (source: AnyObject) -> [CurrencyResource] in
                return Decoders.decode(clazz: [CurrencyResource].self, source: source)
            }
            // Decoder for CurrencyResource
            Decoders.addDecoder(clazz: CurrencyResource.self) { (source: AnyObject) -> CurrencyResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CurrencyResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.factor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factor"])
                instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = CurrencyResource.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [DeltaResource]
            Decoders.addDecoder(clazz: [DeltaResource].self) { (source: AnyObject) -> [DeltaResource] in
                return Decoders.decode(clazz: [DeltaResource].self, source: source)
            }
            // Decoder for DeltaResource
            Decoders.addDecoder(clazz: DeltaResource.self) { (source: AnyObject) -> DeltaResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeltaResource()
                instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"])
                instance.mediaType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["media_type"])
                instance.questionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question_id"])
                instance.state = DeltaResource.State(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [DeviceResource]
            Decoders.addDecoder(clazz: [DeviceResource].self) { (source: AnyObject) -> [DeviceResource] in
                return Decoders.decode(clazz: [DeviceResource].self, source: source)
            }
            // Decoder for DeviceResource
            Decoders.addDecoder(clazz: DeviceResource.self) { (source: AnyObject) -> DeviceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceResource()
                instance.authorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorization"])
                instance.condition = DeviceResource.Condition(rawValue: (sourceDictionary["condition"] as? String) ?? "") 
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.deviceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["device_type"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mac_address"])
                instance.make = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["make"])
                instance.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["os"])
                instance.serial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serial"])
                instance.status = DeviceResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [Discount]
            Decoders.addDecoder(clazz: [Discount].self) { (source: AnyObject) -> [Discount] in
                return Decoders.decode(clazz: [Discount].self, source: source)
            }
            // Decoder for Discount
            Decoders.addDecoder(clazz: Discount.self) { (source: AnyObject) -> Discount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Discount()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [DispositionCount]
            Decoders.addDecoder(clazz: [DispositionCount].self) { (source: AnyObject) -> [DispositionCount] in
                return Decoders.decode(clazz: [DispositionCount].self, source: source)
            }
            // Decoder for DispositionCount
            Decoders.addDecoder(clazz: DispositionCount.self) { (source: AnyObject) -> DispositionCount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispositionCount()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [DispositionResource]
            Decoders.addDecoder(clazz: [DispositionResource].self) { (source: AnyObject) -> [DispositionResource] in
                return Decoders.decode(clazz: [DispositionResource].self, source: source)
            }
            // Decoder for DispositionResource
            Decoders.addDecoder(clazz: DispositionResource.self) { (source: AnyObject) -> DispositionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DispositionResource()
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [EntitlementGrantRequest]
            Decoders.addDecoder(clazz: [EntitlementGrantRequest].self) { (source: AnyObject) -> [EntitlementGrantRequest] in
                return Decoders.decode(clazz: [EntitlementGrantRequest].self, source: source)
            }
            // Decoder for EntitlementGrantRequest
            Decoders.addDecoder(clazz: EntitlementGrantRequest.self) { (source: AnyObject) -> EntitlementGrantRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntitlementGrantRequest()
                instance.entitlementId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["entitlement_id"])
                return instance
            }


            // Decoder for [EntitlementItem]
            Decoders.addDecoder(clazz: [EntitlementItem].self) { (source: AnyObject) -> [EntitlementItem] in
                return Decoders.decode(clazz: [EntitlementItem].self, source: source)
            }
            // Decoder for EntitlementItem
            Decoders.addDecoder(clazz: EntitlementItem.self) { (source: AnyObject) -> EntitlementItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntitlementItem()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [ErrorResource]
            Decoders.addDecoder(clazz: [ErrorResource].self) { (source: AnyObject) -> [ErrorResource] in
                return Decoders.decode(clazz: [ErrorResource].self, source: source)
            }
            // Decoder for ErrorResource
            Decoders.addDecoder(clazz: ErrorResource.self) { (source: AnyObject) -> ErrorResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ErrorResource()
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.field = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["field"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [Expressionobject]
            Decoders.addDecoder(clazz: [Expressionobject].self) { (source: AnyObject) -> [Expressionobject] in
                return Decoders.decode(clazz: [Expressionobject].self, source: source)
            }
            // Decoder for Expressionobject
            Decoders.addDecoder(clazz: Expressionobject.self) { (source: AnyObject) -> Expressionobject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Expressionobject()
                return instance
            }


            // Decoder for [FinalizeBillingAgreementRequest]
            Decoders.addDecoder(clazz: [FinalizeBillingAgreementRequest].self) { (source: AnyObject) -> [FinalizeBillingAgreementRequest] in
                return Decoders.decode(clazz: [FinalizeBillingAgreementRequest].self, source: source)
            }
            // Decoder for FinalizeBillingAgreementRequest
            Decoders.addDecoder(clazz: FinalizeBillingAgreementRequest.self) { (source: AnyObject) -> FinalizeBillingAgreementRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FinalizeBillingAgreementRequest()
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.newDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["new_default"])
                instance.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [FinalizePayPalPaymentRequest]
            Decoders.addDecoder(clazz: [FinalizePayPalPaymentRequest].self) { (source: AnyObject) -> [FinalizePayPalPaymentRequest] in
                return Decoders.decode(clazz: [FinalizePayPalPaymentRequest].self, source: source)
            }
            // Decoder for FinalizePayPalPaymentRequest
            Decoders.addDecoder(clazz: FinalizePayPalPaymentRequest.self) { (source: AnyObject) -> FinalizePayPalPaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FinalizePayPalPaymentRequest()
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                return instance
            }


            // Decoder for [FlagReportResource]
            Decoders.addDecoder(clazz: [FlagReportResource].self) { (source: AnyObject) -> [FlagReportResource] in
                return Decoders.decode(clazz: [FlagReportResource].self, source: source)
            }
            // Decoder for FlagReportResource
            Decoders.addDecoder(clazz: FlagReportResource.self) { (source: AnyObject) -> FlagReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlagReportResource()
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.resolution = FlagReportResource.Resolution(rawValue: (sourceDictionary["resolution"] as? String) ?? "") 
                instance.resolved = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["resolved"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [FlagResource]
            Decoders.addDecoder(clazz: [FlagResource].self) { (source: AnyObject) -> [FlagResource] in
                return Decoders.decode(clazz: [FlagResource].self, source: source)
            }
            // Decoder for FlagResource
            Decoders.addDecoder(clazz: FlagResource.self) { (source: AnyObject) -> FlagResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlagResource()
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [ForwardLog]
            Decoders.addDecoder(clazz: [ForwardLog].self) { (source: AnyObject) -> [ForwardLog] in
                return Decoders.decode(clazz: [ForwardLog].self, source: source)
            }
            // Decoder for ForwardLog
            Decoders.addDecoder(clazz: ForwardLog.self) { (source: AnyObject) -> ForwardLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ForwardLog()
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"])
                instance.errorMsg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_msg"])
                instance.httpStatusCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["http_status_code"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.payload = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["payload"])
                instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"])
                instance.retryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retry_count"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [FulfillmentType]
            Decoders.addDecoder(clazz: [FulfillmentType].self) { (source: AnyObject) -> [FulfillmentType] in
                return Decoders.decode(clazz: [FulfillmentType].self, source: source)
            }
            // Decoder for FulfillmentType
            Decoders.addDecoder(clazz: FulfillmentType.self) { (source: AnyObject) -> FulfillmentType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FulfillmentType()
                instance.core = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["core"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GooglePaymentRequest]
            Decoders.addDecoder(clazz: [GooglePaymentRequest].self) { (source: AnyObject) -> [GooglePaymentRequest] in
                return Decoders.decode(clazz: [GooglePaymentRequest].self, source: source)
            }
            // Decoder for GooglePaymentRequest
            Decoders.addDecoder(clazz: GooglePaymentRequest.self) { (source: AnyObject) -> GooglePaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GooglePaymentRequest()
                instance.jsonPayload = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["json_payload"])
                instance.signature = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signature"])
                return instance
            }


            // Decoder for [GrantTypeResource]
            Decoders.addDecoder(clazz: [GrantTypeResource].self) { (source: AnyObject) -> [GrantTypeResource] in
                return Decoders.decode(clazz: [GrantTypeResource].self, source: source)
            }
            // Decoder for GrantTypeResource
            Decoders.addDecoder(clazz: GrantTypeResource.self) { (source: AnyObject) -> GrantTypeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GrantTypeResource()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Group]
            Decoders.addDecoder(clazz: [Group].self) { (source: AnyObject) -> [Group] in
                return Decoders.decode(clazz: [Group].self, source: source)
            }
            // Decoder for Group
            Decoders.addDecoder(clazz: Group.self) { (source: AnyObject) -> Group in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Group()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"])
                instance.messageOfTheDay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message_of_the_day"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parent = Decoders.decodeOptional(clazz: Group.self, source: sourceDictionary["parent"])
                instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"])
                instance.status = Group.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.subMemberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sub_member_count"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_name"])
                return instance
            }


            // Decoder for [GroupMember]
            Decoders.addDecoder(clazz: [GroupMember].self) { (source: AnyObject) -> [GroupMember] in
                return Decoders.decode(clazz: [GroupMember].self, source: source)
            }
            // Decoder for GroupMember
            Decoders.addDecoder(clazz: GroupMember.self) { (source: AnyObject) -> GroupMember in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupMember()
                instance.group = Decoders.decodeOptional(clazz: Group.self, source: sourceDictionary["group"])
                instance.secondary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["secondary"])
                instance.status = GroupMember.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.user = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [GroupMemberResource]
            Decoders.addDecoder(clazz: [GroupMemberResource].self) { (source: AnyObject) -> [GroupMemberResource] in
                return Decoders.decode(clazz: [GroupMemberResource].self, source: source)
            }
            // Decoder for GroupMemberResource
            Decoders.addDecoder(clazz: GroupMemberResource.self) { (source: AnyObject) -> GroupMemberResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupMemberResource()
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.status = GroupMemberResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [GroupResource]
            Decoders.addDecoder(clazz: [GroupResource].self) { (source: AnyObject) -> [GroupResource] in
                return Decoders.decode(clazz: [GroupResource].self, source: source)
            }
            // Decoder for GroupResource
            Decoders.addDecoder(clazz: GroupResource.self) { (source: AnyObject) -> GroupResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"])
                instance.messageOfTheDay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message_of_the_day"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"])
                instance.status = GroupResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.subMemberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sub_member_count"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_name"])
                return instance
            }


            // Decoder for [ImportJobOutputResource]
            Decoders.addDecoder(clazz: [ImportJobOutputResource].self) { (source: AnyObject) -> [ImportJobOutputResource] in
                return Decoders.decode(clazz: [ImportJobOutputResource].self, source: source)
            }
            // Decoder for ImportJobOutputResource
            Decoders.addDecoder(clazz: ImportJobOutputResource.self) { (source: AnyObject) -> ImportJobOutputResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImportJobOutputResource()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.lineNumber = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["line_number"])
                return instance
            }


            // Decoder for [ImportJobResource]
            Decoders.addDecoder(clazz: [ImportJobResource].self) { (source: AnyObject) -> [ImportJobResource] in
                return Decoders.decode(clazz: [ImportJobResource].self, source: source)
            }
            // Decoder for ImportJobResource
            Decoders.addDecoder(clazz: ImportJobResource.self) { (source: AnyObject) -> ImportJobResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImportJobResource()
                instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.output = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["output"])
                instance.recordCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["record_count"])
                instance.status = ImportJobResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"])
                return instance
            }


            // Decoder for [InventorySubscriptionResource]
            Decoders.addDecoder(clazz: [InventorySubscriptionResource].self) { (source: AnyObject) -> [InventorySubscriptionResource] in
                return Decoders.decode(clazz: [InventorySubscriptionResource].self, source: source)
            }
            // Decoder for InventorySubscriptionResource
            Decoders.addDecoder(clazz: InventorySubscriptionResource.self) { (source: AnyObject) -> InventorySubscriptionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InventorySubscriptionResource()
                instance.billDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bill_date"])
                instance.credit = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["credit"])
                instance.creditLog = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["credit_log"])
                instance.graceEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["grace_end"])
                instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"])
                instance.inventoryStatus = InventorySubscriptionResource.InventoryStatus(rawValue: (sourceDictionary["inventory_status"] as? String) ?? "") 
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.paymentMethod = Decoders.decodeOptional(clazz: PaymentMethodResource.self, source: sourceDictionary["payment_method"])
                instance.recurringPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_price"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.subscriptionStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["subscription_status"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [InvoiceCreateRequest]
            Decoders.addDecoder(clazz: [InvoiceCreateRequest].self) { (source: AnyObject) -> [InvoiceCreateRequest] in
                return Decoders.decode(clazz: [InvoiceCreateRequest].self, source: source)
            }
            // Decoder for InvoiceCreateRequest
            Decoders.addDecoder(clazz: InvoiceCreateRequest.self) { (source: AnyObject) -> InvoiceCreateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvoiceCreateRequest()
                instance.cartGuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_guid"])
                return instance
            }


            // Decoder for [InvoiceItemResource]
            Decoders.addDecoder(clazz: [InvoiceItemResource].self) { (source: AnyObject) -> [InvoiceItemResource] in
                return Decoders.decode(clazz: [InvoiceItemResource].self, source: source)
            }
            // Decoder for InvoiceItemResource
            Decoders.addDecoder(clazz: InvoiceItemResource.self) { (source: AnyObject) -> InvoiceItemResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvoiceItemResource()
                instance.affiliateId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["affiliate_id"])
                instance.bundleSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_sku"])
                instance.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"])
                instance.originalTotalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_total_price"])
                instance.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"])
                instance.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"])
                instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"])
                instance.systemPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["system_price"])
                instance.totalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total_price"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"])
                return instance
            }


            // Decoder for [InvoiceLogEntry]
            Decoders.addDecoder(clazz: [InvoiceLogEntry].self) { (source: AnyObject) -> [InvoiceLogEntry] in
                return Decoders.decode(clazz: [InvoiceLogEntry].self, source: source)
            }
            // Decoder for InvoiceLogEntry
            Decoders.addDecoder(clazz: InvoiceLogEntry.self) { (source: AnyObject) -> InvoiceLogEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvoiceLogEntry()
                instance.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [InvoicePaymentStatusRequest]
            Decoders.addDecoder(clazz: [InvoicePaymentStatusRequest].self) { (source: AnyObject) -> [InvoicePaymentStatusRequest] in
                return Decoders.decode(clazz: [InvoicePaymentStatusRequest].self, source: source)
            }
            // Decoder for InvoicePaymentStatusRequest
            Decoders.addDecoder(clazz: InvoicePaymentStatusRequest.self) { (source: AnyObject) -> InvoicePaymentStatusRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvoicePaymentStatusRequest()
                instance.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [InvoiceResource]
            Decoders.addDecoder(clazz: [InvoiceResource].self) { (source: AnyObject) -> [InvoiceResource] in
                return Decoders.decode(clazz: [InvoiceResource].self, source: source)
            }
            // Decoder for InvoiceResource
            Decoders.addDecoder(clazz: InvoiceResource.self) { (source: AnyObject) -> InvoiceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvoiceResource()
                instance.billingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address1"])
                instance.billingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address2"])
                instance.billingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_city_name"])
                instance.billingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_country_name"])
                instance.billingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_full_name"])
                instance.billingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_postal_code"])
                instance.billingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_state_name"])
                instance.cartId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_id"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"])
                instance.currentPaymentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_payment_status"])
                instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.externalRef = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["external_ref"])
                instance.fedTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fed_tax"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoiceNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invoice_number"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"])
                instance.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"])
                instance.parentInvoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent_invoice_id"])
                instance.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.shipping = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping"])
                instance.shippingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address1"])
                instance.shippingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address2"])
                instance.shippingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_city_name"])
                instance.shippingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_country_name"])
                instance.shippingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_full_name"])
                instance.shippingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_postal_code"])
                instance.shippingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_state_name"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"])
                return instance
            }


            // Decoder for [ItemBehaviorDefinitionResource]
            Decoders.addDecoder(clazz: [ItemBehaviorDefinitionResource].self) { (source: AnyObject) -> [ItemBehaviorDefinitionResource] in
                return Decoders.decode(clazz: [ItemBehaviorDefinitionResource].self, source: source)
            }
            // Decoder for ItemBehaviorDefinitionResource
            Decoders.addDecoder(clazz: ItemBehaviorDefinitionResource.self) { (source: AnyObject) -> ItemBehaviorDefinitionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemBehaviorDefinitionResource()
                instance.behavior = Decoders.decodeOptional(clazz: Behavior.self, source: sourceDictionary["behavior"])
                instance.modifiable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["modifiable"])
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"])
                return instance
            }


            // Decoder for [ItemTemplateResource]
            Decoders.addDecoder(clazz: [ItemTemplateResource].self) { (source: AnyObject) -> [ItemTemplateResource] in
                return Decoders.decode(clazz: [ItemTemplateResource].self, source: source)
            }
            // Decoder for ItemTemplateResource
            Decoders.addDecoder(clazz: ItemTemplateResource.self) { (source: AnyObject) -> ItemTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemTemplateResource()
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [KeyValuePairstringstring]
            Decoders.addDecoder(clazz: [KeyValuePairstringstring].self) { (source: AnyObject) -> [KeyValuePairstringstring] in
                return Decoders.decode(clazz: [KeyValuePairstringstring].self, source: source)
            }
            // Decoder for KeyValuePairstringstring
            Decoders.addDecoder(clazz: KeyValuePairstringstring.self) { (source: AnyObject) -> KeyValuePairstringstring in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = KeyValuePairstringstring()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [Language]
            Decoders.addDecoder(clazz: [Language].self) { (source: AnyObject) -> [Language] in
                return Decoders.decode(clazz: [Language].self, source: source)
            }
            // Decoder for Language
            Decoders.addDecoder(clazz: Language.self) { (source: AnyObject) -> Language in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Language()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"])
                instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.isPrimary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_primary"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [LeaderboardEntryResource]
            Decoders.addDecoder(clazz: [LeaderboardEntryResource].self) { (source: AnyObject) -> [LeaderboardEntryResource] in
                return Decoders.decode(clazz: [LeaderboardEntryResource].self, source: source)
            }
            // Decoder for LeaderboardEntryResource
            Decoders.addDecoder(clazz: LeaderboardEntryResource.self) { (source: AnyObject) -> LeaderboardEntryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LeaderboardEntryResource()
                instance.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"])
                instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [LeaderboardResource]
            Decoders.addDecoder(clazz: [LeaderboardResource].self) { (source: AnyObject) -> [LeaderboardResource] in
                return Decoders.decode(clazz: [LeaderboardResource].self, source: source)
            }
            // Decoder for LeaderboardResource
            Decoders.addDecoder(clazz: LeaderboardResource.self) { (source: AnyObject) -> LeaderboardResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LeaderboardResource()
                instance.entries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entries"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.strategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["strategy"])
                return instance
            }


            // Decoder for [LevelingResource]
            Decoders.addDecoder(clazz: [LevelingResource].self) { (source: AnyObject) -> [LevelingResource] in
                return Decoders.decode(clazz: [LevelingResource].self, source: source)
            }
            // Decoder for LevelingResource
            Decoders.addDecoder(clazz: LevelingResource.self) { (source: AnyObject) -> LevelingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LevelingResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.tiers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tiers"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [Localizer]
            Decoders.addDecoder(clazz: [Localizer].self) { (source: AnyObject) -> [Localizer] in
                return Decoders.decode(clazz: [Localizer].self, source: source)
            }
            // Decoder for Localizer
            Decoders.addDecoder(clazz: Localizer.self) { (source: AnyObject) -> Localizer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Localizer()
                return instance
            }


            // Decoder for [LocationLogResource]
            Decoders.addDecoder(clazz: [LocationLogResource].self) { (source: AnyObject) -> [LocationLogResource] in
                return Decoders.decode(clazz: [LocationLogResource].self, source: source)
            }
            // Decoder for LocationLogResource
            Decoders.addDecoder(clazz: LocationLogResource.self) { (source: AnyObject) -> LocationLogResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocationLogResource()
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [LookupTypeResource]
            Decoders.addDecoder(clazz: [LookupTypeResource].self) { (source: AnyObject) -> [LookupTypeResource] in
                return Decoders.decode(clazz: [LookupTypeResource].self, source: source)
            }
            // Decoder for LookupTypeResource
            Decoders.addDecoder(clazz: LookupTypeResource.self) { (source: AnyObject) -> LookupTypeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LookupTypeResource()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.keyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"])
                return instance
            }


            // Decoder for [Maintenance]
            Decoders.addDecoder(clazz: [Maintenance].self) { (source: AnyObject) -> [Maintenance] in
                return Decoders.decode(clazz: [Maintenance].self, source: source)
            }
            // Decoder for Maintenance
            Decoders.addDecoder(clazz: Maintenance.self) { (source: AnyObject) -> Maintenance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Maintenance()
                instance.accessLocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["access_locked"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [Mapstringobject]
            Decoders.addDecoder(clazz: [Mapstringobject].self) { (source: AnyObject) -> [Mapstringobject] in
                return Decoders.decode(clazz: [Mapstringobject].self, source: source)
            }
            // Decoder for Mapstringobject
            Decoders.addDecoder(clazz: Mapstringobject.self) { (source: AnyObject) -> Mapstringobject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Mapstringobject()
                return instance
            }


            // Decoder for [MetricResource]
            Decoders.addDecoder(clazz: [MetricResource].self) { (source: AnyObject) -> [MetricResource] in
                return Decoders.decode(clazz: [MetricResource].self, source: source)
            }
            // Decoder for MetricResource
            Decoders.addDecoder(clazz: MetricResource.self) { (source: AnyObject) -> MetricResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetricResource()
                instance.activityOccurenceId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_occurence_id"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [NestedCategory]
            Decoders.addDecoder(clazz: [NestedCategory].self) { (source: AnyObject) -> [NestedCategory] in
                return Decoders.decode(clazz: [NestedCategory].self, source: source)
            }
            // Decoder for NestedCategory
            Decoders.addDecoder(clazz: NestedCategory.self) { (source: AnyObject) -> NestedCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NestedCategory()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [NewPasswordRequest]
            Decoders.addDecoder(clazz: [NewPasswordRequest].self) { (source: AnyObject) -> [NewPasswordRequest] in
                return Decoders.decode(clazz: [NewPasswordRequest].self, source: source)
            }
            // Decoder for NewPasswordRequest
            Decoders.addDecoder(clazz: NewPasswordRequest.self) { (source: AnyObject) -> NewPasswordRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NewPasswordRequest()
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"])
                return instance
            }


            // Decoder for [OAuth2Resource]
            Decoders.addDecoder(clazz: [OAuth2Resource].self) { (source: AnyObject) -> [OAuth2Resource] in
                return Decoders.decode(clazz: [OAuth2Resource].self, source: source)
            }
            // Decoder for OAuth2Resource
            Decoders.addDecoder(clazz: OAuth2Resource.self) { (source: AnyObject) -> OAuth2Resource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OAuth2Resource()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                instance.expiresIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expires_in"])
                instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scope"])
                instance.tokenType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token_type"])
                return instance
            }


            // Decoder for [OauthAccessTokenResource]
            Decoders.addDecoder(clazz: [OauthAccessTokenResource].self) { (source: AnyObject) -> [OauthAccessTokenResource] in
                return Decoders.decode(clazz: [OauthAccessTokenResource].self, source: source)
            }
            // Decoder for OauthAccessTokenResource
            Decoders.addDecoder(clazz: OauthAccessTokenResource.self) { (source: AnyObject) -> OauthAccessTokenResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OauthAccessTokenResource()
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [Operator]
            Decoders.addDecoder(clazz: [Operator].self) { (source: AnyObject) -> [Operator] in
                return Decoders.decode(clazz: [Operator].self, source: source)
            }
            // Decoder for Operator
            Decoders.addDecoder(clazz: Operator.self) { (source: AnyObject) -> Operator in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Operator()
                return instance
            }


            // Decoder for [OptimalPaymentRequest]
            Decoders.addDecoder(clazz: [OptimalPaymentRequest].self) { (source: AnyObject) -> [OptimalPaymentRequest] in
                return Decoders.decode(clazz: [OptimalPaymentRequest].self, source: source)
            }
            // Decoder for OptimalPaymentRequest
            Decoders.addDecoder(clazz: OptimalPaymentRequest.self) { (source: AnyObject) -> OptimalPaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OptimalPaymentRequest()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.onDecline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_decline"])
                instance.onError = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_error"])
                instance.onSuccess = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_success"])
                return instance
            }


            // Decoder for [Order]
            Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
                return Decoders.decode(clazz: [Order].self, source: source)
            }
            // Decoder for Order
            Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Order()
                instance.ascending = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ascending"])
                instance.direction = Order.Direction(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.ignoreCase = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ignore_case"])
                instance.nullHandling = Order.NullHandling(rawValue: (sourceDictionary["null_handling"] as? String) ?? "") 
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                return instance
            }


            // Decoder for [PageResourceAchievementDefinitionResource]
            Decoders.addDecoder(clazz: [PageResourceAchievementDefinitionResource].self) { (source: AnyObject) -> [PageResourceAchievementDefinitionResource] in
                return Decoders.decode(clazz: [PageResourceAchievementDefinitionResource].self, source: source)
            }
            // Decoder for PageResourceAchievementDefinitionResource
            Decoders.addDecoder(clazz: PageResourceAchievementDefinitionResource.self) { (source: AnyObject) -> PageResourceAchievementDefinitionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceAchievementDefinitionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceAggregateCountResource]
            Decoders.addDecoder(clazz: [PageResourceAggregateCountResource].self) { (source: AnyObject) -> [PageResourceAggregateCountResource] in
                return Decoders.decode(clazz: [PageResourceAggregateCountResource].self, source: source)
            }
            // Decoder for PageResourceAggregateCountResource
            Decoders.addDecoder(clazz: PageResourceAggregateCountResource.self) { (source: AnyObject) -> PageResourceAggregateCountResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceAggregateCountResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceAggregateInvoiceReportResource]
            Decoders.addDecoder(clazz: [PageResourceAggregateInvoiceReportResource].self) { (source: AnyObject) -> [PageResourceAggregateInvoiceReportResource] in
                return Decoders.decode(clazz: [PageResourceAggregateInvoiceReportResource].self, source: source)
            }
            // Decoder for PageResourceAggregateInvoiceReportResource
            Decoders.addDecoder(clazz: PageResourceAggregateInvoiceReportResource.self) { (source: AnyObject) -> PageResourceAggregateInvoiceReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceAggregateInvoiceReportResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceArticleResource]
            Decoders.addDecoder(clazz: [PageResourceArticleResource].self) { (source: AnyObject) -> [PageResourceArticleResource] in
                return Decoders.decode(clazz: [PageResourceArticleResource].self, source: source)
            }
            // Decoder for PageResourceArticleResource
            Decoders.addDecoder(clazz: PageResourceArticleResource.self) { (source: AnyObject) -> PageResourceArticleResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceArticleResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceArtistResource]
            Decoders.addDecoder(clazz: [PageResourceArtistResource].self) { (source: AnyObject) -> [PageResourceArtistResource] in
                return Decoders.decode(clazz: [PageResourceArtistResource].self, source: source)
            }
            // Decoder for PageResourceArtistResource
            Decoders.addDecoder(clazz: PageResourceArtistResource.self) { (source: AnyObject) -> PageResourceArtistResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceArtistResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBareActivityResource]
            Decoders.addDecoder(clazz: [PageResourceBareActivityResource].self) { (source: AnyObject) -> [PageResourceBareActivityResource] in
                return Decoders.decode(clazz: [PageResourceBareActivityResource].self, source: source)
            }
            // Decoder for PageResourceBareActivityResource
            Decoders.addDecoder(clazz: PageResourceBareActivityResource.self) { (source: AnyObject) -> PageResourceBareActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBareActivityResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBareChallengeActivityResource]
            Decoders.addDecoder(clazz: [PageResourceBareChallengeActivityResource].self) { (source: AnyObject) -> [PageResourceBareChallengeActivityResource] in
                return Decoders.decode(clazz: [PageResourceBareChallengeActivityResource].self, source: source)
            }
            // Decoder for PageResourceBareChallengeActivityResource
            Decoders.addDecoder(clazz: PageResourceBareChallengeActivityResource.self) { (source: AnyObject) -> PageResourceBareChallengeActivityResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBareChallengeActivityResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBillingReport]
            Decoders.addDecoder(clazz: [PageResourceBillingReport].self) { (source: AnyObject) -> [PageResourceBillingReport] in
                return Decoders.decode(clazz: [PageResourceBillingReport].self, source: source)
            }
            // Decoder for PageResourceBillingReport
            Decoders.addDecoder(clazz: PageResourceBillingReport.self) { (source: AnyObject) -> PageResourceBillingReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBillingReport()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBreCategoryResource]
            Decoders.addDecoder(clazz: [PageResourceBreCategoryResource].self) { (source: AnyObject) -> [PageResourceBreCategoryResource] in
                return Decoders.decode(clazz: [PageResourceBreCategoryResource].self, source: source)
            }
            // Decoder for PageResourceBreCategoryResource
            Decoders.addDecoder(clazz: PageResourceBreCategoryResource.self) { (source: AnyObject) -> PageResourceBreCategoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBreCategoryResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBreEventLog]
            Decoders.addDecoder(clazz: [PageResourceBreEventLog].self) { (source: AnyObject) -> [PageResourceBreEventLog] in
                return Decoders.decode(clazz: [PageResourceBreEventLog].self, source: source)
            }
            // Decoder for PageResourceBreEventLog
            Decoders.addDecoder(clazz: PageResourceBreEventLog.self) { (source: AnyObject) -> PageResourceBreEventLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBreEventLog()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBreGlobalResource]
            Decoders.addDecoder(clazz: [PageResourceBreGlobalResource].self) { (source: AnyObject) -> [PageResourceBreGlobalResource] in
                return Decoders.decode(clazz: [PageResourceBreGlobalResource].self, source: source)
            }
            // Decoder for PageResourceBreGlobalResource
            Decoders.addDecoder(clazz: PageResourceBreGlobalResource.self) { (source: AnyObject) -> PageResourceBreGlobalResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBreGlobalResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBreRule]
            Decoders.addDecoder(clazz: [PageResourceBreRule].self) { (source: AnyObject) -> [PageResourceBreRule] in
                return Decoders.decode(clazz: [PageResourceBreRule].self, source: source)
            }
            // Decoder for PageResourceBreRule
            Decoders.addDecoder(clazz: PageResourceBreRule.self) { (source: AnyObject) -> PageResourceBreRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBreRule()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceBreTriggerResource]
            Decoders.addDecoder(clazz: [PageResourceBreTriggerResource].self) { (source: AnyObject) -> [PageResourceBreTriggerResource] in
                return Decoders.decode(clazz: [PageResourceBreTriggerResource].self, source: source)
            }
            // Decoder for PageResourceBreTriggerResource
            Decoders.addDecoder(clazz: PageResourceBreTriggerResource.self) { (source: AnyObject) -> PageResourceBreTriggerResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceBreTriggerResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCampaignResource]
            Decoders.addDecoder(clazz: [PageResourceCampaignResource].self) { (source: AnyObject) -> [PageResourceCampaignResource] in
                return Decoders.decode(clazz: [PageResourceCampaignResource].self, source: source)
            }
            // Decoder for PageResourceCampaignResource
            Decoders.addDecoder(clazz: PageResourceCampaignResource.self) { (source: AnyObject) -> PageResourceCampaignResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCampaignResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCartSummary]
            Decoders.addDecoder(clazz: [PageResourceCartSummary].self) { (source: AnyObject) -> [PageResourceCartSummary] in
                return Decoders.decode(clazz: [PageResourceCartSummary].self, source: source)
            }
            // Decoder for PageResourceCartSummary
            Decoders.addDecoder(clazz: PageResourceCartSummary.self) { (source: AnyObject) -> PageResourceCartSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCartSummary()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCatalogSale]
            Decoders.addDecoder(clazz: [PageResourceCatalogSale].self) { (source: AnyObject) -> [PageResourceCatalogSale] in
                return Decoders.decode(clazz: [PageResourceCatalogSale].self, source: source)
            }
            // Decoder for PageResourceCatalogSale
            Decoders.addDecoder(clazz: PageResourceCatalogSale.self) { (source: AnyObject) -> PageResourceCatalogSale in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCatalogSale()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCategoryResource]
            Decoders.addDecoder(clazz: [PageResourceCategoryResource].self) { (source: AnyObject) -> [PageResourceCategoryResource] in
                return Decoders.decode(clazz: [PageResourceCategoryResource].self, source: source)
            }
            // Decoder for PageResourceCategoryResource
            Decoders.addDecoder(clazz: PageResourceCategoryResource.self) { (source: AnyObject) -> PageResourceCategoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCategoryResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceChallengeEventParticipantResource]
            Decoders.addDecoder(clazz: [PageResourceChallengeEventParticipantResource].self) { (source: AnyObject) -> [PageResourceChallengeEventParticipantResource] in
                return Decoders.decode(clazz: [PageResourceChallengeEventParticipantResource].self, source: source)
            }
            // Decoder for PageResourceChallengeEventParticipantResource
            Decoders.addDecoder(clazz: PageResourceChallengeEventParticipantResource.self) { (source: AnyObject) -> PageResourceChallengeEventParticipantResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceChallengeEventParticipantResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceChallengeEventResource]
            Decoders.addDecoder(clazz: [PageResourceChallengeEventResource].self) { (source: AnyObject) -> [PageResourceChallengeEventResource] in
                return Decoders.decode(clazz: [PageResourceChallengeEventResource].self, source: source)
            }
            // Decoder for PageResourceChallengeEventResource
            Decoders.addDecoder(clazz: PageResourceChallengeEventResource.self) { (source: AnyObject) -> PageResourceChallengeEventResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceChallengeEventResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceChallengeResource]
            Decoders.addDecoder(clazz: [PageResourceChallengeResource].self) { (source: AnyObject) -> [PageResourceChallengeResource] in
                return Decoders.decode(clazz: [PageResourceChallengeResource].self, source: source)
            }
            // Decoder for PageResourceChallengeResource
            Decoders.addDecoder(clazz: PageResourceChallengeResource.self) { (source: AnyObject) -> PageResourceChallengeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceChallengeResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceClientResource]
            Decoders.addDecoder(clazz: [PageResourceClientResource].self) { (source: AnyObject) -> [PageResourceClientResource] in
                return Decoders.decode(clazz: [PageResourceClientResource].self, source: source)
            }
            // Decoder for PageResourceClientResource
            Decoders.addDecoder(clazz: PageResourceClientResource.self) { (source: AnyObject) -> PageResourceClientResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceClientResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCommentResource]
            Decoders.addDecoder(clazz: [PageResourceCommentResource].self) { (source: AnyObject) -> [PageResourceCommentResource] in
                return Decoders.decode(clazz: [PageResourceCommentResource].self, source: source)
            }
            // Decoder for PageResourceCommentResource
            Decoders.addDecoder(clazz: PageResourceCommentResource.self) { (source: AnyObject) -> PageResourceCommentResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCommentResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceConfig]
            Decoders.addDecoder(clazz: [PageResourceConfig].self) { (source: AnyObject) -> [PageResourceConfig] in
                return Decoders.decode(clazz: [PageResourceConfig].self, source: source)
            }
            // Decoder for PageResourceConfig
            Decoders.addDecoder(clazz: PageResourceConfig.self) { (source: AnyObject) -> PageResourceConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceConfig()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCountryTaxResource]
            Decoders.addDecoder(clazz: [PageResourceCountryTaxResource].self) { (source: AnyObject) -> [PageResourceCountryTaxResource] in
                return Decoders.decode(clazz: [PageResourceCountryTaxResource].self, source: source)
            }
            // Decoder for PageResourceCountryTaxResource
            Decoders.addDecoder(clazz: PageResourceCountryTaxResource.self) { (source: AnyObject) -> PageResourceCountryTaxResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCountryTaxResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceCurrencyResource]
            Decoders.addDecoder(clazz: [PageResourceCurrencyResource].self) { (source: AnyObject) -> [PageResourceCurrencyResource] in
                return Decoders.decode(clazz: [PageResourceCurrencyResource].self, source: source)
            }
            // Decoder for PageResourceCurrencyResource
            Decoders.addDecoder(clazz: PageResourceCurrencyResource.self) { (source: AnyObject) -> PageResourceCurrencyResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceCurrencyResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceDeviceResource]
            Decoders.addDecoder(clazz: [PageResourceDeviceResource].self) { (source: AnyObject) -> [PageResourceDeviceResource] in
                return Decoders.decode(clazz: [PageResourceDeviceResource].self, source: source)
            }
            // Decoder for PageResourceDeviceResource
            Decoders.addDecoder(clazz: PageResourceDeviceResource.self) { (source: AnyObject) -> PageResourceDeviceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceDeviceResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceDispositionResource]
            Decoders.addDecoder(clazz: [PageResourceDispositionResource].self) { (source: AnyObject) -> [PageResourceDispositionResource] in
                return Decoders.decode(clazz: [PageResourceDispositionResource].self, source: source)
            }
            // Decoder for PageResourceDispositionResource
            Decoders.addDecoder(clazz: PageResourceDispositionResource.self) { (source: AnyObject) -> PageResourceDispositionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceDispositionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceEntitlementItem]
            Decoders.addDecoder(clazz: [PageResourceEntitlementItem].self) { (source: AnyObject) -> [PageResourceEntitlementItem] in
                return Decoders.decode(clazz: [PageResourceEntitlementItem].self, source: source)
            }
            // Decoder for PageResourceEntitlementItem
            Decoders.addDecoder(clazz: PageResourceEntitlementItem.self) { (source: AnyObject) -> PageResourceEntitlementItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceEntitlementItem()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceFlagReportResource]
            Decoders.addDecoder(clazz: [PageResourceFlagReportResource].self) { (source: AnyObject) -> [PageResourceFlagReportResource] in
                return Decoders.decode(clazz: [PageResourceFlagReportResource].self, source: source)
            }
            // Decoder for PageResourceFlagReportResource
            Decoders.addDecoder(clazz: PageResourceFlagReportResource.self) { (source: AnyObject) -> PageResourceFlagReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceFlagReportResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceForwardLog]
            Decoders.addDecoder(clazz: [PageResourceForwardLog].self) { (source: AnyObject) -> [PageResourceForwardLog] in
                return Decoders.decode(clazz: [PageResourceForwardLog].self, source: source)
            }
            // Decoder for PageResourceForwardLog
            Decoders.addDecoder(clazz: PageResourceForwardLog.self) { (source: AnyObject) -> PageResourceForwardLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceForwardLog()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceFulfillmentType]
            Decoders.addDecoder(clazz: [PageResourceFulfillmentType].self) { (source: AnyObject) -> [PageResourceFulfillmentType] in
                return Decoders.decode(clazz: [PageResourceFulfillmentType].self, source: source)
            }
            // Decoder for PageResourceFulfillmentType
            Decoders.addDecoder(clazz: PageResourceFulfillmentType.self) { (source: AnyObject) -> PageResourceFulfillmentType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceFulfillmentType()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceGroupMemberResource]
            Decoders.addDecoder(clazz: [PageResourceGroupMemberResource].self) { (source: AnyObject) -> [PageResourceGroupMemberResource] in
                return Decoders.decode(clazz: [PageResourceGroupMemberResource].self, source: source)
            }
            // Decoder for PageResourceGroupMemberResource
            Decoders.addDecoder(clazz: PageResourceGroupMemberResource.self) { (source: AnyObject) -> PageResourceGroupMemberResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceGroupMemberResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceGroupResource]
            Decoders.addDecoder(clazz: [PageResourceGroupResource].self) { (source: AnyObject) -> [PageResourceGroupResource] in
                return Decoders.decode(clazz: [PageResourceGroupResource].self, source: source)
            }
            // Decoder for PageResourceGroupResource
            Decoders.addDecoder(clazz: PageResourceGroupResource.self) { (source: AnyObject) -> PageResourceGroupResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceGroupResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceImportJobResource]
            Decoders.addDecoder(clazz: [PageResourceImportJobResource].self) { (source: AnyObject) -> [PageResourceImportJobResource] in
                return Decoders.decode(clazz: [PageResourceImportJobResource].self, source: source)
            }
            // Decoder for PageResourceImportJobResource
            Decoders.addDecoder(clazz: PageResourceImportJobResource.self) { (source: AnyObject) -> PageResourceImportJobResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceImportJobResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceInvoiceLogEntry]
            Decoders.addDecoder(clazz: [PageResourceInvoiceLogEntry].self) { (source: AnyObject) -> [PageResourceInvoiceLogEntry] in
                return Decoders.decode(clazz: [PageResourceInvoiceLogEntry].self, source: source)
            }
            // Decoder for PageResourceInvoiceLogEntry
            Decoders.addDecoder(clazz: PageResourceInvoiceLogEntry.self) { (source: AnyObject) -> PageResourceInvoiceLogEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceInvoiceLogEntry()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceInvoiceResource]
            Decoders.addDecoder(clazz: [PageResourceInvoiceResource].self) { (source: AnyObject) -> [PageResourceInvoiceResource] in
                return Decoders.decode(clazz: [PageResourceInvoiceResource].self, source: source)
            }
            // Decoder for PageResourceInvoiceResource
            Decoders.addDecoder(clazz: PageResourceInvoiceResource.self) { (source: AnyObject) -> PageResourceInvoiceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceInvoiceResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceItemTemplateResource]
            Decoders.addDecoder(clazz: [PageResourceItemTemplateResource].self) { (source: AnyObject) -> [PageResourceItemTemplateResource] in
                return Decoders.decode(clazz: [PageResourceItemTemplateResource].self, source: source)
            }
            // Decoder for PageResourceItemTemplateResource
            Decoders.addDecoder(clazz: PageResourceItemTemplateResource.self) { (source: AnyObject) -> PageResourceItemTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceItemTemplateResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceLevelingResource]
            Decoders.addDecoder(clazz: [PageResourceLevelingResource].self) { (source: AnyObject) -> [PageResourceLevelingResource] in
                return Decoders.decode(clazz: [PageResourceLevelingResource].self, source: source)
            }
            // Decoder for PageResourceLevelingResource
            Decoders.addDecoder(clazz: PageResourceLevelingResource.self) { (source: AnyObject) -> PageResourceLevelingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceLevelingResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceLocationLogResource]
            Decoders.addDecoder(clazz: [PageResourceLocationLogResource].self) { (source: AnyObject) -> [PageResourceLocationLogResource] in
                return Decoders.decode(clazz: [PageResourceLocationLogResource].self, source: source)
            }
            // Decoder for PageResourceLocationLogResource
            Decoders.addDecoder(clazz: PageResourceLocationLogResource.self) { (source: AnyObject) -> PageResourceLocationLogResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceLocationLogResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceMapstringobject]
            Decoders.addDecoder(clazz: [PageResourceMapstringobject].self) { (source: AnyObject) -> [PageResourceMapstringobject] in
                return Decoders.decode(clazz: [PageResourceMapstringobject].self, source: source)
            }
            // Decoder for PageResourceMapstringobject
            Decoders.addDecoder(clazz: PageResourceMapstringobject.self) { (source: AnyObject) -> PageResourceMapstringobject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceMapstringobject()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceOauthAccessTokenResource]
            Decoders.addDecoder(clazz: [PageResourceOauthAccessTokenResource].self) { (source: AnyObject) -> [PageResourceOauthAccessTokenResource] in
                return Decoders.decode(clazz: [PageResourceOauthAccessTokenResource].self, source: source)
            }
            // Decoder for PageResourceOauthAccessTokenResource
            Decoders.addDecoder(clazz: PageResourceOauthAccessTokenResource.self) { (source: AnyObject) -> PageResourceOauthAccessTokenResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceOauthAccessTokenResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourcePermissionResource]
            Decoders.addDecoder(clazz: [PageResourcePermissionResource].self) { (source: AnyObject) -> [PageResourcePermissionResource] in
                return Decoders.decode(clazz: [PageResourcePermissionResource].self, source: source)
            }
            // Decoder for PageResourcePermissionResource
            Decoders.addDecoder(clazz: PageResourcePermissionResource.self) { (source: AnyObject) -> PageResourcePermissionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourcePermissionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourcePollResource]
            Decoders.addDecoder(clazz: [PageResourcePollResource].self) { (source: AnyObject) -> [PageResourcePollResource] in
                return Decoders.decode(clazz: [PageResourcePollResource].self, source: source)
            }
            // Decoder for PageResourcePollResource
            Decoders.addDecoder(clazz: PageResourcePollResource.self) { (source: AnyObject) -> PageResourcePollResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourcePollResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceQuestionResource]
            Decoders.addDecoder(clazz: [PageResourceQuestionResource].self) { (source: AnyObject) -> [PageResourceQuestionResource] in
                return Decoders.decode(clazz: [PageResourceQuestionResource].self, source: source)
            }
            // Decoder for PageResourceQuestionResource
            Decoders.addDecoder(clazz: PageResourceQuestionResource.self) { (source: AnyObject) -> PageResourceQuestionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceQuestionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceQuestionTemplateResource]
            Decoders.addDecoder(clazz: [PageResourceQuestionTemplateResource].self) { (source: AnyObject) -> [PageResourceQuestionTemplateResource] in
                return Decoders.decode(clazz: [PageResourceQuestionTemplateResource].self, source: source)
            }
            // Decoder for PageResourceQuestionTemplateResource
            Decoders.addDecoder(clazz: PageResourceQuestionTemplateResource.self) { (source: AnyObject) -> PageResourceQuestionTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceQuestionTemplateResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceRevenueCountryReportResource]
            Decoders.addDecoder(clazz: [PageResourceRevenueCountryReportResource].self) { (source: AnyObject) -> [PageResourceRevenueCountryReportResource] in
                return Decoders.decode(clazz: [PageResourceRevenueCountryReportResource].self, source: source)
            }
            // Decoder for PageResourceRevenueCountryReportResource
            Decoders.addDecoder(clazz: PageResourceRevenueCountryReportResource.self) { (source: AnyObject) -> PageResourceRevenueCountryReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceRevenueCountryReportResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceRevenueProductReportResource]
            Decoders.addDecoder(clazz: [PageResourceRevenueProductReportResource].self) { (source: AnyObject) -> [PageResourceRevenueProductReportResource] in
                return Decoders.decode(clazz: [PageResourceRevenueProductReportResource].self, source: source)
            }
            // Decoder for PageResourceRevenueProductReportResource
            Decoders.addDecoder(clazz: PageResourceRevenueProductReportResource.self) { (source: AnyObject) -> PageResourceRevenueProductReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceRevenueProductReportResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceRewardSetResource]
            Decoders.addDecoder(clazz: [PageResourceRewardSetResource].self) { (source: AnyObject) -> [PageResourceRewardSetResource] in
                return Decoders.decode(clazz: [PageResourceRewardSetResource].self, source: source)
            }
            // Decoder for PageResourceRewardSetResource
            Decoders.addDecoder(clazz: PageResourceRewardSetResource.self) { (source: AnyObject) -> PageResourceRewardSetResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceRewardSetResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceRoleResource]
            Decoders.addDecoder(clazz: [PageResourceRoleResource].self) { (source: AnyObject) -> [PageResourceRoleResource] in
                return Decoders.decode(clazz: [PageResourceRoleResource].self, source: source)
            }
            // Decoder for PageResourceRoleResource
            Decoders.addDecoder(clazz: PageResourceRoleResource.self) { (source: AnyObject) -> PageResourceRoleResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceRoleResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceSavedAddressResource]
            Decoders.addDecoder(clazz: [PageResourceSavedAddressResource].self) { (source: AnyObject) -> [PageResourceSavedAddressResource] in
                return Decoders.decode(clazz: [PageResourceSavedAddressResource].self, source: source)
            }
            // Decoder for PageResourceSavedAddressResource
            Decoders.addDecoder(clazz: PageResourceSavedAddressResource.self) { (source: AnyObject) -> PageResourceSavedAddressResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceSavedAddressResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceSimpleUserResource]
            Decoders.addDecoder(clazz: [PageResourceSimpleUserResource].self) { (source: AnyObject) -> [PageResourceSimpleUserResource] in
                return Decoders.decode(clazz: [PageResourceSimpleUserResource].self, source: source)
            }
            // Decoder for PageResourceSimpleUserResource
            Decoders.addDecoder(clazz: PageResourceSimpleUserResource.self) { (source: AnyObject) -> PageResourceSimpleUserResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceSimpleUserResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceSimpleWallet]
            Decoders.addDecoder(clazz: [PageResourceSimpleWallet].self) { (source: AnyObject) -> [PageResourceSimpleWallet] in
                return Decoders.decode(clazz: [PageResourceSimpleWallet].self, source: source)
            }
            // Decoder for PageResourceSimpleWallet
            Decoders.addDecoder(clazz: PageResourceSimpleWallet.self) { (source: AnyObject) -> PageResourceSimpleWallet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceSimpleWallet()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceStateTaxResource]
            Decoders.addDecoder(clazz: [PageResourceStateTaxResource].self) { (source: AnyObject) -> [PageResourceStateTaxResource] in
                return Decoders.decode(clazz: [PageResourceStateTaxResource].self, source: source)
            }
            // Decoder for PageResourceStateTaxResource
            Decoders.addDecoder(clazz: PageResourceStateTaxResource.self) { (source: AnyObject) -> PageResourceStateTaxResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceStateTaxResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceStoreItem]
            Decoders.addDecoder(clazz: [PageResourceStoreItem].self) { (source: AnyObject) -> [PageResourceStoreItem] in
                return Decoders.decode(clazz: [PageResourceStoreItem].self, source: source)
            }
            // Decoder for PageResourceStoreItem
            Decoders.addDecoder(clazz: PageResourceStoreItem.self) { (source: AnyObject) -> PageResourceStoreItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceStoreItem()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceStoreItemTemplateResource]
            Decoders.addDecoder(clazz: [PageResourceStoreItemTemplateResource].self) { (source: AnyObject) -> [PageResourceStoreItemTemplateResource] in
                return Decoders.decode(clazz: [PageResourceStoreItemTemplateResource].self, source: source)
            }
            // Decoder for PageResourceStoreItemTemplateResource
            Decoders.addDecoder(clazz: PageResourceStoreItemTemplateResource.self) { (source: AnyObject) -> PageResourceStoreItemTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceStoreItemTemplateResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceSubscriptionResource]
            Decoders.addDecoder(clazz: [PageResourceSubscriptionResource].self) { (source: AnyObject) -> [PageResourceSubscriptionResource] in
                return Decoders.decode(clazz: [PageResourceSubscriptionResource].self, source: source)
            }
            // Decoder for PageResourceSubscriptionResource
            Decoders.addDecoder(clazz: PageResourceSubscriptionResource.self) { (source: AnyObject) -> PageResourceSubscriptionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceSubscriptionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceSubscriptionTemplateResource]
            Decoders.addDecoder(clazz: [PageResourceSubscriptionTemplateResource].self) { (source: AnyObject) -> [PageResourceSubscriptionTemplateResource] in
                return Decoders.decode(clazz: [PageResourceSubscriptionTemplateResource].self, source: source)
            }
            // Decoder for PageResourceSubscriptionTemplateResource
            Decoders.addDecoder(clazz: PageResourceSubscriptionTemplateResource.self) { (source: AnyObject) -> PageResourceSubscriptionTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceSubscriptionTemplateResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceTemplateResource]
            Decoders.addDecoder(clazz: [PageResourceTemplateResource].self) { (source: AnyObject) -> [PageResourceTemplateResource] in
                return Decoders.decode(clazz: [PageResourceTemplateResource].self, source: source)
            }
            // Decoder for PageResourceTemplateResource
            Decoders.addDecoder(clazz: PageResourceTemplateResource.self) { (source: AnyObject) -> PageResourceTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceTemplateResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceTransactionResource]
            Decoders.addDecoder(clazz: [PageResourceTransactionResource].self) { (source: AnyObject) -> [PageResourceTransactionResource] in
                return Decoders.decode(clazz: [PageResourceTransactionResource].self, source: source)
            }
            // Decoder for PageResourceTransactionResource
            Decoders.addDecoder(clazz: PageResourceTransactionResource.self) { (source: AnyObject) -> PageResourceTransactionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceTransactionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUsageInfo]
            Decoders.addDecoder(clazz: [PageResourceUsageInfo].self) { (source: AnyObject) -> [PageResourceUsageInfo] in
                return Decoders.decode(clazz: [PageResourceUsageInfo].self, source: source)
            }
            // Decoder for PageResourceUsageInfo
            Decoders.addDecoder(clazz: PageResourceUsageInfo.self) { (source: AnyObject) -> PageResourceUsageInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUsageInfo()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserAchievementGroupResource]
            Decoders.addDecoder(clazz: [PageResourceUserAchievementGroupResource].self) { (source: AnyObject) -> [PageResourceUserAchievementGroupResource] in
                return Decoders.decode(clazz: [PageResourceUserAchievementGroupResource].self, source: source)
            }
            // Decoder for PageResourceUserAchievementGroupResource
            Decoders.addDecoder(clazz: PageResourceUserAchievementGroupResource.self) { (source: AnyObject) -> PageResourceUserAchievementGroupResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserAchievementGroupResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserActionLog]
            Decoders.addDecoder(clazz: [PageResourceUserActionLog].self) { (source: AnyObject) -> [PageResourceUserActionLog] in
                return Decoders.decode(clazz: [PageResourceUserActionLog].self, source: source)
            }
            // Decoder for PageResourceUserActionLog
            Decoders.addDecoder(clazz: PageResourceUserActionLog.self) { (source: AnyObject) -> PageResourceUserActionLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserActionLog()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserBaseResource]
            Decoders.addDecoder(clazz: [PageResourceUserBaseResource].self) { (source: AnyObject) -> [PageResourceUserBaseResource] in
                return Decoders.decode(clazz: [PageResourceUserBaseResource].self, source: source)
            }
            // Decoder for PageResourceUserBaseResource
            Decoders.addDecoder(clazz: PageResourceUserBaseResource.self) { (source: AnyObject) -> PageResourceUserBaseResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserBaseResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserInventoryResource]
            Decoders.addDecoder(clazz: [PageResourceUserInventoryResource].self) { (source: AnyObject) -> [PageResourceUserInventoryResource] in
                return Decoders.decode(clazz: [PageResourceUserInventoryResource].self, source: source)
            }
            // Decoder for PageResourceUserInventoryResource
            Decoders.addDecoder(clazz: PageResourceUserInventoryResource.self) { (source: AnyObject) -> PageResourceUserInventoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserInventoryResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserItemLogResource]
            Decoders.addDecoder(clazz: [PageResourceUserItemLogResource].self) { (source: AnyObject) -> [PageResourceUserItemLogResource] in
                return Decoders.decode(clazz: [PageResourceUserItemLogResource].self, source: source)
            }
            // Decoder for PageResourceUserItemLogResource
            Decoders.addDecoder(clazz: PageResourceUserItemLogResource.self) { (source: AnyObject) -> PageResourceUserItemLogResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserItemLogResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserLevelingResource]
            Decoders.addDecoder(clazz: [PageResourceUserLevelingResource].self) { (source: AnyObject) -> [PageResourceUserLevelingResource] in
                return Decoders.decode(clazz: [PageResourceUserLevelingResource].self, source: source)
            }
            // Decoder for PageResourceUserLevelingResource
            Decoders.addDecoder(clazz: PageResourceUserLevelingResource.self) { (source: AnyObject) -> PageResourceUserLevelingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserLevelingResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceUserRelationshipResource]
            Decoders.addDecoder(clazz: [PageResourceUserRelationshipResource].self) { (source: AnyObject) -> [PageResourceUserRelationshipResource] in
                return Decoders.decode(clazz: [PageResourceUserRelationshipResource].self, source: source)
            }
            // Decoder for PageResourceUserRelationshipResource
            Decoders.addDecoder(clazz: PageResourceUserRelationshipResource.self) { (source: AnyObject) -> PageResourceUserRelationshipResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceUserRelationshipResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceVendorResource]
            Decoders.addDecoder(clazz: [PageResourceVendorResource].self) { (source: AnyObject) -> [PageResourceVendorResource] in
                return Decoders.decode(clazz: [PageResourceVendorResource].self, source: source)
            }
            // Decoder for PageResourceVendorResource
            Decoders.addDecoder(clazz: PageResourceVendorResource.self) { (source: AnyObject) -> PageResourceVendorResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceVendorResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceVideoRelationshipResource]
            Decoders.addDecoder(clazz: [PageResourceVideoRelationshipResource].self) { (source: AnyObject) -> [PageResourceVideoRelationshipResource] in
                return Decoders.decode(clazz: [PageResourceVideoRelationshipResource].self, source: source)
            }
            // Decoder for PageResourceVideoRelationshipResource
            Decoders.addDecoder(clazz: PageResourceVideoRelationshipResource.self) { (source: AnyObject) -> PageResourceVideoRelationshipResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceVideoRelationshipResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceVideoResource]
            Decoders.addDecoder(clazz: [PageResourceVideoResource].self) { (source: AnyObject) -> [PageResourceVideoResource] in
                return Decoders.decode(clazz: [PageResourceVideoResource].self, source: source)
            }
            // Decoder for PageResourceVideoResource
            Decoders.addDecoder(clazz: PageResourceVideoResource.self) { (source: AnyObject) -> PageResourceVideoResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceVideoResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceWalletTotalResponse]
            Decoders.addDecoder(clazz: [PageResourceWalletTotalResponse].self) { (source: AnyObject) -> [PageResourceWalletTotalResponse] in
                return Decoders.decode(clazz: [PageResourceWalletTotalResponse].self, source: source)
            }
            // Decoder for PageResourceWalletTotalResponse
            Decoders.addDecoder(clazz: PageResourceWalletTotalResponse.self) { (source: AnyObject) -> PageResourceWalletTotalResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceWalletTotalResponse()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourceWalletTransactionResource]
            Decoders.addDecoder(clazz: [PageResourceWalletTransactionResource].self) { (source: AnyObject) -> [PageResourceWalletTransactionResource] in
                return Decoders.decode(clazz: [PageResourceWalletTransactionResource].self, source: source)
            }
            // Decoder for PageResourceWalletTransactionResource
            Decoders.addDecoder(clazz: PageResourceWalletTransactionResource.self) { (source: AnyObject) -> PageResourceWalletTransactionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourceWalletTransactionResource()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PageResourcestring]
            Decoders.addDecoder(clazz: [PageResourcestring].self) { (source: AnyObject) -> [PageResourcestring] in
                return Decoders.decode(clazz: [PageResourcestring].self, source: source)
            }
            // Decoder for PageResourcestring
            Decoders.addDecoder(clazz: PageResourcestring.self) { (source: AnyObject) -> PageResourcestring in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PageResourcestring()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                return instance
            }


            // Decoder for [PayBySavedMethodRequest]
            Decoders.addDecoder(clazz: [PayBySavedMethodRequest].self) { (source: AnyObject) -> [PayBySavedMethodRequest] in
                return Decoders.decode(clazz: [PayBySavedMethodRequest].self, source: source)
            }
            // Decoder for PayBySavedMethodRequest
            Decoders.addDecoder(clazz: PayBySavedMethodRequest.self) { (source: AnyObject) -> PayBySavedMethodRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayBySavedMethodRequest()
                instance.paymentMethod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method"])
                return instance
            }


            // Decoder for [PaymentAuthorizationResource]
            Decoders.addDecoder(clazz: [PaymentAuthorizationResource].self) { (source: AnyObject) -> [PaymentAuthorizationResource] in
                return Decoders.decode(clazz: [PaymentAuthorizationResource].self, source: source)
            }
            // Decoder for PaymentAuthorizationResource
            Decoders.addDecoder(clazz: PaymentAuthorizationResource.self) { (source: AnyObject) -> PaymentAuthorizationResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentAuthorizationResource()
                instance.captured = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["captured"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoice = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice"])
                instance.paymentType = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["payment_type"])
                return instance
            }


            // Decoder for [PaymentMethodResource]
            Decoders.addDecoder(clazz: [PaymentMethodResource].self) { (source: AnyObject) -> [PaymentMethodResource] in
                return Decoders.decode(clazz: [PaymentMethodResource].self, source: source)
            }
            // Decoder for PaymentMethodResource
            Decoders.addDecoder(clazz: PaymentMethodResource.self) { (source: AnyObject) -> PaymentMethodResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentMethodResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.expirationDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expiration_date"])
                instance.expirationMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_month"])
                instance.expirationYear = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_year"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.last4 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last4"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.paymentMethodType = Decoders.decodeOptional(clazz: PaymentMethodTypeResource.self, source: sourceDictionary["payment_method_type"])
                instance.paymentType = PaymentMethodResource.PaymentType(rawValue: (sourceDictionary["payment_type"] as? String) ?? "") 
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                instance.verified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"])
                return instance
            }


            // Decoder for [PaymentMethodTypeResource]
            Decoders.addDecoder(clazz: [PaymentMethodTypeResource].self) { (source: AnyObject) -> [PaymentMethodTypeResource] in
                return Decoders.decode(clazz: [PaymentMethodTypeResource].self, source: source)
            }
            // Decoder for PaymentMethodTypeResource
            Decoders.addDecoder(clazz: PaymentMethodTypeResource.self) { (source: AnyObject) -> PaymentMethodTypeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentMethodTypeResource()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Permission]
            Decoders.addDecoder(clazz: [Permission].self) { (source: AnyObject) -> [Permission] in
                return Decoders.decode(clazz: [Permission].self, source: source)
            }
            // Decoder for Permission
            Decoders.addDecoder(clazz: Permission.self) { (source: AnyObject) -> Permission in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Permission()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [PermissionResource]
            Decoders.addDecoder(clazz: [PermissionResource].self) { (source: AnyObject) -> [PermissionResource] in
                return Decoders.decode(clazz: [PermissionResource].self, source: source)
            }
            // Decoder for PermissionResource
            Decoders.addDecoder(clazz: PermissionResource.self) { (source: AnyObject) -> PermissionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PermissionResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [PollAnswerResource]
            Decoders.addDecoder(clazz: [PollAnswerResource].self) { (source: AnyObject) -> [PollAnswerResource] in
                return Decoders.decode(clazz: [PollAnswerResource].self, source: source)
            }
            // Decoder for PollAnswerResource
            Decoders.addDecoder(clazz: PollAnswerResource.self) { (source: AnyObject) -> PollAnswerResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PollAnswerResource()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [PollResource]
            Decoders.addDecoder(clazz: [PollResource].self) { (source: AnyObject) -> [PollResource] in
                return Decoders.decode(clazz: [PollResource].self, source: source)
            }
            // Decoder for PollResource
            Decoders.addDecoder(clazz: PollResource.self) { (source: AnyObject) -> PollResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PollResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"])
                instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.type = PollResource.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [PollResponseResource]
            Decoders.addDecoder(clazz: [PollResponseResource].self) { (source: AnyObject) -> [PollResponseResource] in
                return Decoders.decode(clazz: [PollResponseResource].self, source: source)
            }
            // Decoder for PollResponseResource
            Decoders.addDecoder(clazz: PollResponseResource.self) { (source: AnyObject) -> PollResponseResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PollResponseResource()
                instance.answer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["answer"])
                instance.answeredDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["answered_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.pollId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poll_id"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [PredicateOperation]
            Decoders.addDecoder(clazz: [PredicateOperation].self) { (source: AnyObject) -> [PredicateOperation] in
                return Decoders.decode(clazz: [PredicateOperation].self, source: source)
            }
            // Decoder for PredicateOperation
            Decoders.addDecoder(clazz: PredicateOperation.self) { (source: AnyObject) -> PredicateOperation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PredicateOperation()
                instance.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"])
                instance._operator = Decoders.decodeOptional(clazz: Operator.self, source: sourceDictionary["operator"])
                return instance
            }


            // Decoder for [Property]
            Decoders.addDecoder(clazz: [Property].self) { (source: AnyObject) -> [Property] in
                return Decoders.decode(clazz: [Property].self, source: source)
            }
            // Decoder for Property
            Decoders.addDecoder(clazz: Property.self) { (source: AnyObject) -> Property in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Property()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [PropertyDefinitionResource]
            Decoders.addDecoder(clazz: [PropertyDefinitionResource].self) { (source: AnyObject) -> [PropertyDefinitionResource] in
                return Decoders.decode(clazz: [PropertyDefinitionResource].self, source: source)
            }
            // Decoder for PropertyDefinitionResource
            Decoders.addDecoder(clazz: PropertyDefinitionResource.self) { (source: AnyObject) -> PropertyDefinitionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PropertyDefinitionResource()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [QuestionResource]
            Decoders.addDecoder(clazz: [QuestionResource].self) { (source: AnyObject) -> [QuestionResource] in
                return Decoders.decode(clazz: [QuestionResource].self, source: source)
            }
            // Decoder for QuestionResource
            Decoders.addDecoder(clazz: QuestionResource.self) { (source: AnyObject) -> QuestionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QuestionResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"])
                instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.difficulty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["difficulty"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.importId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["import_id"])
                instance.publishedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["published_date"])
                instance.question = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["question"])
                instance.source1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source1"])
                instance.source2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source2"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"])
                return instance
            }


            // Decoder for [QuestionTemplateResource]
            Decoders.addDecoder(clazz: [QuestionTemplateResource].self) { (source: AnyObject) -> [QuestionTemplateResource] in
                return Decoders.decode(clazz: [QuestionTemplateResource].self, source: source)
            }
            // Decoder for QuestionTemplateResource
            Decoders.addDecoder(clazz: QuestionTemplateResource.self) { (source: AnyObject) -> QuestionTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QuestionTemplateResource()
                instance.answerProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["answer_property"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.questionProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["question_property"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [RawEmailResource]
            Decoders.addDecoder(clazz: [RawEmailResource].self) { (source: AnyObject) -> [RawEmailResource] in
                return Decoders.decode(clazz: [RawEmailResource].self, source: source)
            }
            // Decoder for RawEmailResource
            Decoders.addDecoder(clazz: RawEmailResource.self) { (source: AnyObject) -> RawEmailResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RawEmailResource()
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.html = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["html"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                return instance
            }


            // Decoder for [RawSMSResource]
            Decoders.addDecoder(clazz: [RawSMSResource].self) { (source: AnyObject) -> [RawSMSResource] in
                return Decoders.decode(clazz: [RawSMSResource].self, source: source)
            }
            // Decoder for RawSMSResource
            Decoders.addDecoder(clazz: RawSMSResource.self) { (source: AnyObject) -> RawSMSResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RawSMSResource()
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [ReactivateSubscriptionRequest]
            Decoders.addDecoder(clazz: [ReactivateSubscriptionRequest].self) { (source: AnyObject) -> [ReactivateSubscriptionRequest] in
                return Decoders.decode(clazz: [ReactivateSubscriptionRequest].self, source: source)
            }
            // Decoder for ReactivateSubscriptionRequest
            Decoders.addDecoder(clazz: ReactivateSubscriptionRequest.self) { (source: AnyObject) -> ReactivateSubscriptionRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReactivateSubscriptionRequest()
                instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"])
                instance.reactivationFee = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reactivation_fee"])
                return instance
            }


            // Decoder for [RefundRequest]
            Decoders.addDecoder(clazz: [RefundRequest].self) { (source: AnyObject) -> [RefundRequest] in
                return Decoders.decode(clazz: [RefundRequest].self, source: source)
            }
            // Decoder for RefundRequest
            Decoders.addDecoder(clazz: RefundRequest.self) { (source: AnyObject) -> RefundRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RefundRequest()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }


            // Decoder for [RefundResource]
            Decoders.addDecoder(clazz: [RefundResource].self) { (source: AnyObject) -> [RefundResource] in
                return Decoders.decode(clazz: [RefundResource].self, source: source)
            }
            // Decoder for RefundResource
            Decoders.addDecoder(clazz: RefundResource.self) { (source: AnyObject) -> RefundResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RefundResource()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.refundTransactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refund_transaction_id"])
                instance.transactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transaction_id"])
                return instance
            }


            // Decoder for [Result]
            Decoders.addDecoder(clazz: [Result].self) { (source: AnyObject) -> [Result] in
                return Decoders.decode(clazz: [Result].self, source: source)
            }
            // Decoder for Result
            Decoders.addDecoder(clazz: Result.self) { (source: AnyObject) -> Result in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Result()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"])
                instance.result = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["result"])
                return instance
            }


            // Decoder for [RevenueCountryReportResource]
            Decoders.addDecoder(clazz: [RevenueCountryReportResource].self) { (source: AnyObject) -> [RevenueCountryReportResource] in
                return Decoders.decode(clazz: [RevenueCountryReportResource].self, source: source)
            }
            // Decoder for RevenueCountryReportResource
            Decoders.addDecoder(clazz: RevenueCountryReportResource.self) { (source: AnyObject) -> RevenueCountryReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RevenueCountryReportResource()
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"])
                instance.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"])
                return instance
            }


            // Decoder for [RevenueProductReportResource]
            Decoders.addDecoder(clazz: [RevenueProductReportResource].self) { (source: AnyObject) -> [RevenueProductReportResource] in
                return Decoders.decode(clazz: [RevenueProductReportResource].self, source: source)
            }
            // Decoder for RevenueProductReportResource
            Decoders.addDecoder(clazz: RevenueProductReportResource.self) { (source: AnyObject) -> RevenueProductReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RevenueProductReportResource()
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"])
                instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"])
                instance.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"])
                return instance
            }


            // Decoder for [RevenueReportResource]
            Decoders.addDecoder(clazz: [RevenueReportResource].self) { (source: AnyObject) -> [RevenueReportResource] in
                return Decoders.decode(clazz: [RevenueReportResource].self, source: source)
            }
            // Decoder for RevenueReportResource
            Decoders.addDecoder(clazz: RevenueReportResource.self) { (source: AnyObject) -> RevenueReportResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RevenueReportResource()
                instance.customerCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["customer_count"])
                instance.saleCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_count"])
                instance.salesAverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_average"])
                instance.salesTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_total"])
                return instance
            }


            // Decoder for [RewardCurrencyResource]
            Decoders.addDecoder(clazz: [RewardCurrencyResource].self) { (source: AnyObject) -> [RewardCurrencyResource] in
                return Decoders.decode(clazz: [RewardCurrencyResource].self, source: source)
            }
            // Decoder for RewardCurrencyResource
            Decoders.addDecoder(clazz: RewardCurrencyResource.self) { (source: AnyObject) -> RewardCurrencyResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RewardCurrencyResource()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"])
                instance.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"])
                instance.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"])
                instance.percent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["percent"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [RewardItemResource]
            Decoders.addDecoder(clazz: [RewardItemResource].self) { (source: AnyObject) -> [RewardItemResource] in
                return Decoders.decode(clazz: [RewardItemResource].self, source: source)
            }
            // Decoder for RewardItemResource
            Decoders.addDecoder(clazz: RewardItemResource.self) { (source: AnyObject) -> RewardItemResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RewardItemResource()
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"])
                instance.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"])
                instance.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                return instance
            }


            // Decoder for [RewardSetResource]
            Decoders.addDecoder(clazz: [RewardSetResource].self) { (source: AnyObject) -> [RewardSetResource] in
                return Decoders.decode(clazz: [RewardSetResource].self, source: source)
            }
            // Decoder for RewardSetResource
            Decoders.addDecoder(clazz: RewardSetResource.self) { (source: AnyObject) -> RewardSetResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RewardSetResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.maxPlacing = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_placing"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [Role]
            Decoders.addDecoder(clazz: [Role].self) { (source: AnyObject) -> [Role] in
                return Decoders.decode(clazz: [Role].self, source: source)
            }
            // Decoder for Role
            Decoders.addDecoder(clazz: Role.self) { (source: AnyObject) -> Role in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Role()
                instance.clientCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["client_count"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"])
                instance.rolePermission = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role_permission"])
                instance.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_count"])
                return instance
            }


            // Decoder for [RoleResource]
            Decoders.addDecoder(clazz: [RoleResource].self) { (source: AnyObject) -> [RoleResource] in
                return Decoders.decode(clazz: [RoleResource].self, source: source)
            }
            // Decoder for RoleResource
            Decoders.addDecoder(clazz: RoleResource.self) { (source: AnyObject) -> RoleResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RoleResource()
                instance.clientCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["client_count"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"])
                instance.rolePermission = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role_permission"])
                instance.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_count"])
                return instance
            }


            // Decoder for [SampleCountriesResponse]
            Decoders.addDecoder(clazz: [SampleCountriesResponse].self) { (source: AnyObject) -> [SampleCountriesResponse] in
                return Decoders.decode(clazz: [SampleCountriesResponse].self, source: source)
            }
            // Decoder for SampleCountriesResponse
            Decoders.addDecoder(clazz: SampleCountriesResponse.self) { (source: AnyObject) -> SampleCountriesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SampleCountriesResponse()
                instance.vendorId1 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id1"])
                instance.vendorId2 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id2"])
                return instance
            }


            // Decoder for [SavedAddressResource]
            Decoders.addDecoder(clazz: [SavedAddressResource].self) { (source: AnyObject) -> [SavedAddressResource] in
                return Decoders.decode(clazz: [SavedAddressResource].self, source: source)
            }
            // Decoder for SavedAddressResource
            Decoders.addDecoder(clazz: SavedAddressResource.self) { (source: AnyObject) -> SavedAddressResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SavedAddressResource()
                instance.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"])
                instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phone1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone1"])
                instance.phone2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone2"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"])
                return instance
            }


            // Decoder for [Schedule]
            Decoders.addDecoder(clazz: [Schedule].self) { (source: AnyObject) -> [Schedule] in
                return Decoders.decode(clazz: [Schedule].self, source: source)
            }
            // Decoder for Schedule
            Decoders.addDecoder(clazz: Schedule.self) { (source: AnyObject) -> Schedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Schedule()
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.durationUnit = Schedule.DurationUnit(rawValue: (sourceDictionary["duration_unit"] as? String) ?? "") 
                instance.repeat = Schedule.Repeat(rawValue: (sourceDictionary["repeat"] as? String) ?? "") 
                return instance
            }


            // Decoder for [SearchReferenceMapping]
            Decoders.addDecoder(clazz: [SearchReferenceMapping].self) { (source: AnyObject) -> [SearchReferenceMapping] in
                return Decoders.decode(clazz: [SearchReferenceMapping].self, source: source)
            }
            // Decoder for SearchReferenceMapping
            Decoders.addDecoder(clazz: SearchReferenceMapping.self) { (source: AnyObject) -> SearchReferenceMapping in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SearchReferenceMapping()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.refIdField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_id_field"])
                instance.refType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_type"])
                instance.sourceFieldToDestinationField = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["source_field_to_destination_field"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [SelectedSettingResource]
            Decoders.addDecoder(clazz: [SelectedSettingResource].self) { (source: AnyObject) -> [SelectedSettingResource] in
                return Decoders.decode(clazz: [SelectedSettingResource].self, source: source)
            }
            // Decoder for SelectedSettingResource
            Decoders.addDecoder(clazz: SelectedSettingResource.self) { (source: AnyObject) -> SelectedSettingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SelectedSettingResource()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.keyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.valueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_name"])
                return instance
            }


            // Decoder for [SettingOption]
            Decoders.addDecoder(clazz: [SettingOption].self) { (source: AnyObject) -> [SettingOption] in
                return Decoders.decode(clazz: [SettingOption].self, source: source)
            }
            // Decoder for SettingOption
            Decoders.addDecoder(clazz: SettingOption.self) { (source: AnyObject) -> SettingOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SettingOption()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ShippingItem]
            Decoders.addDecoder(clazz: [ShippingItem].self) { (source: AnyObject) -> [ShippingItem] in
                return Decoders.decode(clazz: [ShippingItem].self, source: source)
            }
            // Decoder for ShippingItem
            Decoders.addDecoder(clazz: ShippingItem.self) { (source: AnyObject) -> ShippingItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShippingItem()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.countries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["countries"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"])
                instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"])
                instance.geoPolicyType = ShippingItem.GeoPolicyType(rawValue: (sourceDictionary["geo_policy_type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.maxTierTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_tier_total"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"])
                instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [SimpleReferenceResourceint]
            Decoders.addDecoder(clazz: [SimpleReferenceResourceint].self) { (source: AnyObject) -> [SimpleReferenceResourceint] in
                return Decoders.decode(clazz: [SimpleReferenceResourceint].self, source: source)
            }
            // Decoder for SimpleReferenceResourceint
            Decoders.addDecoder(clazz: SimpleReferenceResourceint.self) { (source: AnyObject) -> SimpleReferenceResourceint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleReferenceResourceint()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SimpleReferenceResourcelong]
            Decoders.addDecoder(clazz: [SimpleReferenceResourcelong].self) { (source: AnyObject) -> [SimpleReferenceResourcelong] in
                return Decoders.decode(clazz: [SimpleReferenceResourcelong].self, source: source)
            }
            // Decoder for SimpleReferenceResourcelong
            Decoders.addDecoder(clazz: SimpleReferenceResourcelong.self) { (source: AnyObject) -> SimpleReferenceResourcelong in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleReferenceResourcelong()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SimpleReferenceResourcestring]
            Decoders.addDecoder(clazz: [SimpleReferenceResourcestring].self) { (source: AnyObject) -> [SimpleReferenceResourcestring] in
                return Decoders.decode(clazz: [SimpleReferenceResourcestring].self, source: source)
            }
            // Decoder for SimpleReferenceResourcestring
            Decoders.addDecoder(clazz: SimpleReferenceResourcestring.self) { (source: AnyObject) -> SimpleReferenceResourcestring in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleReferenceResourcestring()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SimpleUserResource]
            Decoders.addDecoder(clazz: [SimpleUserResource].self) { (source: AnyObject) -> [SimpleUserResource] in
                return Decoders.decode(clazz: [SimpleUserResource].self, source: source)
            }
            // Decoder for SimpleUserResource
            Decoders.addDecoder(clazz: SimpleUserResource.self) { (source: AnyObject) -> SimpleUserResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleUserResource()
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [SimpleWallet]
            Decoders.addDecoder(clazz: [SimpleWallet].self) { (source: AnyObject) -> [SimpleWallet] in
                return Decoders.decode(clazz: [SimpleWallet].self, source: source)
            }
            // Decoder for SimpleWallet
            Decoders.addDecoder(clazz: SimpleWallet.self) { (source: AnyObject) -> SimpleWallet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleWallet()
                instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [Sku]
            Decoders.addDecoder(clazz: [Sku].self) { (source: AnyObject) -> [Sku] in
                return Decoders.decode(clazz: [Sku].self, source: source)
            }
            // Decoder for Sku
            Decoders.addDecoder(clazz: Sku.self) { (source: AnyObject) -> Sku in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sku()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.inventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory"])
                instance.minInventoryThreshold = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_inventory_threshold"])
                instance.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.saleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sale_id"])
                instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                instance.stopDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["stop_date"])
                return instance
            }


            // Decoder for [SkuRequest]
            Decoders.addDecoder(clazz: [SkuRequest].self) { (source: AnyObject) -> [SkuRequest] in
                return Decoders.decode(clazz: [SkuRequest].self, source: source)
            }
            // Decoder for SkuRequest
            Decoders.addDecoder(clazz: SkuRequest.self) { (source: AnyObject) -> SkuRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SkuRequest()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }


            // Decoder for [StateResource]
            Decoders.addDecoder(clazz: [StateResource].self) { (source: AnyObject) -> [StateResource] in
                return Decoders.decode(clazz: [StateResource].self, source: source)
            }
            // Decoder for StateResource
            Decoders.addDecoder(clazz: StateResource.self) { (source: AnyObject) -> StateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StateResource()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [StateTaxResource]
            Decoders.addDecoder(clazz: [StateTaxResource].self) { (source: AnyObject) -> [StateTaxResource] in
                return Decoders.decode(clazz: [StateTaxResource].self, source: source)
            }
            // Decoder for StateTaxResource
            Decoders.addDecoder(clazz: StateTaxResource.self) { (source: AnyObject) -> StateTaxResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StateTaxResource()
                instance.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"])
                instance.federallyExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federally_exempt"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"])
                instance.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"])
                return instance
            }


            // Decoder for [StoreItem]
            Decoders.addDecoder(clazz: [StoreItem].self) { (source: AnyObject) -> [StoreItem] in
                return Decoders.decode(clazz: [StoreItem].self, source: source)
            }
            // Decoder for StoreItem
            Decoders.addDecoder(clazz: StoreItem.self) { (source: AnyObject) -> StoreItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StoreItem()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"])
                instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"])
                instance.geoPolicyType = StoreItem.GeoPolicyType(rawValue: (sourceDictionary["geo_policy_type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"])
                instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [StoreItemTemplateResource]
            Decoders.addDecoder(clazz: [StoreItemTemplateResource].self) { (source: AnyObject) -> [StoreItemTemplateResource] in
                return Decoders.decode(clazz: [StoreItemTemplateResource].self, source: source)
            }
            // Decoder for StoreItemTemplateResource
            Decoders.addDecoder(clazz: StoreItemTemplateResource.self) { (source: AnyObject) -> StoreItemTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StoreItemTemplateResource()
                instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.skuTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["sku_template"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [StripeCreatePaymentMethod]
            Decoders.addDecoder(clazz: [StripeCreatePaymentMethod].self) { (source: AnyObject) -> [StripeCreatePaymentMethod] in
                return Decoders.decode(clazz: [StripeCreatePaymentMethod].self, source: source)
            }
            // Decoder for StripeCreatePaymentMethod
            Decoders.addDecoder(clazz: StripeCreatePaymentMethod.self) { (source: AnyObject) -> StripeCreatePaymentMethod in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StripeCreatePaymentMethod()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [StripePaymentRequest]
            Decoders.addDecoder(clazz: [StripePaymentRequest].self) { (source: AnyObject) -> [StripePaymentRequest] in
                return Decoders.decode(clazz: [StripePaymentRequest].self, source: source)
            }
            // Decoder for StripePaymentRequest
            Decoders.addDecoder(clazz: StripePaymentRequest.self) { (source: AnyObject) -> StripePaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StripePaymentRequest()
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                return instance
            }


            // Decoder for [SubscriptionCreditResource]
            Decoders.addDecoder(clazz: [SubscriptionCreditResource].self) { (source: AnyObject) -> [SubscriptionCreditResource] in
                return Decoders.decode(clazz: [SubscriptionCreditResource].self, source: source)
            }
            // Decoder for SubscriptionCreditResource
            Decoders.addDecoder(clazz: SubscriptionCreditResource.self) { (source: AnyObject) -> SubscriptionCreditResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubscriptionCreditResource()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [SubscriptionPlanResource]
            Decoders.addDecoder(clazz: [SubscriptionPlanResource].self) { (source: AnyObject) -> [SubscriptionPlanResource] in
                return Decoders.decode(clazz: [SubscriptionPlanResource].self, source: source)
            }
            // Decoder for SubscriptionPlanResource
            Decoders.addDecoder(clazz: SubscriptionPlanResource.self) { (source: AnyObject) -> SubscriptionPlanResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubscriptionPlanResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.billingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["billing_cycle_length"])
                instance.billingCycleUnit = SubscriptionPlanResource.BillingCycleUnit(rawValue: (sourceDictionary["billing_cycle_unit"] as? String) ?? "") 
                instance.consolidated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consolidated"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"])
                instance.firstBillingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["first_billing_cycle_length"])
                instance.firstBillingCycleUnit = SubscriptionPlanResource.FirstBillingCycleUnit(rawValue: (sourceDictionary["first_billing_cycle_unit"] as? String) ?? "") 
                instance.gracePeriod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["grace_period"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.initialFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["initial_fee"])
                instance.initialSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["initial_sku"])
                instance.latePaymentFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["late_payment_fee"])
                instance.latePaymentSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["late_payment_sku"])
                instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"])
                instance.maxBillAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_bill_attempts"])
                instance.maxCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_cycles"])
                instance.migrateToPlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["migrate_to_plan"])
                instance.minCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_cycles"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.reactivationFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reactivation_fee"])
                instance.reactivationSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reactivation_sku"])
                instance.recurringFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_fee"])
                instance.recurringSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recurring_sku"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"])
                return instance
            }


            // Decoder for [SubscriptionResource]
            Decoders.addDecoder(clazz: [SubscriptionResource].self) { (source: AnyObject) -> [SubscriptionResource] in
                return Decoders.decode(clazz: [SubscriptionResource].self, source: source)
            }
            // Decoder for SubscriptionResource
            Decoders.addDecoder(clazz: SubscriptionResource.self) { (source: AnyObject) -> SubscriptionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubscriptionResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.availability = SubscriptionResource.Availability(rawValue: (sourceDictionary["availability"] as? String) ?? "") 
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.consolidationDayOfMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["consolidation_day_of_month"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"])
                instance.geoPolicyType = SubscriptionResource.GeoPolicyType(rawValue: (sourceDictionary["geo_policy_type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.plans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["plans"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"])
                instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"])
                instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"])
                return instance
            }


            // Decoder for [SubscriptionTemplateResource]
            Decoders.addDecoder(clazz: [SubscriptionTemplateResource].self) { (source: AnyObject) -> [SubscriptionTemplateResource] in
                return Decoders.decode(clazz: [SubscriptionTemplateResource].self, source: source)
            }
            // Decoder for SubscriptionTemplateResource
            Decoders.addDecoder(clazz: SubscriptionTemplateResource.self) { (source: AnyObject) -> SubscriptionTemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubscriptionTemplateResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.planTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["plan_template"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [TemplateEmailResource]
            Decoders.addDecoder(clazz: [TemplateEmailResource].self) { (source: AnyObject) -> [TemplateEmailResource] in
                return Decoders.decode(clazz: [TemplateEmailResource].self, source: source)
            }
            // Decoder for TemplateEmailResource
            Decoders.addDecoder(clazz: TemplateEmailResource.self) { (source: AnyObject) -> TemplateEmailResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TemplateEmailResource()
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"])
                instance.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"])
                return instance
            }


            // Decoder for [TemplateResource]
            Decoders.addDecoder(clazz: [TemplateResource].self) { (source: AnyObject) -> [TemplateResource] in
                return Decoders.decode(clazz: [TemplateResource].self, source: source)
            }
            // Decoder for TemplateResource
            Decoders.addDecoder(clazz: TemplateResource.self) { (source: AnyObject) -> TemplateResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TemplateResource()
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [TemplateSMSResource]
            Decoders.addDecoder(clazz: [TemplateSMSResource].self) { (source: AnyObject) -> [TemplateSMSResource] in
                return Decoders.decode(clazz: [TemplateSMSResource].self, source: source)
            }
            // Decoder for TemplateSMSResource
            Decoders.addDecoder(clazz: TemplateSMSResource.self) { (source: AnyObject) -> TemplateSMSResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TemplateSMSResource()
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.localizer = Decoders.decodeOptional(clazz: Localizer.self, source: sourceDictionary["localizer"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"])
                instance.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"])
                return instance
            }


            // Decoder for [TierResource]
            Decoders.addDecoder(clazz: [TierResource].self) { (source: AnyObject) -> [TierResource] in
                return Decoders.decode(clazz: [TierResource].self, source: source)
            }
            // Decoder for TierResource
            Decoders.addDecoder(clazz: TierResource.self) { (source: AnyObject) -> TierResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TierResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"])
                instance.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"])
                return instance
            }


            // Decoder for [Timezone]
            Decoders.addDecoder(clazz: [Timezone].self) { (source: AnyObject) -> [Timezone] in
                return Decoders.decode(clazz: [Timezone].self, source: source)
            }
            // Decoder for Timezone
            Decoders.addDecoder(clazz: Timezone.self) { (source: AnyObject) -> Timezone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Timezone()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.offset = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["offset"])
                return instance
            }


            // Decoder for [TokenDetailsResource]
            Decoders.addDecoder(clazz: [TokenDetailsResource].self) { (source: AnyObject) -> [TokenDetailsResource] in
                return Decoders.decode(clazz: [TokenDetailsResource].self, source: source)
            }
            // Decoder for TokenDetailsResource
            Decoders.addDecoder(clazz: TokenDetailsResource.self) { (source: AnyObject) -> TokenDetailsResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TokenDetailsResource()
                instance.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [TransactionResource]
            Decoders.addDecoder(clazz: [TransactionResource].self) { (source: AnyObject) -> [TransactionResource] in
                return Decoders.decode(clazz: [TransactionResource].self, source: source)
            }
            // Decoder for TransactionResource
            Decoders.addDecoder(clazz: TransactionResource.self) { (source: AnyObject) -> TransactionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionResource()
                instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"])
                instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"])
                instance.source = TransactionResource.Source(rawValue: (sourceDictionary["source"] as? String) ?? "") 
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [UsageInfo]
            Decoders.addDecoder(clazz: [UsageInfo].self) { (source: AnyObject) -> [UsageInfo] in
                return Decoders.decode(clazz: [UsageInfo].self, source: source)
            }
            // Decoder for UsageInfo
            Decoders.addDecoder(clazz: UsageInfo.self) { (source: AnyObject) -> UsageInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UsageInfo()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"])
                instance.affiliate = Decoders.decodeOptional(clazz: Affiliate.self, source: sourceDictionary["affiliate"])
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.country = Decoders.decodeOptional(clazz: Country.self, source: sourceDictionary["country"])
                instance.currency = Decoders.decodeOptional(clazz: Currency.self, source: sourceDictionary["currency"])
                instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"])
                instance.dateOfBirth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_of_birth"])
                instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"])
                instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"])
                instance.groups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groups"])
                instance.guest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["guest"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inviteToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invite_token"])
                instance.lang = Decoders.decodeOptional(clazz: Language.self, source: sourceDictionary["lang"])
                instance.lastActivity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_activity"])
                instance.lastLogin = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_login"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.lockoutAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lockout_attempts"])
                instance.lockoutDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["lockout_date"])
                instance.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"])
                instance.oldId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["old_id"])
                instance.parents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parents"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"])
                instance.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.tagStrings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tag_strings"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.timezone = Decoders.decodeOptional(clazz: Timezone.self, source: sourceDictionary["timezone"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [UserAchievementGroupResource]
            Decoders.addDecoder(clazz: [UserAchievementGroupResource].self) { (source: AnyObject) -> [UserAchievementGroupResource] in
                return Decoders.decode(clazz: [UserAchievementGroupResource].self, source: source)
            }
            // Decoder for UserAchievementGroupResource
            Decoders.addDecoder(clazz: UserAchievementGroupResource.self) { (source: AnyObject) -> UserAchievementGroupResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserAchievementGroupResource()
                instance.achievements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["achievements"])
                instance.groupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_name"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [UserAchievementResource]
            Decoders.addDecoder(clazz: [UserAchievementResource].self) { (source: AnyObject) -> [UserAchievementResource] in
                return Decoders.decode(clazz: [UserAchievementResource].self, source: source)
            }
            // Decoder for UserAchievementResource
            Decoders.addDecoder(clazz: UserAchievementResource.self) { (source: AnyObject) -> UserAchievementResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserAchievementResource()
                instance.achieved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["achieved"])
                instance.achievementName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["achievement_name"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.earnedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earned_date"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                return instance
            }


            // Decoder for [UserActionLog]
            Decoders.addDecoder(clazz: [UserActionLog].self) { (source: AnyObject) -> [UserActionLog] in
                return Decoders.decode(clazz: [UserActionLog].self, source: source)
            }
            // Decoder for UserActionLog
            Decoders.addDecoder(clazz: UserActionLog.self) { (source: AnyObject) -> UserActionLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserActionLog()
                instance.actionDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_description"])
                instance.actionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_name"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.details = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["details"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [UserActivityResultsResource]
            Decoders.addDecoder(clazz: [UserActivityResultsResource].self) { (source: AnyObject) -> [UserActivityResultsResource] in
                return Decoders.decode(clazz: [UserActivityResultsResource].self, source: source)
            }
            // Decoder for UserActivityResultsResource
            Decoders.addDecoder(clazz: UserActivityResultsResource.self) { (source: AnyObject) -> UserActivityResultsResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserActivityResultsResource()
                instance.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"])
                instance.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"])
                instance.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"])
                instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.ties = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ties"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [UserBaseResource]
            Decoders.addDecoder(clazz: [UserBaseResource].self) { (source: AnyObject) -> [UserBaseResource] in
                return Decoders.decode(clazz: [UserBaseResource].self, source: source)
            }
            // Decoder for UserBaseResource
            Decoders.addDecoder(clazz: UserBaseResource.self) { (source: AnyObject) -> UserBaseResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserBaseResource()
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [UserInventoryAddRequest]
            Decoders.addDecoder(clazz: [UserInventoryAddRequest].self) { (source: AnyObject) -> [UserInventoryAddRequest] in
                return Decoders.decode(clazz: [UserInventoryAddRequest].self, source: source)
            }
            // Decoder for UserInventoryAddRequest
            Decoders.addDecoder(clazz: UserInventoryAddRequest.self) { (source: AnyObject) -> UserInventoryAddRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserInventoryAddRequest()
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.overrides = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["overrides"])
                instance.skipInvoice = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skip_invoice"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }


            // Decoder for [UserInventoryResource]
            Decoders.addDecoder(clazz: [UserInventoryResource].self) { (source: AnyObject) -> [UserInventoryResource] in
                return Decoders.decode(clazz: [UserInventoryResource].self, source: source)
            }
            // Decoder for UserInventoryResource
            Decoders.addDecoder(clazz: UserInventoryResource.self) { (source: AnyObject) -> UserInventoryResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserInventoryResource()
                instance.behaviorData = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["behavior_data"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.expires = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expires"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"])
                instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"])
                instance.itemTypeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_type_hint"])
                instance.status = UserInventoryResource.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [UserItemLogResource]
            Decoders.addDecoder(clazz: [UserItemLogResource].self) { (source: AnyObject) -> [UserItemLogResource] in
                return Decoders.decode(clazz: [UserItemLogResource].self, source: source)
            }
            // Decoder for UserItemLogResource
            Decoders.addDecoder(clazz: UserItemLogResource.self) { (source: AnyObject) -> UserItemLogResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserItemLogResource()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.item = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["item"])
                instance.logDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["log_date"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                instance.userInventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_inventory"])
                return instance
            }


            // Decoder for [UserLevelingResource]
            Decoders.addDecoder(clazz: [UserLevelingResource].self) { (source: AnyObject) -> [UserLevelingResource] in
                return Decoders.decode(clazz: [UserLevelingResource].self, source: source)
            }
            // Decoder for UserLevelingResource
            Decoders.addDecoder(clazz: UserLevelingResource.self) { (source: AnyObject) -> UserLevelingResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserLevelingResource()
                instance.lastTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_tier_name"])
                instance.lastTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["last_tier_progress"])
                instance.levelName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level_name"])
                instance.nextTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_tier_name"])
                instance.nextTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["next_tier_progress"])
                instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"])
                instance.tierNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tier_names"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [UserRelationship]
            Decoders.addDecoder(clazz: [UserRelationship].self) { (source: AnyObject) -> [UserRelationship] in
                return Decoders.decode(clazz: [UserRelationship].self, source: source)
            }
            // Decoder for UserRelationship
            Decoders.addDecoder(clazz: UserRelationship.self) { (source: AnyObject) -> UserRelationship in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserRelationship()
                instance.child = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["child"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.parent = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["parent"])
                return instance
            }


            // Decoder for [UserRelationshipReferenceResource]
            Decoders.addDecoder(clazz: [UserRelationshipReferenceResource].self) { (source: AnyObject) -> [UserRelationshipReferenceResource] in
                return Decoders.decode(clazz: [UserRelationshipReferenceResource].self, source: source)
            }
            // Decoder for UserRelationshipReferenceResource
            Decoders.addDecoder(clazz: UserRelationshipReferenceResource.self) { (source: AnyObject) -> UserRelationshipReferenceResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserRelationshipReferenceResource()
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.relationshipId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["relationship_id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [UserRelationshipResource]
            Decoders.addDecoder(clazz: [UserRelationshipResource].self) { (source: AnyObject) -> [UserRelationshipResource] in
                return Decoders.decode(clazz: [UserRelationshipResource].self, source: source)
            }
            // Decoder for UserRelationshipResource
            Decoders.addDecoder(clazz: UserRelationshipResource.self) { (source: AnyObject) -> UserRelationshipResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserRelationshipResource()
                instance.child = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["child"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.parent = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["parent"])
                return instance
            }


            // Decoder for [UserResource]
            Decoders.addDecoder(clazz: [UserResource].self) { (source: AnyObject) -> [UserResource] in
                return Decoders.decode(clazz: [UserResource].self, source: source)
            }
            // Decoder for UserResource
            Decoders.addDecoder(clazz: UserResource.self) { (source: AnyObject) -> UserResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserResource()
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"])
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"])
                instance.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.dateOfBirth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_of_birth"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"])
                instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.languageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language_code"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"])
                instance.parents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parents"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.timezoneCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone_code"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                return instance
            }


            // Decoder for [UserTag]
            Decoders.addDecoder(clazz: [UserTag].self) { (source: AnyObject) -> [UserTag] in
                return Decoders.decode(clazz: [UserTag].self, source: source)
            }
            // Decoder for UserTag
            Decoders.addDecoder(clazz: UserTag.self) { (source: AnyObject) -> UserTag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserTag()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"])
                instance.user = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [VariableTypeResource]
            Decoders.addDecoder(clazz: [VariableTypeResource].self) { (source: AnyObject) -> [VariableTypeResource] in
                return Decoders.decode(clazz: [VariableTypeResource].self, source: source)
            }
            // Decoder for VariableTypeResource
            Decoders.addDecoder(clazz: VariableTypeResource.self) { (source: AnyObject) -> VariableTypeResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableTypeResource()
                instance.base = VariableTypeResource.Base(rawValue: (sourceDictionary["base"] as? String) ?? "") 
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [VendorResource]
            Decoders.addDecoder(clazz: [VendorResource].self) { (source: AnyObject) -> [VendorResource] in
                return Decoders.decode(clazz: [VendorResource].self, source: source)
            }
            // Decoder for VendorResource
            Decoders.addDecoder(clazz: VendorResource.self) { (source: AnyObject) -> VendorResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VendorResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"])
                instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"])
                instance.manualApproval = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manual_approval"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.primaryContactEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_email"])
                instance.primaryContactName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_name"])
                instance.primaryContactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_phone"])
                instance.salesEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sales_email"])
                instance.supportEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["support_email"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.updateDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["update_date"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [Version]
            Decoders.addDecoder(clazz: [Version].self) { (source: AnyObject) -> [Version] in
                return Decoders.decode(clazz: [Version].self, source: source)
            }
            // Decoder for Version
            Decoders.addDecoder(clazz: Version.self) { (source: AnyObject) -> Version in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Version()
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [Video]
            Decoders.addDecoder(clazz: [Video].self) { (source: AnyObject) -> [Video] in
                return Decoders.decode(clazz: [Video].self, source: source)
            }
            // Decoder for Video
            Decoders.addDecoder(clazz: Video.self) { (source: AnyObject) -> Video in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Video()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.author = Decoders.decodeOptional(clazz: Artist.self, source: sourceDictionary["author"])
                instance.authored = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authored"])
                instance.banned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["banned"])
                instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"])
                instance.categoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_name"])
                instance.contributors = Decoders.decodeOptional(clazz: CollectionVideoContribution.self, source: sourceDictionary["contributors"])
                instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"])
                instance.embed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["embed"])
                instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"])
                instance.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.mimeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.privacy = Video.Privacy(rawValue: (sourceDictionary["privacy"] as? String) ?? "") 
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.thumbnail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnail"])
                instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"])
                instance.uploader = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["uploader"])
                instance.views = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["views"])
                instance.whitelist = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["whitelist"])
                instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"])
                return instance
            }


            // Decoder for [VideoContribution]
            Decoders.addDecoder(clazz: [VideoContribution].self) { (source: AnyObject) -> [VideoContribution] in
                return Decoders.decode(clazz: [VideoContribution].self, source: source)
            }
            // Decoder for VideoContribution
            Decoders.addDecoder(clazz: VideoContribution.self) { (source: AnyObject) -> VideoContribution in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VideoContribution()
                instance.artist = Decoders.decodeOptional(clazz: Artist.self, source: sourceDictionary["artist"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.media = Decoders.decodeOptional(clazz: Video.self, source: sourceDictionary["media"])
                instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"])
                return instance
            }


            // Decoder for [VideoRelationshipResource]
            Decoders.addDecoder(clazz: [VideoRelationshipResource].self) { (source: AnyObject) -> [VideoRelationshipResource] in
                return Decoders.decode(clazz: [VideoRelationshipResource].self, source: source)
            }
            // Decoder for VideoRelationshipResource
            Decoders.addDecoder(clazz: VideoRelationshipResource.self) { (source: AnyObject) -> VideoRelationshipResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VideoRelationshipResource()
                instance.from = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["from"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.relationshipDetails = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationship_details"])
                instance.to = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["to"])
                return instance
            }


            // Decoder for [VideoResource]
            Decoders.addDecoder(clazz: [VideoResource].self) { (source: AnyObject) -> [VideoResource] in
                return Decoders.decode(clazz: [VideoResource].self, source: source)
            }
            // Decoder for VideoResource
            Decoders.addDecoder(clazz: VideoResource.self) { (source: AnyObject) -> VideoResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VideoResource()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.author = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["author"])
                instance.authored = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authored"])
                instance.banned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["banned"])
                instance.category = Decoders.decodeOptional(clazz: SimpleReferenceResourcestring.self, source: sourceDictionary["category"])
                instance.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"])
                instance.contributors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributors"])
                instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"])
                instance.embed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["embed"])
                instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"])
                instance.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"])
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.mimeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.privacy = VideoResource.Privacy(rawValue: (sourceDictionary["privacy"] as? String) ?? "") 
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.thumbnail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnail"])
                instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"])
                instance.uploader = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["uploader"])
                instance.views = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["views"])
                instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"])
                return instance
            }


            // Decoder for [VideoTag]
            Decoders.addDecoder(clazz: [VideoTag].self) { (source: AnyObject) -> [VideoTag] in
                return Decoders.decode(clazz: [VideoTag].self, source: source)
            }
            // Decoder for VideoTag
            Decoders.addDecoder(clazz: VideoTag.self) { (source: AnyObject) -> VideoTag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VideoTag()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"])
                instance.video = Decoders.decodeOptional(clazz: Video.self, source: sourceDictionary["video"])
                return instance
            }


            // Decoder for [WalletAlterRequest]
            Decoders.addDecoder(clazz: [WalletAlterRequest].self) { (source: AnyObject) -> [WalletAlterRequest] in
                return Decoders.decode(clazz: [WalletAlterRequest].self, source: source)
            }
            // Decoder for WalletAlterRequest
            Decoders.addDecoder(clazz: WalletAlterRequest.self) { (source: AnyObject) -> WalletAlterRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletAlterRequest()
                instance.delta = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["delta"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [WalletTotalResponse]
            Decoders.addDecoder(clazz: [WalletTotalResponse].self) { (source: AnyObject) -> [WalletTotalResponse] in
                return Decoders.decode(clazz: [WalletTotalResponse].self, source: source)
            }
            // Decoder for WalletTotalResponse
            Decoders.addDecoder(clazz: WalletTotalResponse.self) { (source: AnyObject) -> WalletTotalResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletTotalResponse()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [WalletTransactionResource]
            Decoders.addDecoder(clazz: [WalletTransactionResource].self) { (source: AnyObject) -> [WalletTransactionResource] in
                return Decoders.decode(clazz: [WalletTransactionResource].self, source: source)
            }
            // Decoder for WalletTransactionResource
            Decoders.addDecoder(clazz: WalletTransactionResource.self) { (source: AnyObject) -> WalletTransactionResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletTransactionResource()
                instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"])
                instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"])
                instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"])
                instance.source = WalletTransactionResource.Source(rawValue: (sourceDictionary["source"] as? String) ?? "") 
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"])
                instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.walletId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wallet_id"])
                return instance
            }


            // Decoder for [XsollaPaymentRequest]
            Decoders.addDecoder(clazz: [XsollaPaymentRequest].self) { (source: AnyObject) -> [XsollaPaymentRequest] in
                return Decoders.decode(clazz: [XsollaPaymentRequest].self, source: source)
            }
            // Decoder for XsollaPaymentRequest
            Decoders.addDecoder(clazz: XsollaPaymentRequest.self) { (source: AnyObject) -> XsollaPaymentRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = XsollaPaymentRequest()
                instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"])
                instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"])
                return instance
            }
        }
    }
}
